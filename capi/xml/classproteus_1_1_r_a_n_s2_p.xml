<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classproteus_1_1_r_a_n_s2_p" kind="class" language="C++" prot="public">
    <compoundname>proteus::RANS2P</compoundname>
    <basecompoundref refid="classproteus_1_1_r_a_n_s2_p__base" prot="public" virt="non-virtual">proteus::RANS2P_base</basecompoundref>
    <includes refid="_r_a_n_s2_p_8h" local="no">/Users/cekees/proteus/proteus/mprans/RANS2P.h</includes>
    <templateparamlist>
      <param>
        <type>class CompKernelType</type>
      </param>
      <param>
        <type>class CompKernelType_v</type>
      </param>
      <param>
        <type>int</type>
        <declname>nSpace</declname>
        <defname>nSpace</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_element</declname>
        <defname>nQuadraturePoints_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_mesh_trial_element</declname>
        <defname>nDOF_mesh_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_trial_element</declname>
        <defname>nDOF_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_test_element</declname>
        <defname>nDOF_test_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_v_trial_element</declname>
        <defname>nDOF_v_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_v_test_element</declname>
        <defname>nDOF_v_test_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_elementBoundary</declname>
        <defname>nQuadraturePoints_elementBoundary</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p_1a7b007a2b0d9961faa8f679a3db540ca3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_test_X_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_test_X_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="567" column="17" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p_1a657d5d64a05158d6d19614555ce257e7" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_test_X_v_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_test_X_v_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="568" column="17" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p_1a6f565d2a300310b20f932576bd743238" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_v_test_X_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_v_test_X_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="569" column="17" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p_1a6352965aa4dc8cd7ae8cd6cb1c028c96" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_v_test_X_v_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_v_test_X_v_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="570" column="17" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p_1abfb5b49cf342e2e5f857fb9250661615" prot="public" static="no" mutable="no">
        <type>CompKernelType</type>
        <definition>CompKernelType proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::ck</definition>
        <argsstring></argsstring>
        <name>ck</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="571" column="22" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p_1a7a7848813d299e5d43a0c4872556a476" prot="public" static="no" mutable="no">
        <type>CompKernelType_v</type>
        <definition>CompKernelType_v proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::ck_v</definition>
        <argsstring></argsstring>
        <name>ck_v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="572" column="24" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p_1a25259ea48a9bc3708796a96164a3b8de" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1acdff9c5188c64d27db5cdf2669c2a849" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 1, nQuadraturePoints_element &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,1,nQuadraturePoints_element&gt; proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::gf</definition>
        <argsstring></argsstring>
        <name>gf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="573" column="28" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_r_a_n_s2_p_1aa6183d3c81313639cd5ec6c4697ccdde" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1acdff9c5188c64d27db5cdf2669c2a849" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 1, nQuadraturePoints_element &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,1,nQuadraturePoints_element&gt; proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::gf_s</definition>
        <argsstring></argsstring>
        <name>gf_s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="574" column="28" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="574" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a855a5f37352edded7f10b9a548f906f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::RANS2P</definition>
        <argsstring>()</argsstring>
        <name>RANS2P</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="575" column="5" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="575" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1adff72a3cebc8b98398097095827e7aa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateCoefficients</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const double eps_rho, const double eps_mu, const double sigma, const double rho_0, double nu_0, const double rho_1, double nu_1, const double h_e, const double smagorinskyConstant, const int turbulenceClosureModel, const double g[nSpace], const double useVF, const double &amp;vf, const double &amp;phi, const double n[nSpace], const double &amp;kappa, const double porosity, const double phi_solid, const double p_old, const double u_old, const double v_old, const double w_old, const double grad_p_old[nSpace], const double grad_u_old[nSpace], const double grad_v_old[nSpace], const double grad_w_old[nSpace], const int use_pseudo_penalty, const double &amp;p, const double grad_p[nSpace], const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], const double &amp;u, const double &amp;v, const double &amp;w, const double LAG_LES, double &amp;eddy_viscosity, double &amp;eddy_viscosity_last, double &amp;mom_u_acc, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_v, double &amp;mom_w_acc, double &amp;dmom_w_acc_w, double mass_adv[nSpace], double dmass_adv_u[nSpace], double dmass_adv_v[nSpace], double dmass_adv_w[nSpace], double mom_u_adv[nSpace], double dmom_u_adv_u[nSpace], double dmom_u_adv_v[nSpace], double dmom_u_adv_w[nSpace], double mom_v_adv[nSpace], double dmom_v_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_v_adv_w[nSpace], double mom_w_adv[nSpace], double dmom_w_adv_u[nSpace], double dmom_w_adv_v[nSpace], double dmom_w_adv_w[nSpace], double mom_uu_diff_ten[nSpace], double mom_vv_diff_ten[nSpace], double mom_ww_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double &amp;mom_u_ham, double dmom_u_ham_grad_p[nSpace], double dmom_u_ham_grad_u[nSpace], double &amp;dmom_u_ham_u, double &amp;dmom_u_ham_v, double &amp;dmom_u_ham_w, double &amp;mom_v_ham, double dmom_v_ham_grad_p[nSpace], double dmom_v_ham_grad_v[nSpace], double &amp;dmom_v_ham_u, double &amp;dmom_v_ham_v, double &amp;dmom_v_ham_w, double &amp;mom_w_ham, double dmom_w_ham_grad_p[nSpace], double dmom_w_ham_grad_w[nSpace], double &amp;dmom_w_ham_u, double &amp;dmom_w_ham_v, double &amp;dmom_w_ham_w, double &amp;rho, double forcex, double forcey, double forcez)</argsstring>
        <name>evaluateCoefficients</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>h_e</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>g</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>kappa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>p_old</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u_old</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v_old</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w_old</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_p_old</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u_old</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v_old</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w_old</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity_last</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_acc_w</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcey</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcez</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="597" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="597" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a3e0cb3084e0e32cc2355384f2e511801" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_distance_to_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, const double x, const double y, const double z, double &amp;distance)</argsstring>
        <name>get_distance_to_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1063" column="11" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1063" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a5aa363a0b10908c6c2ed472e343cf65b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_distance_to_ith_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, int I, const double x, const double y, const double z, double &amp;distance)</argsstring>
        <name>get_distance_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1084" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1084" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a90291d937f750ccb2105046f007a355b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_normal_to_ith_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, int I, const double x, const double y, const double z, double &amp;nx, double &amp;ny, double &amp;nz)</argsstring>
        <name>get_normal_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>nz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1096" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1096" bodyend="1114"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a9a5e8fe094de9df2b69c2c635a7f0d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_cross_product</definition>
        <argsstring>(const double *u, const double *v, double res[3])</argsstring>
        <name>get_cross_product</name>
        <param>
          <type>const double *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>res</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1115" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1115" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a93a1c0a9daf704bd52b3d1416ffbe58a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_velocity_to_ith_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, const double *ball_velocity, const double *ball_angular_velocity, int I, const double x, const double y, const double z, double &amp;vx, double &amp;vy, double &amp;vz)</argsstring>
        <name>get_velocity_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1121" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1121" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a8d4e605e4a83de181253b63041a8feb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::get_acceleration_to_ith_ball</definition>
        <argsstring>(int n_balls, const double *ball_center, const double *ball_radius, const double *ball_velocity, const double *ball_angular_velocity, const double *ball_center_acceleration, const double *ball_angular_acceleration, int I, const double x, const double y, const double z, double &amp;ax, double &amp;ay, double &amp;az)</argsstring>
        <name>get_acceleration_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>az</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1139" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1139" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1ae66ab530966d1d5fbc2e170ef698a4f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::updateSolidParticleTerms</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, bool element_owned, const double particle_nitsche, const double dV, const int nParticles, const int sd_offset, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, const int use_ball_as_particle, const double *ball_center, const double *ball_radius, const double *ball_velocity, const double *ball_angular_velocity, const double *ball_center_acceleration, const double *ball_angular_acceleration, const double *ball_density, const double porosity, const double penalty, const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double x, const double y, const double z, const double p, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace], double mom_u_adv[nSpace], double mom_v_adv[nSpace], double mom_w_adv[nSpace], double dmom_u_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_w_adv_w[nSpace], double &amp;mom_u_ham, double dmom_u_ham_grad_u[nSpace], double &amp;dmom_u_ham_u, double &amp;dmom_u_ham_v, double &amp;dmom_u_ham_w, double &amp;mom_v_ham, double dmom_v_ham_grad_v[nSpace], double &amp;dmom_v_ham_u, double &amp;dmom_v_ham_v, double &amp;dmom_v_ham_w, double &amp;mom_w_ham, double dmom_w_ham_grad_w[nSpace], double &amp;dmom_w_ham_u, double &amp;dmom_w_ham_v, double &amp;dmom_w_ham_w, double &amp;mass_ham, double &amp;dmass_ham_u, double &amp;dmass_ham_v, double &amp;dmass_ham_w, double *particle_netForces, double *particle_netMoments, double *particle_surfaceArea, const int use_pseudo_penalty)</argsstring>
        <name>updateSolidParticleTerms</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>element_owned</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dV</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sd_offset</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_ham_w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mass_ham</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmass_ham_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmass_ham_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmass_ham_w</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_surfaceArea</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1155" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1155" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1ad2e43c8a8d5e8cbaf4434992e9bf9a7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::updateDarcyForchheimerTerms_Ergun</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double phi_s, const double u_s, const double v_s, const double w_s, double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace])</argsstring>
        <name>updateDarcyForchheimerTerms_Ergun</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w_s</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1452" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1452" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1aab46065ecbde76bd2d9ef320ad287b76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::updateTurbulenceClosure</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const int turbulenceClosureModel, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double porosity, const double eddy_visc_coef_0, const double turb_var_0, const double turb_var_1, const double turb_grad_0[nSpace], double &amp;eddy_viscosity, double mom_uu_diff_ten[nSpace], double mom_vv_diff_ten[nSpace], double mom_ww_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source)</argsstring>
        <name>updateTurbulenceClosure</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eddy_visc_coef_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_var_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_var_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_grad_0</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1534" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1534" bodyend="1657"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1addf5cd3a254683dcee98d02fc43cd5f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;hFactor, const double &amp;elementDiameter, const double &amp;dmt, const double &amp;dm, const double df[nSpace], const double &amp;a, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dmt</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>df</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1660" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1660" bodyend="1684"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1ae3ee3b038921e561ba98a35bfe00dc0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;Ct_sge, const double &amp;Cd_sge, const double G[nSpace *nSpace], const double &amp;G_dd_G, const double &amp;tr_G, const double &amp;A0, const double Ai[nSpace], const double &amp;Kij, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;q_cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>G</declname>
          <array>[nSpace *nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>G_dd_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tr_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>A0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>Ai</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Kij</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1687" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1687" bodyend="1706"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1acf8d86d92ac9b99a31df36acfc6fece3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double &amp;pdeResidualP, const double &amp;pdeResidualU, const double &amp;pdeResidualV, const double &amp;pdeResidualW, double &amp;subgridErrorP, double &amp;subgridErrorU, double &amp;subgridErrorV, double &amp;subgridErrorW)</argsstring>
        <name>calculateSubgridError_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualP</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualU</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualV</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualW</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorP</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorU</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorV</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1709" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1709" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a4d4318b9ef2e89282a12e519eb6ced49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridErrorDerivatives_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double dpdeResidualP_du[nDOF_v_trial_element], const double dpdeResidualP_dv[nDOF_v_trial_element], const double dpdeResidualP_dw[nDOF_v_trial_element], const double dpdeResidualU_dp[nDOF_trial_element], const double dpdeResidualU_du[nDOF_v_trial_element], const double dpdeResidualV_dp[nDOF_trial_element], const double dpdeResidualV_dv[nDOF_v_trial_element], const double dpdeResidualW_dp[nDOF_trial_element], const double dpdeResidualW_dw[nDOF_v_trial_element], double dsubgridErrorP_du[nDOF_v_trial_element], double dsubgridErrorP_dv[nDOF_v_trial_element], double dsubgridErrorP_dw[nDOF_v_trial_element], double dsubgridErrorU_dp[nDOF_trial_element], double dsubgridErrorU_du[nDOF_v_trial_element], double dsubgridErrorV_dp[nDOF_trial_element], double dsubgridErrorV_dv[nDOF_v_trial_element], double dsubgridErrorW_dp[nDOF_trial_element], double dsubgridErrorW_dw[nDOF_v_trial_element])</argsstring>
        <name>calculateSubgridErrorDerivatives_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_du</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dv</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dw</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_du</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dv</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dw</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_du</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dv</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dw</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_du</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dv</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dw</declname>
          <array>[nDOF_v_trial_element]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1729" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1729" bodyend="1774"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1ab987f978eddb3b321b25be02d34f517d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFlux</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double &amp;bc_oneByRho, const double n[nSpace], const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double &amp;bc_w, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double dham_grad[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;flux_mass, double &amp;flux_umom, double &amp;flux_vmom, double &amp;flux_wmom, double *velocity)</argsstring>
        <name>exteriorNumericalAdvectiveFlux</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dham_grad</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_mass</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_umom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_vmom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_wmom</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="1777" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="1777" bodyend="2003"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a25f4dd4b428fe7b1487c82d93fa3a0c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFluxDerivatives</definition>
        <argsstring>(const double NONCONSERVATIVE_FORM, const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double n[nSpace], const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double &amp;bc_w, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, const double &amp;dmom_u_acc_u, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double dham_grad[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;dflux_mass_du, double &amp;dflux_mass_dv, double &amp;dflux_mass_dw, double &amp;dflux_umom_dp, double &amp;dflux_umom_du, double &amp;dflux_umom_dv, double &amp;dflux_umom_dw, double &amp;dflux_vmom_dp, double &amp;dflux_vmom_du, double &amp;dflux_vmom_dv, double &amp;dflux_vmom_dw, double &amp;dflux_wmom_dp, double &amp;dflux_wmom_du, double &amp;dflux_wmom_dv, double &amp;dflux_wmom_dw)</argsstring>
        <name>exteriorNumericalAdvectiveFluxDerivatives</name>
        <param>
          <type>const double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dham_grad</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="2006" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="2006" bodyend="2319"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1aba606100197bd1648a169d46dcf84ad0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalDiffusiveFlux</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *bc_a, const double &amp;bc_u, const double &amp;bc_flux, double *a, const double grad_potential[nSpace], const double &amp;u, const double &amp;penalty, double &amp;flux)</argsstring>
        <name>exteriorNumericalDiffusiveFlux</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_potential</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="2322" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="2322" bodyend="2368"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1ad7f7189cfca7297be05b3782551714b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::ExteriorNumericalDiffusiveFluxJacobian</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *a, const double &amp;v, const double grad_v[nSpace], const double &amp;penalty)</argsstring>
        <name>ExteriorNumericalDiffusiveFluxJacobian</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="2372" column="16" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="2372" bodyend="2403"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a4f3d38ca72da9c6c44587ece861c0d38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateResidual</definition>
        <argsstring>(double NONCONSERVATIVE_FORM, double MOMENTUM_SGE, double PRESSURE_SGE, double VELOCITY_SGE, double PRESSURE_PROJECTION_STABILIZATION, xt::pyarray&lt; double &gt; &amp;numerical_viscosity, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;x_ref, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;p_test_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;p_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_test_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, double eb_adjoint_sigma, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, double hFactor, int nElements_global, int nElementBoundaries_owned, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dc, double C_b, const xt::pyarray&lt; double &gt; &amp;eps_solid, xt::pyarray&lt; double &gt; &amp;phi_solid, const xt::pyarray&lt; double &gt; &amp;q_velocity_solid, const xt::pyarray&lt; double &gt; &amp;q_porosity, const xt::pyarray&lt; double &gt; &amp;q_dragAlpha, const xt::pyarray&lt; double &gt; &amp;q_dragBeta, const xt::pyarray&lt; double &gt; &amp;q_mass_source, const xt::pyarray&lt; double &gt; &amp;q_turb_var_0, const xt::pyarray&lt; double &gt; &amp;q_turb_var_1, const xt::pyarray&lt; double &gt; &amp;q_turb_var_grad_0, const double LAG_LES, xt::pyarray&lt; double &gt; &amp;q_eddy_viscosity, xt::pyarray&lt; double &gt; &amp;q_eddy_viscosity_last, xt::pyarray&lt; double &gt; &amp;ebqe_eddy_viscosity, xt::pyarray&lt; double &gt; &amp;ebqe_eddy_viscosity_last, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; int &gt; &amp;rp_l2g, xt::pyarray&lt; int &gt; &amp;rvel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, xt::pyarray&lt; double &gt; &amp;p_old_dof, xt::pyarray&lt; double &gt; &amp;u_old_dof, xt::pyarray&lt; double &gt; &amp;v_old_dof, xt::pyarray&lt; double &gt; &amp;w_old_dof, xt::pyarray&lt; double &gt; &amp;g, const double useVF, xt::pyarray&lt; double &gt; &amp;q_rho, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; double &gt; &amp;phi_nodes, xt::pyarray&lt; double &gt; &amp;normal_phi, xt::pyarray&lt; double &gt; &amp;kappa_phi, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc, xt::pyarray&lt; double &gt; &amp;q_mom_w_acc, xt::pyarray&lt; double &gt; &amp;q_mass_adv, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_w_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_dV, xt::pyarray&lt; double &gt; &amp;q_dV_last, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u, xt::pyarray&lt; double &gt; &amp;q_numDiff_v, xt::pyarray&lt; double &gt; &amp;q_numDiff_w, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_w_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_colind, int offset_p, int offset_u, int offset_v, int offset_w, int stride_p, int stride_u, int stride_v, int stride_w, xt::pyarray&lt; double &gt; &amp;globalResidual, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_normal_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_kappa_phi_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_porosity_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_0, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_1, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_p, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_w, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_p, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_w, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_w, xt::pyarray&lt; double &gt; &amp;ebqe_bc_p_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_w_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_w_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_w_diff_ext, xt::pyarray&lt; double &gt; &amp;q_x, xt::pyarray&lt; double &gt; &amp;q_velocity, xt::pyarray&lt; double &gt; &amp;ebqe_velocity, xt::pyarray&lt; double &gt; &amp;flux, xt::pyarray&lt; double &gt; &amp;elementResidual_p_save, xt::pyarray&lt; int &gt; &amp;elementFlags, xt::pyarray&lt; int &gt; &amp;boundaryFlags, xt::pyarray&lt; double &gt; &amp;barycenters, xt::pyarray&lt; double &gt; &amp;wettedAreas, xt::pyarray&lt; double &gt; &amp;netForces_p, xt::pyarray&lt; double &gt; &amp;netForces_v, xt::pyarray&lt; double &gt; &amp;netMoments, xt::pyarray&lt; double &gt; &amp;velocityError, xt::pyarray&lt; double &gt; &amp;velocityErrorNodal, xt::pyarray&lt; double &gt; &amp;forcex, xt::pyarray&lt; double &gt; &amp;forcey, xt::pyarray&lt; double &gt; &amp;forcez, int use_ball_as_particle, xt::pyarray&lt; double &gt; &amp;ball_center, xt::pyarray&lt; double &gt; &amp;ball_radius, xt::pyarray&lt; double &gt; &amp;ball_velocity, xt::pyarray&lt; double &gt; &amp;ball_angular_velocity, xt::pyarray&lt; double &gt; &amp;ball_center_acceleration, xt::pyarray&lt; double &gt; &amp;ball_angular_acceleration, xt::pyarray&lt; double &gt; &amp;ball_density, xt::pyarray&lt; double &gt; &amp;particle_signed_distances, xt::pyarray&lt; double &gt; &amp;particle_signed_distance_normals, xt::pyarray&lt; double &gt; &amp;particle_velocities, xt::pyarray&lt; double &gt; &amp;particle_centroids, xt::pyarray&lt; double &gt; &amp;ebq_global_phi_s, xt::pyarray&lt; double &gt; &amp;ebq_global_grad_phi_s, xt::pyarray&lt; double &gt; &amp;ebq_particle_velocity_s, int nParticles, xt::pyarray&lt; double &gt; &amp;particle_netForces, xt::pyarray&lt; double &gt; &amp;particle_netMoments, xt::pyarray&lt; double &gt; &amp;particle_surfaceArea, int nElements_owned, double particle_nitsche, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, xt::pyarray&lt; double &gt; &amp;phi_solid_nodes, xt::pyarray&lt; double &gt; &amp;distance_to_solids, const int use_pseudo_penalty, bool useExact)</argsstring>
        <name>calculateResidual</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p__base_1a963ea717800e6acb25e84e01886fe599">calculateResidual</reimplements>
        <param>
          <type>double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOMENTUM_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>VELOCITY_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_PROJECTION_STABILIZATION</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_eddy_viscosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_eddy_viscosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>rp_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>rvel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_rho</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_nodes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_w_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_adv</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_x</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementResidual_p_save</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>barycenters</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>wettedAreas</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>netForces_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>netForces_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>netMoments</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocityError</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocityErrorNodal</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>forcex</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>forcey</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>forcez</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_global_phi_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_global_grad_phi_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_particle_velocity_s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_netMoments</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_surfaceArea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>distance_to_solids</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="2405" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="2405" bodyend="4485"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1ae44c05f9d6f9bc947943a10fcf31b87b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateJacobian</definition>
        <argsstring>(double NONCONSERVATIVE_FORM, double MOMENTUM_SGE, double PRESSURE_SGE, double VELOCITY_SGE, double PRESSURE_PROJECTION_STABILIZATION, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;x_ref, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;p_test_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;p_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_test_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, double eb_adjoint_sigma, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, double hFactor, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dg, double C_b, const xt::pyarray&lt; double &gt; &amp;eps_solid, const xt::pyarray&lt; double &gt; &amp;phi_solid, const xt::pyarray&lt; double &gt; &amp;q_velocity_solid, const xt::pyarray&lt; double &gt; &amp;q_porosity, const xt::pyarray&lt; double &gt; &amp;q_dragAlpha, const xt::pyarray&lt; double &gt; &amp;q_dragBeta, const xt::pyarray&lt; double &gt; &amp;q_mass_source, const xt::pyarray&lt; double &gt; &amp;q_turb_var_0, const xt::pyarray&lt; double &gt; &amp;q_turb_var_1, const xt::pyarray&lt; double &gt; &amp;q_turb_var_grad_0, const double LAG_LES, xt::pyarray&lt; double &gt; &amp;q_eddy_viscosity_last, xt::pyarray&lt; double &gt; &amp;ebqe_eddy_viscosity_last, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, xt::pyarray&lt; double &gt; &amp;p_old_dof, xt::pyarray&lt; double &gt; &amp;u_old_dof, xt::pyarray&lt; double &gt; &amp;v_old_dof, xt::pyarray&lt; double &gt; &amp;w_old_dof, xt::pyarray&lt; double &gt; &amp;g, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; double &gt; &amp;phi_nodes, xt::pyarray&lt; double &gt; &amp;normal_phi, xt::pyarray&lt; double &gt; &amp;kappa_phi, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_w_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_dV, xt::pyarray&lt; double &gt; &amp;q_dV_last, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_w_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_colind, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_w, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_w, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_w, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; &amp;globalJacobian, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_normal_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_kappa_phi_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_porosity_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_0, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_1, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_p, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_w, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_p, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_w, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_w, xt::pyarray&lt; double &gt; &amp;ebqe_bc_p_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_w_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_w_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_w_diff_ext, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_w, xt::pyarray&lt; int &gt; &amp;elementFlags, xt::pyarray&lt; int &gt; &amp;boundaryFlags, int use_ball_as_particle, xt::pyarray&lt; double &gt; &amp;ball_center, xt::pyarray&lt; double &gt; &amp;ball_radius, xt::pyarray&lt; double &gt; &amp;ball_velocity, xt::pyarray&lt; double &gt; &amp;ball_angular_velocity, xt::pyarray&lt; double &gt; &amp;ball_center_acceleration, xt::pyarray&lt; double &gt; &amp;ball_angular_acceleration, xt::pyarray&lt; double &gt; &amp;ball_density, xt::pyarray&lt; double &gt; &amp;particle_signed_distances, xt::pyarray&lt; double &gt; &amp;particle_signed_distance_normals, xt::pyarray&lt; double &gt; &amp;particle_velocities, xt::pyarray&lt; double &gt; &amp;particle_centroids, xt::pyarray&lt; double &gt; &amp;ebq_global_phi_s, xt::pyarray&lt; double &gt; &amp;ebq_global_grad_phi_s, xt::pyarray&lt; double &gt; &amp;ebq_particle_velocity_s, xt::pyarray&lt; double &gt; &amp;phi_solid_nodes, xt::pyarray&lt; double &gt; &amp;distance_to_solids, int nParticles, int nElements_owned, double particle_nitsche, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, const int use_pseudo_penalty, bool useExact)</argsstring>
        <name>calculateJacobian</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p__base_1a1eb56865a030363c1e46101ba12ce73e">calculateJacobian</reimplements>
        <param>
          <type>double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOMENTUM_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>VELOCITY_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_PROJECTION_STABILIZATION</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_nodes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_global_phi_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_global_grad_phi_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_particle_velocity_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>distance_to_solids</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="4487" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="4487" bodyend="6648"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a85e3969f8f1443ff2fce334c4130688d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::calculateVelocityAverage</definition>
        <argsstring>(int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, int nInteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;interiorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;ebqe_velocity, xt::pyarray&lt; double &gt; &amp;velocityAverage, xt::pyarray&lt; int &gt; &amp;elementMaterialTypes, xt::pyarray&lt; double &gt; &amp;porosityTypes)</argsstring>
        <name>calculateVelocityAverage</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p__base_1ab3d4afdc49aa0f82a16b91a7b23f46a2">calculateVelocityAverage</reimplements>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nInteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>interiorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocityAverage</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementMaterialTypes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>porosityTypes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="6650" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="6650" bodyend="6817"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1ab66a1a6d5a9b4641792020f58af14938" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateTPAdvectionCoefficients</definition>
        <argsstring>(const double eps_rho, const double rho_0, const double rho_1, const double useVF, const double &amp;vf, const double &amp;phi, const double &amp;u, const double &amp;v, const double &amp;w, double dmass_adv_p[nSpace], double dmom_u_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_w_adv_w[nSpace])</argsstring>
        <name>evaluateTPAdvectionCoefficients</name>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="6820" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="6820" bodyend="6856"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a8900d9a341b8fdab38b03c7d5571ca7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateTPInvViscosityMassCoefficients</definition>
        <argsstring>(const int use_numerical_viscosity, const double numerical_viscosity, const double eps_rho, const double eps_mu, const double rho_0, double nu_0, const double rho_1, double nu_1, const double useVF, const double &amp;vf, const double &amp;phi, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, double &amp;mom_p_acc, double &amp;dmom_p_acc_p, double &amp;mom_u_acc, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_v, double &amp;mom_w_acc, double &amp;dmom_w_acc_w)</argsstring>
        <name>evaluateTPInvViscosityMassCoefficients</name>
        <param>
          <type>const int</type>
          <declname>use_numerical_viscosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_p_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_p_acc_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_acc_w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="6858" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="6858" bodyend="6907"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a6c96a8ae5e2aca6096bd12b44658aa84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateTPDensityMassCoefficients</definition>
        <argsstring>(const double eps_rho, const double rho_0, const double rho_1, const double useVF, const double &amp;vf, const double &amp;phi, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, double &amp;mom_p_acc, double &amp;dmom_p_acc_p, double &amp;mom_u_acc, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_v, double &amp;mom_w_acc, double &amp;dmom_w_acc_w)</argsstring>
        <name>evaluateTPDensityMassCoefficients</name>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_p_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_p_acc_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_acc_w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="6909" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="6909" bodyend="6946"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a348042ad3350e7e70a219182dc12645c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateTPInvDensityLaplaceCoefficients</definition>
        <argsstring>(const double eps_rho, const double rho_0, const double rho_1, const double useVF, const double &amp;vf, const double &amp;phi, double mom_p_diff_ten[nSpace], double mom_u_diff_ten[nSpace], double mom_v_diff_ten[nSpace], double mom_w_diff_ten[nSpace])</argsstring>
        <name>evaluateTPInvDensityLaplaceCoefficients</name>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mom_p_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="6948" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="6948" bodyend="6981"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1a4066a1358ff62871fc786f0b827ced50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::getTwoPhaseAdvectionOperator</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; &amp;advection_matrix)</argsstring>
        <name>getTwoPhaseAdvectionOperator</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p__base_1a7ae28605b71198b17663de9b7c271489">getTwoPhaseAdvectionOperator</reimplements>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>advection_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="6983" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="6983" bodyend="7136"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1aa34d4d015653730ed6f72869def7bb1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::getTwoPhaseInvScaledLaplaceOperator</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; int &gt; &amp;sdInfo_p_p_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_p_p_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_colind, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; &amp;laplace_matrix)</argsstring>
        <name>getTwoPhaseInvScaledLaplaceOperator</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p__base_1ad4ba44c6c177b7199e7f638fb84a9db2">getTwoPhaseInvScaledLaplaceOperator</reimplements>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_p_p_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_p_p_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>laplace_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="7138" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="7138" bodyend="7319"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p_1ae7abe1924cd3441df875a156ccb185d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;::getTwoPhaseScaledMassOperator</definition>
        <argsstring>(int scale_type, int use_numerical_viscosity, int lumped, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, xt::pyarray&lt; double &gt; &amp;numerical_viscosity, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; &amp;mass_matrix)</argsstring>
        <name>getTwoPhaseScaledMassOperator</name>
        <reimplements refid="classproteus_1_1_r_a_n_s2_p__base_1a623336fcd7c7745cc4723b134de9196d">getTwoPhaseScaledMassOperator</reimplements>
        <param>
          <type>int</type>
          <declname>scale_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_numerical_viscosity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lumped</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mass_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="7321" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="7321" bodyend="7526"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>proteus::RANS2P_base</label>
        <link refid="classproteus_1_1_r_a_n_s2_p__base"/>
      </node>
      <node id="1">
        <label>proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1_r_a_n_s2_p"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>equivalent_polynomials::GeneralizedFunctions_mix&lt; nSpace, 1, nQuadraturePoints_element &gt;</label>
        <link refid="classequivalent__polynomials_1_1_generalized_functions__mix"/>
      </node>
      <node id="2">
        <label>proteus::RANS2P_base</label>
        <link refid="classproteus_1_1_r_a_n_s2_p__base"/>
      </node>
      <node id="1">
        <label>proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1_r_a_n_s2_p"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>gf</edgelabel>
          <edgelabel>gf_s</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="564" column="5" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="565" bodyend="7528"/>
    <listofallmembers>
      <member refid="classproteus_1_1_r_a_n_s2_p_1ae44c05f9d6f9bc947943a10fcf31b87b" prot="public" virt="virtual"><scope>proteus::RANS2P</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a4f3d38ca72da9c6c44587ece861c0d38" prot="public" virt="virtual"><scope>proteus::RANS2P</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1addf5cd3a254683dcee98d02fc43cd5f7" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1ae3ee3b038921e561ba98a35bfe00dc0e" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1acf8d86d92ac9b99a31df36acfc6fece3" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>calculateSubgridError_tauRes</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a4d4318b9ef2e89282a12e519eb6ced49" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>calculateSubgridErrorDerivatives_tauRes</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a85e3969f8f1443ff2fce334c4130688d" prot="public" virt="virtual"><scope>proteus::RANS2P</scope><name>calculateVelocityAverage</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1abfb5b49cf342e2e5f857fb9250661615" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>ck</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a7a7848813d299e5d43a0c4872556a476" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>ck_v</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1adff72a3cebc8b98398097095827e7aa6" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>evaluateCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1ab66a1a6d5a9b4641792020f58af14938" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>evaluateTPAdvectionCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a6c96a8ae5e2aca6096bd12b44658aa84" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>evaluateTPDensityMassCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a348042ad3350e7e70a219182dc12645c" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>evaluateTPInvDensityLaplaceCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a8900d9a341b8fdab38b03c7d5571ca7a" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>evaluateTPInvViscosityMassCoefficients</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1ab987f978eddb3b321b25be02d34f517d" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>exteriorNumericalAdvectiveFlux</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a25f4dd4b428fe7b1487c82d93fa3a0c7" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>exteriorNumericalAdvectiveFluxDerivatives</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1aba606100197bd1648a169d46dcf84ad0" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>exteriorNumericalDiffusiveFlux</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1ad7f7189cfca7297be05b3782551714b0" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>ExteriorNumericalDiffusiveFluxJacobian</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a8d4e605e4a83de181253b63041a8feb6" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>get_acceleration_to_ith_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a9a5e8fe094de9df2b69c2c635a7f0d8e" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>get_cross_product</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a3e0cb3084e0e32cc2355384f2e511801" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>get_distance_to_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a5aa363a0b10908c6c2ed472e343cf65b" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>get_distance_to_ith_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a90291d937f750ccb2105046f007a355b" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>get_normal_to_ith_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a93a1c0a9daf704bd52b3d1416ffbe58a" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>get_velocity_to_ith_ball</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a4066a1358ff62871fc786f0b827ced50" prot="public" virt="virtual"><scope>proteus::RANS2P</scope><name>getTwoPhaseAdvectionOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1aa34d4d015653730ed6f72869def7bb1f" prot="public" virt="virtual"><scope>proteus::RANS2P</scope><name>getTwoPhaseInvScaledLaplaceOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1ae7abe1924cd3441df875a156ccb185d7" prot="public" virt="virtual"><scope>proteus::RANS2P</scope><name>getTwoPhaseScaledMassOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a25259ea48a9bc3708796a96164a3b8de" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>gf</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1aa6183d3c81313639cd5ec6c4697ccdde" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>gf_s</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a7b007a2b0d9961faa8f679a3db540ca3" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>nDOF_test_X_trial_element</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a657d5d64a05158d6d19614555ce257e7" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>nDOF_test_X_v_trial_element</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a6f565d2a300310b20f932576bd743238" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>nDOF_v_test_X_trial_element</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a6352965aa4dc8cd7ae8cd6cb1c028c96" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>nDOF_v_test_X_v_trial_element</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1a855a5f37352edded7f10b9a548f906f9" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>RANS2P</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1ad2e43c8a8d5e8cbaf4434992e9bf9a7d" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>updateDarcyForchheimerTerms_Ergun</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1ae66ab530966d1d5fbc2e170ef698a4f3" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>updateSolidParticleTerms</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p_1aab46065ecbde76bd2d9ef320ad287b76" prot="public" virt="non-virtual"><scope>proteus::RANS2P</scope><name>updateTurbulenceClosure</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1ac98b9770a5a62b4c353b5487b6094593" prot="public" virt="virtual"><scope>proteus::RANS2P</scope><name>~RANS2P_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
