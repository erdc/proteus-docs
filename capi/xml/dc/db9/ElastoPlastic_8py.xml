<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="dc/db9/ElastoPlastic_8py" kind="file" language="Python">
    <compoundname>ElastoPlastic.py</compoundname>
    <innerclass refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients" prot="public">proteus::elastoplastic::ElastoPlastic::Coefficients</innerclass>
    <innerclass refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel" prot="public">proteus::elastoplastic::ElastoPlastic::LevelModel</innerclass>
    <innernamespace refid="dc/d90/namespaceproteus_1_1elastoplastic_1_1ElastoPlastic">proteus::elastoplastic::ElastoPlastic</innernamespace>
    <innernamespace refid="d4/d4a/namespacecElastoPlastic">cElastoPlastic</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="dc/d90/namespaceproteus_1_1elastoplastic_1_1ElastoPlastic" refkind="compound"><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>division</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>str</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>range</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>past.utils<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>old_div</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>proteus</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>proteus<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>FemTools,<sp/>Archiver</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.cElastoPlastic<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>math<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>atan,<sp/>tan</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/namespaceproteus_1_1Transport" kindref="compound">proteus.Transport</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>OneLevelTransport,<sp/>sqrt,<sp/>TC_base</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/namespaceproteus_1_1Transport" kindref="compound">proteus.Transport</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>NonlinearEquation,<sp/>logEvent,<sp/>memory</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/namespaceproteus_1_1Transport" kindref="compound">proteus.Transport</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>FluxBoundaryConditions,<sp/>Comm,<sp/>cfemIntegrals</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="d7/d8b/namespaceproteus_1_1Transport" kindref="compound">proteus.Transport</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>DOFBoundaryConditions,<sp/>Quadrature</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="d1/d5a/namespaceproteus_1_1mprans" kindref="compound">proteus.mprans</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cArgumentsDict</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients" kindref="compound">Coefficients</ref>(<ref refid="d1/d7a/classproteus_1_1TransportCoefficients_1_1TC__base" kindref="compound">proteus.TransportCoefficients.TC_base</ref>):</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a3bfe205f882a3093c5653c16c6f83c6f" kindref="member">__init__</ref>(self,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelType_block,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modelParams_block,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g=[0.0,0.0,-9.8],#gravitational<sp/>acceleration</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhow=998.2,#kg/m^3<sp/>water<sp/>density<sp/>(used<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pore<sp/>pressures<sp/>specified)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pa=101325.0,</highlight><highlight class="comment">#N/m^2<sp/>atmospheric<sp/>pressure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd=3,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meIndex=0,seepageIndex=-1,SRF=1.0,pore_pressure_file_base=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,pore_pressure_field_path=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>copy</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af29a6d6ab378e78b7f7b7bcabf57f019" kindref="member">modelType_block</ref><sp/>=<sp/>modelType_block</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af759853cc3f4736b78c891153f9fa54e" kindref="member">modelParams_block</ref><sp/>=<sp/>modelParams_block</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref><sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af759853cc3f4736b78c891153f9fa54e" kindref="member">modelParams_block</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aef9984298ee7d2abd719f720bc7498e4" kindref="member">materialProperties_default</ref><sp/>=<sp/>copy.deepcopy(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af759853cc3f4736b78c891153f9fa54e" kindref="member">modelParams_block</ref>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad4993d5d6a2aaf48e6f23fc7c85227a1" kindref="member">nMaterialProperties</ref><sp/>=<sp/>len(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref>[-1])</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1adb087dcb7cfd6704ff6c368c9249f76b" kindref="member">SRF</ref>=SRF</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad20c2dd6c5d6d3b6c4fea7395b4c2112" kindref="member">g</ref><sp/>=<sp/>np.array(g)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a7a8a76cb19e8160eb2029889945a6243" kindref="member">gmag</ref><sp/>=<sp/><ref refid="d7/df2/namespaceproteus_1_1AnalysisTools_1a1b0cb6ec0a08405728cb648dd4589f26" kindref="member">sqrt</ref>(<ref refid="de/d5b/Headers_8h_1a4236a05d5d04839f0af91439cb8820b8" kindref="member">sum</ref>([gi**2<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>gi<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>g]))</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a9ce4cd5027230478a323af267cd3b494" kindref="member">rhow</ref>=rhow</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aea0bf9c8e7805423c40fe8c7848f78d6" kindref="member">pore_fluid_unit_weight</ref><sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a7a8a76cb19e8160eb2029889945a6243" kindref="member">gmag</ref>*self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a9ce4cd5027230478a323af267cd3b494" kindref="member">rhow</ref></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/dcc/jf_8h_1a665602667543592b4547008b72a9631b" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;pore_fluid_unit_weight&quot;</highlight><highlight class="normal">,<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aea0bf9c8e7805423c40fe8c7848f78d6" kindref="member">pore_fluid_unit_weight</ref>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/dcc/jf_8h_1a665602667543592b4547008b72a9631b" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;soil_unit_weight&quot;</highlight><highlight class="normal">,<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref>[0,13]*self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a7a8a76cb19e8160eb2029889945a6243" kindref="member">gmag</ref>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a8ad6378d11f0093b745e3890b02a97e6" kindref="member">pa</ref>=pa</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac938bdd72c0f3dafeac5972b9c80bab4" kindref="member">nd</ref>=nd</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass={}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advection={}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffusion={}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>potential={}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction={}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hamiltonian={}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stress={}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(nd==3)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variableNames=[</highlight><highlight class="stringliteral">&apos;hx&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;hy&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;hz&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass<sp/>=<sp/>{0:{0:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1:{1:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2:{2:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">}}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction<sp/>=<sp/>{0:{0:</highlight><highlight class="stringliteral">&apos;constant&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1:{1:</highlight><highlight class="stringliteral">&apos;constant&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2:{2:</highlight><highlight class="stringliteral">&apos;constant&apos;</highlight><highlight class="normal">}}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stress=<sp/>{0:{0:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">,1:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">,2:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1:{0:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">,1:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">,2:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2:{0:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">,1:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">,2:</highlight><highlight class="stringliteral">&apos;linear&apos;</highlight><highlight class="normal">}}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC_base.__init__(self,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advection,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffusion,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>potential,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hamiltonian,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variableNames,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stress=stress)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a9928c7019743cdb51acccc4215713694" kindref="member">vectorComponents</ref>=[0,1,2]</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a25311d0897cc0f799b3470131a8aae87" kindref="member">vectorName</ref>=</highlight><highlight class="stringliteral">&quot;displacement&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae81de335007dd8078364ce90458aa75c" kindref="member">firstCall</ref>=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9bda217aa2d687caf173e31be41ea0a" kindref="member">gravityStep</ref>=1</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a10c5cc35e10f8e4d88b78056a174c128" kindref="member">lastStepWasGravityStep</ref>=</highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a99932068c8b0ea8478ce55c3379e928b" kindref="member">meIndex</ref><sp/>=<sp/>meIndex</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac70780b69874f510db0a392bfea6b063" kindref="member">seepageIndex</ref><sp/>=<sp/>seepageIndex</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad14e87562265c7edeaf94aad3db26def" kindref="member">copyInstructions</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;reset_uList&apos;</highlight><highlight class="normal">:</highlight><highlight class="keyword">True</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae0ad5d6f21e1fd122ddcf0c8f1213f9f" kindref="member">pore_pressure_file_base</ref>=pore_pressure_file_base</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae962f40a33897475f1ee87e42803fad6" kindref="member">pore_pressure_field_path</ref>=pore_pressure_field_path</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a69c56ed9af9454c0b549f254d5cdedc1" kindref="member">attachModels</ref>(self,modelList):</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac41fc0d9c1c7cf4b61bb5ba4fa8a711a" kindref="member">model</ref><sp/>=<sp/>modelList[self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a99932068c8b0ea8478ce55c3379e928b" kindref="member">meIndex</ref>]</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1abef47f942bfcda3a09db6e2a6ce9fe8a" kindref="member">pore_pressure_head</ref><sp/>=<sp/>np.zeros((self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac41fc0d9c1c7cf4b61bb5ba4fa8a711a" kindref="member">model</ref>.mesh.nodeArray.shape[0],),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac70780b69874f510db0a392bfea6b063" kindref="member">seepageIndex</ref><sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a2c8a32aae0c949d528c2285f44caa8c5" kindref="member">seepageModel</ref><sp/>=<sp/>modelList[self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac70780b69874f510db0a392bfea6b063" kindref="member">seepageIndex</ref>]</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af83771afd5246e0bf1dcd20cb8f4bbbf" kindref="member">pore_pressure_head_save</ref><sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a2c8a32aae0c949d528c2285f44caa8c5" kindref="member">seepageModel</ref>.u.dof[0]</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.pre_pressure_head[:]=self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af83771afd5246e0bf1dcd20cb8f4bbbf" kindref="member">pore_pressure_head_save</ref></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae0ad5d6f21e1fd122ddcf0c8f1213f9f" kindref="member">pore_pressure_file_base</ref><sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>h5py</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>archive<sp/>=<sp/>h5py.File(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae0ad5d6f21e1fd122ddcf0c8f1213f9f" kindref="member">pore_pressure_file_base</ref>+</highlight><highlight class="stringliteral">&quot;.h5&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permute<sp/>=<sp/>np.argsort(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a3fe9c052c85a13bc03fcd54453a730a2" kindref="member">mesh</ref>.globalMesh.nodeNumbering_subdomain2global)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1abef47f942bfcda3a09db6e2a6ce9fe8a" kindref="member">pore_pressure_head</ref>[permute]<sp/>=<sp/>archive[self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae962f40a33897475f1ee87e42803fad6" kindref="member">pore_pressure_field_path</ref>][self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a3fe9c052c85a13bc03fcd54453a730a2" kindref="member">mesh</ref>.globalMesh.nodeNumbering_subdomain2global[permute].tolist()]</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af83771afd5246e0bf1dcd20cb8f4bbbf" kindref="member">pore_pressure_head_save</ref><sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1abef47f942bfcda3a09db6e2a6ce9fe8a" kindref="member">pore_pressure_head</ref>.copy()</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af83771afd5246e0bf1dcd20cb8f4bbbf" kindref="member">pore_pressure_head_save</ref><sp/>=<sp/>np.zeros((self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac41fc0d9c1c7cf4b61bb5ba4fa8a711a" kindref="member">model</ref>.mesh.nodeArray.shape[0],),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae010b8430b6b733950eb420833937e94" kindref="member">initializeElementQuadrature</ref>(self,t,cq):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Give<sp/>the<sp/>TC<sp/>object<sp/>access<sp/>to<sp/>the<sp/>element<sp/>quadrature<sp/>storage</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae81de335007dd8078364ce90458aa75c" kindref="member">firstCall</ref>:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae81de335007dd8078364ce90458aa75c" kindref="member">firstCall</ref>=</highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9316b48cbe89f5150469fdede9a3a06" kindref="member">cq</ref>=cq</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq[</highlight><highlight class="stringliteral">&apos;strain0&apos;</highlight><highlight class="normal">]<sp/>=<sp/>cq[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">].copy()</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">]<sp/>=<sp/>cq[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">].copy()</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq[</highlight><highlight class="stringliteral">&apos;plasticStrain&apos;</highlight><highlight class="normal">]<sp/>=<sp/>cq[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">].copy()</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">]<sp/>=<sp/>cq[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">].copy()</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">][:]=0.0</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq[</highlight><highlight class="stringliteral">&apos;plasticStrain&apos;</highlight><highlight class="normal">][:]=0.0</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cq[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">][:]=0.0</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af5fd345f9bf60097c78f825789b27bcc" kindref="member">bodyForce</ref><sp/>=<sp/>cq[</highlight><highlight class="stringliteral">&apos;bodyForce&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>eN<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af5fd345f9bf60097c78f825789b27bcc" kindref="member">bodyForce</ref>.shape[0]):</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhos<sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref>[self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a3fe9c052c85a13bc03fcd54453a730a2" kindref="member">mesh</ref>.elementMaterialTypes[eN],13]</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af5fd345f9bf60097c78f825789b27bcc" kindref="member">bodyForce</ref>.shape[1]):</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af5fd345f9bf60097c78f825789b27bcc" kindref="member">bodyForce</ref>[eN,k,:]<sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad20c2dd6c5d6d3b6c4fea7395b4c2112" kindref="member">g</ref>*rhos</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a7e6c9fce0b77dcca7d3709387844f7e3" kindref="member">initializeGlobalExteriorElementBoundaryQuadrature</ref>(self,t,cebqe):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Give<sp/>the<sp/>TC<sp/>object<sp/>access<sp/>to<sp/>the<sp/>element<sp/>quadrature<sp/>storage</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad05395c8d42661af59c1fc76c152e07e" kindref="member">cebqe</ref><sp/>=<sp/>cebqe</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cebqe[</highlight><highlight class="stringliteral">&apos;strain0&apos;</highlight><highlight class="normal">]<sp/>=<sp/>cebqe[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">].copy()</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cebqe[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">]<sp/>=<sp/>cebqe[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">].copy()</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cebqe[</highlight><highlight class="stringliteral">&apos;plasticStrain&apos;</highlight><highlight class="normal">]<sp/>=<sp/>cebqe[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">].copy()</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cebqe[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">]<sp/>=<sp/>cebqe[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">].copy()</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cebqe[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">][:]=0.0</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cebqe[</highlight><highlight class="stringliteral">&apos;plasticStrain&apos;</highlight><highlight class="normal">][:]=0.0</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cebqe[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">][:]=0.0</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa32337cf9d16d12f86b0f242fdb511dd" kindref="member">initializeMesh</ref>(self,mesh):</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a3fe9c052c85a13bc03fcd54453a730a2" kindref="member">mesh</ref><sp/>=<sp/>mesh</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aea05df6631d4f1d1a005528a3119d05c" kindref="member">postStep</ref>(self,t,firstStep=False):</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9bda217aa2d687caf173e31be41ea0a" kindref="member">gravityStep</ref>:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9bda217aa2d687caf173e31be41ea0a" kindref="member">gravityStep</ref><sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9316b48cbe89f5150469fdede9a3a06" kindref="member">cq</ref>[</highlight><highlight class="stringliteral">&apos;strain0&apos;</highlight><highlight class="normal">][:]=self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9316b48cbe89f5150469fdede9a3a06" kindref="member">cq</ref>[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad05395c8d42661af59c1fc76c152e07e" kindref="member">cebqe</ref>[</highlight><highlight class="stringliteral">&apos;strain0&apos;</highlight><highlight class="normal">][:]<sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad05395c8d42661af59c1fc76c152e07e" kindref="member">cebqe</ref>[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9bda217aa2d687caf173e31be41ea0a" kindref="member">gravityStep</ref><sp/>=<sp/>2</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9bda217aa2d687caf173e31be41ea0a" kindref="member">gravityStep</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9316b48cbe89f5150469fdede9a3a06" kindref="member">cq</ref>[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">][:]<sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9316b48cbe89f5150469fdede9a3a06" kindref="member">cq</ref>[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aa9316b48cbe89f5150469fdede9a3a06" kindref="member">cq</ref>[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">][:]<sp/>=<sp/>0.0</highlight><highlight class="comment">#self.cq[&apos;plasticStrain&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad05395c8d42661af59c1fc76c152e07e" kindref="member">cebqe</ref>[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">][:]<sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad05395c8d42661af59c1fc76c152e07e" kindref="member">cebqe</ref>[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad05395c8d42661af59c1fc76c152e07e" kindref="member">cebqe</ref>[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">][:]<sp/>=<sp/>0.0</highlight><highlight class="comment">#self.cebqe[&apos;plasticStrain&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1abef47f942bfcda3a09db6e2a6ce9fe8a" kindref="member">pore_pressure_head</ref>[:]<sp/>=<sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1af83771afd5246e0bf1dcd20cb8f4bbbf" kindref="member">pore_pressure_head_save</ref></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a10c5cc35e10f8e4d88b78056a174c128" kindref="member">lastStepWasGravityStep</ref>=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.model.u[0].dof[:]=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.model.u[1].dof[:]=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.model.u[2].dof[:]=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>it<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref>.shape[0]):</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#cek<sp/>hack<sp/>for<sp/>veg<sp/>on<sp/>levees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>7:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref>[it,5]<sp/>=<sp/>atan(old_div(tan(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aef9984298ee7d2abd719f720bc7498e4" kindref="member">materialProperties_default</ref>[it,5]),self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1adb087dcb7cfd6704ff6c368c9249f76b" kindref="member">SRF</ref>))</highlight><highlight class="comment">#phi_mc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref>[it,6]<sp/>=<sp/>old_div(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aef9984298ee7d2abd719f720bc7498e4" kindref="member">materialProperties_default</ref>[it,6],self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1adb087dcb7cfd6704ff6c368c9249f76b" kindref="member">SRF</ref>)</highlight><highlight class="comment">#c_mc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad14e87562265c7edeaf94aad3db26def" kindref="member">copyInstructions</ref><sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;reset_uList&apos;</highlight><highlight class="normal">:</highlight><highlight class="keyword">True</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/dcc/jf_8h_1a665602667543592b4547008b72a9631b" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Completed========================SRF<sp/>=<sp/>&quot;</highlight><highlight class="normal">+repr(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1adb087dcb7cfd6704ff6c368c9249f76b" kindref="member">SRF</ref>)+</highlight><highlight class="stringliteral">&quot;===============================&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a10c5cc35e10f8e4d88b78056a174c128" kindref="member">lastStepWasGravityStep</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1adb087dcb7cfd6704ff6c368c9249f76b" kindref="member">SRF</ref><sp/>+=<sp/>0.05</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>it<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref>.shape[0]):</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>7:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref>[it,5]<sp/>=<sp/>atan(old_div(tan(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aef9984298ee7d2abd719f720bc7498e4" kindref="member">materialProperties_default</ref>[it,5]),self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1adb087dcb7cfd6704ff6c368c9249f76b" kindref="member">SRF</ref>))</highlight><highlight class="comment">#phi_mc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ae47e7b72a14a1fa0dfb1956d99683b26" kindref="member">materialProperties</ref>[it,6]<sp/>=<sp/>old_div(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1aef9984298ee7d2abd719f720bc7498e4" kindref="member">materialProperties_default</ref>[it,6],self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1adb087dcb7cfd6704ff6c368c9249f76b" kindref="member">SRF</ref>)</highlight><highlight class="comment">#c_mc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad14e87562265c7edeaf94aad3db26def" kindref="member">copyInstructions</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/dcc/jf_8h_1a665602667543592b4547008b72a9631b" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;=========Not<sp/>Updating<sp/>Mesh=================&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.mesh.nodeArray[:,0]+=self.model.u[0].dof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.mesh.nodeArray[:,1]+=self.model.u[1].dof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.mesh.nodeArray[:,2]+=self.model.u[2].dof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a276f162b7d08bd9a31a2a2dda696e9c9" kindref="member">preStep</ref>(self,t,firstStep=False):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/dcc/jf_8h_1a665602667543592b4547008b72a9631b" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;Starting========================SRF<sp/>=<sp/>&quot;</highlight><highlight class="normal">+repr(self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1adb087dcb7cfd6704ff6c368c9249f76b" kindref="member">SRF</ref>)+</highlight><highlight class="stringliteral">&quot;===============================&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a10c5cc35e10f8e4d88b78056a174c128" kindref="member">lastStepWasGravityStep</ref>:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac41fc0d9c1c7cf4b61bb5ba4fa8a711a" kindref="member">model</ref>.u[0].dof[:]=0.0</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac41fc0d9c1c7cf4b61bb5ba4fa8a711a" kindref="member">model</ref>.u[1].dof[:]=0.0</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ac41fc0d9c1c7cf4b61bb5ba4fa8a711a" kindref="member">model</ref>.u[2].dof[:]=0.0</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1ad14e87562265c7edeaf94aad3db26def" kindref="member">copyInstructions</ref></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="d1/d42/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1Coefficients_1a9619228b485bcd3837a90c6106d34671" kindref="member">evaluate</ref>(self,t,c):</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LevelModel(<ref refid="dc/d1f/classproteus_1_1Transport_1_1OneLevelTransport" kindref="compound">proteus.Transport.OneLevelTransport</ref>):</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>nCalls=0</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel_1ac1e3689ed18d22eb7bea8f6c632a963c" kindref="member">__init__</ref>(self,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uDict,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phiDict,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testSpaceDict,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matType,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dofBoundaryConditionsDict,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dofBoundaryConditionsSetterDict,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficients,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadrature,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryQuadrature,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fluxBoundaryConditionsDict=None,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advectiveFluxBoundaryConditionsSetterDict=None,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffusiveFluxBoundaryConditionsSetterDictDict=None,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stressFluxBoundaryConditionsSetterDict=None,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stabilization=None,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shockCapturing=None,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conservativeFluxDict=None,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numericalFluxType=None,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeIntegrationClass=None,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>massLumping=False,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reactionLumping=False,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options=None,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=&apos;Plasticity&apos;,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reuse_trial_and_test_quadrature=True,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sd<sp/>=<sp/>True,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>movingDomain=False,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bdyNullSpace=False):</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bdyNullSpace=bdyNullSpace</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#set<sp/>the<sp/>objects<sp/>describing<sp/>the<sp/>method<sp/>and<sp/>boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.velocityPostProcessor<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.movingDomain=movingDomain</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.tLast_mesh=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#cek<sp/>todo<sp/>clean<sp/>up<sp/>these<sp/>flags<sp/>in<sp/>the<sp/>optimized<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bcsTimeDependent=options.bcsTimeDependent</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bcsSet=</highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.name=name</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.sd=sd</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.lowmem=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.timeTerm=</highlight><highlight class="keyword">True</highlight><highlight class="comment">#allow<sp/>turning<sp/>off<sp/><sp/>the<sp/><sp/>time<sp/>derivative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.testIsTrial=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.phiTrialIsTrial=</highlight><highlight class="keyword">True</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u<sp/>=<sp/>uDict</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Hess=</highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(self.u[0].femSpace,FemTools.C0_AffineQuadraticOnSimplexWithNodalBasis):</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Hess=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ua<sp/>=<sp/>{}</highlight><highlight class="comment">#analytical<sp/>solutions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.phi<sp/><sp/>=<sp/>phiDict</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dphi={}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matType<sp/>=<sp/>matType</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mwf<sp/>try<sp/>to<sp/>reuse<sp/>test<sp/>and<sp/>trial<sp/>information<sp/>across<sp/>components<sp/>if<sp/>spaces<sp/>are<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.reuse_test_trial_quadrature<sp/>=<sp/>reuse_trial_and_test_quadrature</highlight><highlight class="comment">#True#False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.reuse_test_trial_quadrature:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,coefficients.nc):</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>self.u[ci].femSpace.__class__.__name__<sp/>==<sp/>self.u[0].femSpace.__class__.__name__,<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>reuse_test_trial_quad<sp/>all<sp/>femSpaces<sp/>must<sp/>be<sp/>the<sp/>same!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh<sp/>=<sp/>self.u[0].femSpace.mesh<sp/></highlight><highlight class="comment">#assume<sp/>the<sp/>same<sp/>mesh<sp/>for<sp/><sp/>all<sp/>components<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.testSpace<sp/>=<sp/>testSpaceDict</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dirichletConditions<sp/>=<sp/>dofBoundaryConditionsDict</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dirichletNodeSetList=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">#explicit<sp/>Dirichlet<sp/><sp/>conditions<sp/>for<sp/>now,<sp/>no<sp/>Dirichlet<sp/>BC<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.coefficients<sp/>=<sp/>coefficients</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.coefficients.<ref refid="d2/d2f/group__mesh_1ga509a95e0124b5fdd0a7cd09574cb5e30" kindref="member">initializeMesh</ref>(self.mesh)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nc<sp/>=<sp/>self.coefficients.nc</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stabilization<sp/>=<sp/>stabilization</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.shockCapturing<sp/>=<sp/>shockCapturing</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.conservativeFlux<sp/>=<sp/>conservativeFluxDict<sp/></highlight><highlight class="comment">#no<sp/>velocity<sp/>post-processing<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.fluxBoundaryConditions=fluxBoundaryConditionsDict</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stressFluxBoundaryConditionsSetterDict=stressFluxBoundaryConditionsSetterDict</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#determine<sp/>whether<sp/><sp/>the<sp/>stabilization<sp/>term<sp/>is<sp/>nonlinear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stabilizationIsNonlinear<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#cek<sp/>come<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.stabilization<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc):</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>coefficients.mass:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>flag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(coefficients.mass[ci].values()):</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>flag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;nonlinear&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stabilizationIsNonlinear=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>coefficients.advection:</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>flag<sp/><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(coefficients.advection[ci].values()):</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>flag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;nonlinear&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stabilizationIsNonlinear=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>coefficients.diffusion:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>diffusionDict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(coefficients.diffusion[ci].values()):</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>flag<sp/><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(diffusionDict.values()):</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>flag<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;constant&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stabilizationIsNonlinear=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>coefficients.potential:</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>flag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(coefficients.potential[ci].values()):</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>flag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;nonlinear&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stabilizationIsNonlinear=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>coefficients.reaction:</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>flag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(coefficients.reaction[ci].values()):</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>flag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;nonlinear&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stabilizationIsNonlinear=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>coefficients.hamiltonian:</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>flag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(coefficients.hamiltonian[ci].values()):</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>flag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;nonlinear&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stabilizationIsNonlinear=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#determine<sp/>if<sp/>we<sp/>need<sp/>element<sp/>boundary<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementBoundaryIntegrals<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc):</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementBoundaryIntegrals[ci]<sp/>=<sp/>((self.conservativeFlux<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(numericalFluxType<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.fluxBoundaryConditions[ci]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;outFlow&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.fluxBoundaryConditions[ci]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;mixedFlow&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.fluxBoundaryConditions[ci]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;setFlow&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#calculate<sp/>some<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nSpace_global<sp/><sp/><sp/><sp/>=<sp/>self.u[0].femSpace.nSpace_global<sp/></highlight><highlight class="comment">#assume<sp/>same<sp/>space<sp/>dim<sp/>for<sp/>all<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nDOF_trial_element<sp/><sp/><sp/><sp/><sp/>=<sp/>[u_j.femSpace.max_nDOF_element<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>u_j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.u.values())]</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nDOF_phi_trial_element<sp/><sp/><sp/><sp/><sp/>=<sp/>[phi_k.femSpace.max_nDOF_element<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>phi_k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.phi.values())]</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.n_phi_ip_element<sp/>=<sp/>[phi_k.femSpace.referenceFiniteElement.interpolationConditions.nQuadraturePoints<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/><sp/>phi_k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.phi.values())]</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nDOF_test_element<sp/><sp/><sp/><sp/><sp/>=<sp/>[femSpace.max_nDOF_element<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>femSpace<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.testSpace.values())]</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nFreeDOF_global<sp/><sp/>=<sp/>[dc.nFreeDOF_global<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>dc<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.dirichletConditions.values())]</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nVDOF_element<sp/><sp/><sp/><sp/>=<sp/><ref refid="de/d5b/Headers_8h_1a4236a05d5d04839f0af91439cb8820b8" kindref="member">sum</ref>(self.nDOF_trial_element)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nFreeVDOF_global<sp/>=<sp/><ref refid="de/d5b/Headers_8h_1a4236a05d5d04839f0af91439cb8820b8" kindref="member">sum</ref>(self.nFreeDOF_global)<sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonlinearEquation.__init__(self,self.nFreeVDOF_global)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#build<sp/>the<sp/>quadrature<sp/>point<sp/>dictionaries<sp/>from<sp/>the<sp/>input<sp/>(this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#is<sp/>just<sp/>for<sp/>convenience<sp/>so<sp/>that<sp/>the<sp/>input<sp/>doesn&apos;t<sp/>have<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#complete)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict={}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elemQuadIsDict<sp/>=<sp/>isinstance(elementQuadrature,dict)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>elemQuadIsDict:<sp/></highlight><highlight class="comment">#set<sp/>terms<sp/>manually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.coefficients.elementIntegralKeys:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>elementQuadrature:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[I]<sp/>=<sp/>elementQuadrature[I]</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[I]<sp/>=<sp/>elementQuadrature[</highlight><highlight class="stringliteral">&apos;default&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.coefficients.elementIntegralKeys:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[I]<sp/>=<sp/>elementQuadrature</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.stabilization<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.coefficients.elementIntegralKeys:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>elemQuadIsDict:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>elementQuadrature:</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;stab&apos;</highlight><highlight class="normal">,)+I[1:]]<sp/>=<sp/>elementQuadrature[I]</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;stab&apos;</highlight><highlight class="normal">,)+I[1:]]<sp/>=<sp/>elementQuadrature[</highlight><highlight class="stringliteral">&apos;default&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;stab&apos;</highlight><highlight class="normal">,)+I[1:]]<sp/>=<sp/>elementQuadrature</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.shockCapturing<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.shockCapturing.components:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>elemQuadIsDict:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;numDiff&apos;</highlight><highlight class="normal">,ci,ci)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>elementQuadrature:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;numDiff&apos;</highlight><highlight class="normal">,ci,ci)]<sp/>=<sp/>elementQuadrature[(</highlight><highlight class="stringliteral">&apos;numDiff&apos;</highlight><highlight class="normal">,ci,ci)]</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;numDiff&apos;</highlight><highlight class="normal">,ci,ci)]<sp/>=<sp/>elementQuadrature[</highlight><highlight class="stringliteral">&apos;default&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;numDiff&apos;</highlight><highlight class="normal">,ci,ci)]<sp/>=<sp/>elementQuadrature</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>massLumping:</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.coefficients.mass.keys()):</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;m&apos;</highlight><highlight class="normal">,ci)]<sp/>=<sp/>Quadrature.SimplexLobattoQuadrature(self.nSpace_global,1)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.coefficients.elementIntegralKeys:</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;stab&apos;</highlight><highlight class="normal">,)+I[1:]]<sp/>=<sp/>Quadrature.SimplexLobattoQuadrature(self.nSpace_global,1)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>reactionLumping:</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.coefficients.mass.keys()):</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">,ci)]<sp/>=<sp/>Quadrature.SimplexLobattoQuadrature(self.nSpace_global,1)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.coefficients.elementIntegralKeys:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementQuadratureDict[(</highlight><highlight class="stringliteral">&apos;stab&apos;</highlight><highlight class="normal">,)+I[1:]]<sp/>=<sp/>Quadrature.SimplexLobattoQuadrature(self.nSpace_global,1)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryQuadratureDict={}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(elementBoundaryQuadrature,dict):<sp/></highlight><highlight class="comment">#set<sp/>terms<sp/>manually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.coefficients.elementBoundaryIntegralKeys:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>elementBoundaryQuadrature:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryQuadratureDict[I]<sp/>=<sp/>elementBoundaryQuadrature[I]</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryQuadratureDict[I]<sp/>=<sp/>elementBoundaryQuadrature[</highlight><highlight class="stringliteral">&apos;default&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>I<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.coefficients.elementBoundaryIntegralKeys:<sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementBoundaryQuadratureDict[I]<sp/>=<sp/>elementBoundaryQuadrature</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>find<sp/>the<sp/>union<sp/>of<sp/>all<sp/>element<sp/>quadrature<sp/>points<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>build<sp/>a<sp/>quadrature<sp/>rule<sp/>for<sp/>each<sp/>integral<sp/>that<sp/>has<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>weight<sp/>at<sp/>each<sp/>point<sp/>in<sp/>the<sp/>union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mwf<sp/>include<sp/>tag<sp/>telling<sp/>me<sp/>which<sp/>indices<sp/>are<sp/>which<sp/>quadrature<sp/>rule?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.elementQuadraturePoints,self.elementQuadratureWeights,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementQuadratureRuleIndeces)<sp/>=<sp/>Quadrature.buildUnion(elementQuadratureDict)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nQuadraturePoints_element<sp/>=<sp/>self.elementQuadraturePoints.shape[0]</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nQuadraturePoints_global<sp/>=<sp/>self.nQuadraturePoints_element*self.mesh.nElements_global</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#Repeat<sp/>the<sp/>same<sp/>thing<sp/>for<sp/>the<sp/>element<sp/>boundary<sp/>quadrature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.elementBoundaryQuadraturePoints,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementBoundaryQuadratureWeights,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementBoundaryQuadratureRuleIndeces)<sp/>=<sp/>Quadrature.buildUnion(elementBoundaryQuadratureDict)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nElementBoundaryQuadraturePoints_elementBoundary<sp/>=<sp/>self.elementBoundaryQuadraturePoints.shape[0]</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nElementBoundaryQuadraturePoints_global<sp/>=<sp/>(self.mesh.nElements_global*</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh.nElementBoundaries_element*</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nElementBoundaryQuadraturePoints_elementBoundary)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>isinstance(self.u[0].femSpace,C0_AffineLinearOnSimplexWithNodalBasis):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>print<sp/>self.nQuadraturePoints_element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>self.nSpace_global<sp/>==<sp/>3:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(self.nQuadraturePoints_element<sp/>==<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>elif<sp/>self.nSpace_global<sp/>==<sp/>2:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(self.nQuadraturePoints_element<sp/>==<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>elif<sp/>self.nSpace_global<sp/>==<sp/>1:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(self.nQuadraturePoints_element<sp/>==<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>print<sp/>self.nElementBoundaryQuadraturePoints_elementBoundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>self.nSpace_global<sp/>==<sp/>3:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(self.nElementBoundaryQuadraturePoints_elementBoundary<sp/>==<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>elif<sp/>self.nSpace_global<sp/>==<sp/>2:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(self.nElementBoundaryQuadraturePoints_elementBoundary<sp/>==<sp/>4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>elif<sp/>self.nSpace_global<sp/>==<sp/>1:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(self.nElementBoundaryQuadraturePoints_elementBoundary<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#simplified<sp/>allocations<sp/>for<sp/>test==trial<sp/>and<sp/>also<sp/>check<sp/>if<sp/>space<sp/>is<sp/>mixed<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q={}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq={}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq_global={}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe={}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.phi_ip={}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[&apos;x&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,3),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[&apos;det(J)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[&apos;abs(det(J))&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[&apos;J&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nSpace_global,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[&apos;inverse(J)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nSpace_global,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;x&apos;</highlight><highlight class="normal">]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,3),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[&apos;g&apos;]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nElementBoundaryQuadraturePoints_elementBoundary,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#max(1,self.nSpace_global-1),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#max(1,self.nSpace_global-1)),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[&apos;inverse(J)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nSpace_global,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[&apos;hat(x)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,3),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[&apos;bar(x)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,3),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[&apos;sqrt(det(g))&apos;]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;n&apos;)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ebq<sp/>for<sp/>post-processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq[&apos;x&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.mesh.nElementBoundaries_element,self.nElementBoundaryQuadraturePoints_elementBoundary,3),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq[&apos;g&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.mesh.nElementBoundaries_element,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>self.nElementBoundaryQuadraturePoints_elementBoundary,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>max(1,self.nSpace_global-1),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>max(1,self.nSpace_global-1)),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq[&apos;inverse(J)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.mesh.nElementBoundaries_element,self.nElementBoundaryQuadraturePoints_elementBoundary,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.nSpace_global,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq[&apos;hat(x)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.mesh.nElementBoundaries_element,self.nElementBoundaryQuadraturePoints_elementBoundary,3),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq[&apos;bar(x)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.mesh.nElementBoundaries_element,self.nElementBoundaryQuadraturePoints_elementBoundary,3),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq[&apos;sqrt(det(g))&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.mesh.nElementBoundaries_element,self.nElementBoundaryQuadraturePoints_elementBoundary),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq[(&apos;n&apos;)]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.mesh.nElementBoundaries_element,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#ebq_global<sp/>for<sp/>post-processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq_global[&apos;x&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,3),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq_global[&apos;g&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElementBoundaries_global,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nElementBoundaryQuadraturePoints_elementBoundary,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max(1,self.nSpace_global-1),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max(1,self.nSpace_global-1)),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq_global[&apos;inverse(J)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nSpace_global,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq_global[&apos;hat(x)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,3),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq_global[&apos;bar(x)&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,3),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq_global[&apos;sqrt(det(g))&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebq_global[(&apos;n&apos;)]<sp/>=<sp/>np.zeros((self.mesh.nElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#need<sp/>to<sp/>calculate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;v&apos;,0)]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[0]),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;grad(v)&apos;,0)]<sp/>=<sp/><sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[0],self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;w*dV_r&apos;,0)]<sp/>=<sp/><sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[1]),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;grad(w)*dV_f&apos;,0)]<sp/>=<sp/><sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[1],self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;v&apos;,0)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nDOF_trial_element[0]),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;grad(v)&apos;,0)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nDOF_trial_element[0],self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;w*dS_f&apos;,0)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nDOF_trial_element[0]),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#if<sp/>self.nDOF_trial_element[1]<sp/>!=<sp/>self.nDOF_trial_element[0]:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;v&apos;,1)]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[1]),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;grad(v)&apos;,1)]<sp/>=<sp/><sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[1],self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;w*dV_r&apos;,1)]<sp/>=<sp/><sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[1]),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;grad(w)*dV_f&apos;,1)]<sp/>=<sp/><sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[1],self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.ebqe[(&apos;v&apos;,1)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nDOF_trial_element[1]),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.ebqe[(&apos;grad(v)&apos;,1)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nDOF_trial_element[1],self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;w*dS_f&apos;,1)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,self.nDOF_trial_element[1]),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;v&apos;,1)]<sp/>=<sp/>self.q[(&apos;v&apos;,0)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;grad(v)&apos;,1)]<sp/>=<sp/>self.q[(&apos;grad(v)&apos;,0)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;w*dV_r&apos;,1)]<sp/>=<sp/><sp/>self.q[(&apos;w*dV_r&apos;,0)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;grad(w)*dV_f&apos;,1)]<sp/>=<sp/>self.q[(&apos;grad(w)*dV_f&apos;,0)]<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.ebqe[(&apos;v&apos;,1)]<sp/>=<sp/>self.ebqe[(&apos;v&apos;,0)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.ebqe[(&apos;grad(v)&apos;,1)]<sp/>=<sp/>self.ebqe[(&apos;grad(v)&apos;,0)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.ebqe[(&apos;w*dS_f&apos;,1)]<sp/>=<sp/>self.ebqe[(&apos;w*dS_f&apos;,0)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#if<sp/>self.Hess:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)]<sp/>=<sp/><sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[1],self.nSpace_global,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;Hess(w)*dV_a&apos;,1,1)]<sp/>=<sp/><sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nDOF_trial_element[1],self.nSpace_global,self.nSpace_global),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>#dummy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)]<sp/>=<sp/><sp/>np.zeros((1,),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;Hess(w)*dV_a&apos;,1,1)]<sp/>=<sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;Hess(v)&apos;,1)]<sp/>=<sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;Hess(v)&apos;,2)]<sp/>=<sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;Hess(v)&apos;,3)]<sp/>=<sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;Hess(w)&apos;,2)]<sp/>=<sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;Hess(w)&apos;,3)]<sp/>=<sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;Hess(w)*dV_a&apos;,2,2)]<sp/>=<sp/><sp/>self.q[(&apos;Hess(w)*dV_a&apos;,1,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;Hess(w)*dV_a&apos;,3,3)]<sp/>=<sp/><sp/>self.q[(&apos;Hess(w)*dV_a&apos;,1,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;v&apos;,2)]<sp/>=<sp/>self.q[(&apos;v&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;grad(v)&apos;,2)]<sp/>=<sp/>self.q[(&apos;grad(v)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;w*dV_r&apos;,2)]<sp/>=<sp/><sp/>self.q[(&apos;w*dV_r&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;grad(w)*dV_f&apos;,2)]<sp/>=<sp/>self.q[(&apos;grad(w)*dV_f&apos;,1)]<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;v&apos;,2)]<sp/>=<sp/>self.ebqe[(&apos;v&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;grad(v)&apos;,2)]<sp/>=<sp/>self.ebqe[(&apos;grad(v)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;w*dS_f&apos;,2)]<sp/>=<sp/>self.ebqe[(&apos;w*dS_f&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;v&apos;,3)]<sp/>=<sp/>self.q[(&apos;v&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;grad(v)&apos;,3)]<sp/>=<sp/>self.q[(&apos;grad(v)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;w*dV_r&apos;,3)]<sp/>=<sp/><sp/>self.q[(&apos;w*dV_r&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;grad(w)*dV_f&apos;,3)]<sp/>=<sp/>self.q[(&apos;grad(w)*dV_f&apos;,1)]<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;v&apos;,3)]<sp/>=<sp/>self.ebqe[(&apos;v&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;grad(v)&apos;,3)]<sp/>=<sp/>self.ebqe[(&apos;grad(v)&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.ebqe[(&apos;w*dS_f&apos;,3)]<sp/>=<sp/>self.ebqe[(&apos;w*dS_f&apos;,1)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#for<sp/>ci<sp/>in<sp/>range(self.nc):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;w*dV_m&apos;,ci)]<sp/>=<sp/>self.q[(&apos;w*dV_r&apos;,ci)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;w&apos;,ci)]<sp/>=<sp/>self.q[(&apos;v&apos;,ci)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.q[(&apos;grad(w)&apos;,ci)]<sp/>=<sp/>self.q[(&apos;grad(v)&apos;,ci)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.ebqe[(&apos;w&apos;,ci)]<sp/>=<sp/>self.ebqe[(&apos;v&apos;,ci)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>self.ebqe[(&apos;grad(w)&apos;,ci)]<sp/>=<sp/>self.ebqe[(&apos;grad(v)&apos;,ci)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.q[(&apos;u&apos;,0)]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[</highlight><highlight class="stringliteral">&apos;bodyForce&apos;</highlight><highlight class="normal">]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,self.nSpace_global),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element,6),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,0)]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,0)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;penalty&apos;</highlight><highlight class="normal">]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary,6),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,1)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,2)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,0)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,1)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,2)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc&apos;</highlight><highlight class="normal">,0)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc&apos;</highlight><highlight class="normal">,1)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc&apos;</highlight><highlight class="normal">,2)]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.points_elementBoundaryQuadrature=<sp/><ref refid="d0/d93/namespaceproteus_1_1Context_1a5966a755fc5ade13023e4c265d76d131" kindref="member">set</ref>()</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.scalars_elementBoundaryQuadrature=<sp/><ref refid="d0/d93/namespaceproteus_1_1Context_1a5966a755fc5ade13023e4c265d76d131" kindref="member">set</ref>([(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,ci)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc)])</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.vectors_elementBoundaryQuadrature=<sp/><ref refid="d0/d93/namespaceproteus_1_1Context_1a5966a755fc5ade13023e4c265d76d131" kindref="member">set</ref>()</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.tensors_elementBoundaryQuadrature=<sp/><ref refid="d0/d93/namespaceproteus_1_1Context_1a5966a755fc5ade13023e4c265d76d131" kindref="member">set</ref>()</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#show<sp/>quadrature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Dumping<sp/>quadrature<sp/>shapes<sp/>for<sp/>model<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>self.name,level=9)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Element<sp/>quadrature<sp/>array<sp/>(q)&quot;</highlight><highlight class="normal">,<sp/>level=9)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k,v)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.q.items()):<sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(str((k,v.shape)),level=9)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Element<sp/>boundary<sp/>quadrature<sp/>(ebq)&quot;</highlight><highlight class="normal">,level=9)<sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k,v)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.ebq.items()):<sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(str((k,v.shape)),level=9)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Global<sp/>element<sp/>boundary<sp/>quadrature<sp/>(ebq_global)&quot;</highlight><highlight class="normal">,level=9)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k,v)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.ebq_global.items()):<sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(str((k,v.shape)),level=9)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Exterior<sp/>element<sp/>boundary<sp/>quadrature<sp/>(ebqe)&quot;</highlight><highlight class="normal">,level=9)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k,v)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.ebqe.items()):<sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(str((k,v.shape)),level=9)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Interpolation<sp/>points<sp/>for<sp/>nonlinear<sp/>diffusion<sp/>potential<sp/>(phi_ip)&quot;</highlight><highlight class="normal">,level=9)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k,v)<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.phi_ip.items()):<sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(str((k,v.shape)),level=9)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>allocate<sp/>residual<sp/>and<sp/>Jacobian<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementResidual<sp/>=<sp/>[np.zeros(</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.mesh.nElements_global,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nDOF_test_element[ci]),</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc)]</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementSpatialResidual<sp/>=<sp/>[np.zeros(</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.mesh.nElements_global,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nDOF_test_element[ci]),</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc)]</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.inflowBoundaryBC<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.inflowBoundaryBC_values<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.inflowFlux<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>cj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc):</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.inflowBoundaryBC[cj]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.inflowBoundaryBC_values[cj]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nDOF_trial_element[cj]),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.inflowFlux[cj]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.internalNodes<sp/>=<sp/><ref refid="d0/d93/namespaceproteus_1_1Context_1a5966a755fc5ade13023e4c265d76d131" kindref="member">set</ref>(range(self.mesh.nNodes_global))</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#identify<sp/>the<sp/>internal<sp/>nodes<sp/>this<sp/>is<sp/>ought<sp/>to<sp/>be<sp/>in<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ebNE<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.mesh.nExteriorElementBoundaries_global):</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebN<sp/>=<sp/>self.mesh.exteriorElementBoundariesArray[ebNE]</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eN_global<sp/><sp/><sp/>=<sp/>self.mesh.elementBoundaryElementsArray[ebN,0]</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebN_element<sp/><sp/>=<sp/>self.mesh.elementBoundaryLocalElementBoundariesArray[ebN,0]</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.mesh.nNodes_element):</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i<sp/>!=<sp/>ebN_element:</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>=<sp/>self.mesh.elementNodesArray[eN_global,i]</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.internalNodes<sp/>-=<sp/><ref refid="d0/d93/namespaceproteus_1_1Context_1a5966a755fc5ade13023e4c265d76d131" kindref="member">set</ref>([I])</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nNodes_internal<sp/>=<sp/>len(self.internalNodes)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.internalNodesArray=np.zeros((self.nNodes_internal,),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>nI,n<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(self.internalNodes):</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.internalNodesArray[nI]=n</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>self.internalNodes</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.internalNodes<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Updating<sp/>local<sp/>to<sp/>global<sp/>mappings&quot;</highlight><highlight class="normal">,2)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.updateLocal2Global()</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Building<sp/>time<sp/>integration<sp/>object&quot;</highlight><highlight class="normal">,2)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(<ref refid="d6/df4/namespaceproteus_1_1Archiver_1a3ee04819526c756f63d480d2d483f574" kindref="member">memory</ref>(</highlight><highlight class="stringliteral">&quot;inflowBC,<sp/>internalNodes,updateLocal2Global&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;OneLevelTransport&quot;</highlight><highlight class="normal">),level=4)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mwf<sp/>for<sp/>interpolating<sp/>subgrid<sp/>error<sp/>for<sp/>gradients<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.stabilization<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>self.stabilization.usesGradientStabilization:</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.timeIntegration<sp/>=<sp/><ref refid="df/dc9/namespacetestTimeIntegration_1a88feba9cc95ed528bc05417ccaff6689" kindref="member">TimeIntegrationClass</ref>(self,integrateInterpolationPoints=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.timeIntegration<sp/>=<sp/><ref refid="df/dc9/namespacetestTimeIntegration_1a88feba9cc95ed528bc05417ccaff6689" kindref="member">TimeIntegrationClass</ref>(self)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>options<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.timeIntegration.setFromOptions(options)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(<ref refid="d6/df4/namespaceproteus_1_1Archiver_1a3ee04819526c756f63d480d2d483f574" kindref="member">memory</ref>(</highlight><highlight class="stringliteral">&quot;TimeIntegration&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;OneLevelTransport&quot;</highlight><highlight class="normal">),level=4)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Calculating<sp/>numerical<sp/>quadrature<sp/>formulas&quot;</highlight><highlight class="normal">,2)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.calculateQuadrature()</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#lay<sp/>out<sp/>components/equations<sp/>contiguously<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.offset<sp/>=<sp/>[0]</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,self.nc):</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.offset<sp/>+=<sp/>[self.offset[ci-1]+self.nFreeDOF_global[ci-1]]</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stride<sp/>=<sp/>[1<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc)]</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#use<sp/>contiguous<sp/>layout<sp/>of<sp/>components<sp/>for<sp/>parallel,<sp/>requires<sp/>weak<sp/>DBC&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>=<sp/>Comm.get()</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.comm=comm</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>comm.size()<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>numericalFluxType<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>numericalFluxType.useWeakDirichletConditions,</highlight><highlight class="stringliteral">&quot;You<sp/>must<sp/>use<sp/>a<sp/>numerical<sp/>flux<sp/>to<sp/>apply<sp/>weak<sp/>boundary<sp/>conditions<sp/>for<sp/>parallel<sp/>runs&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.offset<sp/>=<sp/>[0]</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,self.nc):</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.offset<sp/>+=<sp/>[ci]</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stride<sp/>=<sp/>[self.nc<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc)]</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(<ref refid="d6/df4/namespaceproteus_1_1Archiver_1a3ee04819526c756f63d480d2d483f574" kindref="member">memory</ref>(</highlight><highlight class="stringliteral">&quot;stride+offset&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;OneLevelTransport&quot;</highlight><highlight class="normal">),level=4)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>numericalFluxType<sp/>!=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>options<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>options.periodicDirichletConditions<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.numericalFlux<sp/>=<sp/><ref refid="dd/d67/namespaceproteus_1_1default__n_1a3c2f4b48591204d3e6539ba1a38657d1" kindref="member">numericalFluxType</ref>(self,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dofBoundaryConditionsSetterDict,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advectiveFluxBoundaryConditionsSetterDict,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffusiveFluxBoundaryConditionsSetterDictDict)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.numericalFlux<sp/>=<sp/><ref refid="dd/d67/namespaceproteus_1_1default__n_1a3c2f4b48591204d3e6539ba1a38657d1" kindref="member">numericalFluxType</ref>(self,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dofBoundaryConditionsSetterDict,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advectiveFluxBoundaryConditionsSetterDict,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diffusiveFluxBoundaryConditionsSetterDictDict,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options.periodicDirichletConditions)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.numericalFlux<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#set<sp/>penalty<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#cek<sp/>todo<sp/>move<sp/>into<sp/>numerical<sp/>flux<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;penalty&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.ebq_global:</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ebN<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.mesh.nElementBoundaries_global):</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nElementBoundaryQuadraturePoints_elementBoundary):</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq_global[</highlight><highlight class="stringliteral">&apos;penalty&apos;</highlight><highlight class="normal">][ebN,k]<sp/>=<sp/>old_div(self.numericalFlux.penalty_constant,(self.mesh.elementBoundaryDiametersArray[ebN]**self.numericalFlux.penalty_power))</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#penalty<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#cek<sp/>move<sp/><sp/>to<sp/>Numerical<sp/>flux<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;penalty&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.ebqe:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ebNE<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.mesh.nExteriorElementBoundaries_global):</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ebN<sp/>=<sp/>self.mesh.exteriorElementBoundariesArray[ebNE]</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nElementBoundaryQuadraturePoints_elementBoundary):</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;penalty&apos;</highlight><highlight class="normal">][ebNE,k]<sp/>=<sp/>old_div(self.numericalFlux.penalty_constant,self.mesh.elementBoundaryDiametersArray[ebN]**self.numericalFlux.penalty_power)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(<ref refid="d6/df4/namespaceproteus_1_1Archiver_1a3ee04819526c756f63d480d2d483f574" kindref="member">memory</ref>(</highlight><highlight class="stringliteral">&quot;numericalFlux&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;OneLevelTransport&quot;</highlight><highlight class="normal">),level=4)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementEffectiveDiametersArray<sp/><sp/>=<sp/>self.mesh.elementInnerDiametersArray</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#use<sp/>post<sp/>processing<sp/>tools<sp/>to<sp/>get<sp/>conservative<sp/>fluxes,<sp/>None<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#helper<sp/>for<sp/>writing<sp/>out<sp/>data<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementQuadratureDictionaryWriter<sp/>=<sp/>Archiver.XdmfWriter()</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementBoundaryQuadratureDictionaryWriter<sp/>=<sp/>Archiver.XdmfWriter()</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.exteriorElementBoundaryQuadratureDictionaryWriter<sp/>=<sp/>Archiver.XdmfWriter()</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci,sbcObject<sp/><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.stressFluxBoundaryConditionsObjectsDict.items()):</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,ci)]<sp/>=<sp/>np.zeros(self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc&apos;</highlight><highlight class="normal">,ci)].shape,</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t,g<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(sbcObject.stressFluxBoundaryConditionsDict.items()):</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc&apos;</highlight><highlight class="normal">,ci)][t[0],t[1]]<sp/>=<sp/><ref refid="d7/db9/namespaceproteus_1_1Optimizers_1ac61a46e0c63f4fca39b193e3457840f9" kindref="member">g</ref>(self.ebqe[(</highlight><highlight class="stringliteral">&apos;x&apos;</highlight><highlight class="normal">)][t[0],t[1]],self.timeIntegration.t)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,ci)][t[0],t[1]]<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.numericalFlux.setDirichletValues(self.ebqe)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.forceStrongConditions=</highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dirichletConditionsForceDOF<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.forceStrongConditions:</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>cj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc):</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dirichletConditionsForceDOF[cj]<sp/>=<sp/>DOFBoundaryConditions(self.u[cj].femSpace,dofBoundaryConditionsSetterDict[cj],weakDirichletConditions=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compKernelFlag=0</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elastoPlastic<sp/>=<sp/>cElastoPlastic_base(self.nSpace_global,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nQuadraturePoints_element,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.localFunctionSpace.dim,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.referenceFiniteElement.localFunctionSpace.dim,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.testSpace[0].referenceFiniteElement.localFunctionSpace.dim,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nElementBoundaryQuadraturePoints_elementBoundary,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compKernelFlag)</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel_1a03a2fecb7ad3ef1d26ae2ae97b03944c" kindref="member">getResidual</ref>(self,u,r):</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="650"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Calculate<sp/>the<sp/>element<sp/>residuals<sp/>and<sp/>add<sp/>in<sp/>to<sp/>the<sp/>global<sp/>residual</highlight></codeline>
<codeline lineno="651"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#Load<sp/>the<sp/>unknowns<sp/>into<sp/>the<sp/>finite<sp/>element<sp/>dof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.timeIntegration.calculateCoefs()</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.timeIntegration.calculateU(u)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setUnknowns(self.timeIntegration.u)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#hack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.bcsTimeDependent<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.bcsSet:</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bcsSet=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#Dirichlet<sp/>boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.numericalFlux.setDirichletValues(self.ebqe)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#Flux<sp/>boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ci,fbcObject<sp/><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.stressFluxBoundaryConditionsObjectsDict.items()):</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t,g<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(fbcObject.stressFluxBoundaryConditionsDict.items()):</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc&apos;</highlight><highlight class="normal">,ci)][t[0],t[1]]<sp/>=<sp/><ref refid="d7/db9/namespaceproteus_1_1Optimizers_1ac61a46e0c63f4fca39b193e3457840f9" kindref="member">g</ref>(self.ebqe[(</highlight><highlight class="stringliteral">&apos;x&apos;</highlight><highlight class="normal">)][t[0],t[1]],self.timeIntegration.t)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,ci)][t[0],t[1]]<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.fill(0.0)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementResidual[0].fill(0.0)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementResidual[1].fill(0.0)<sp/></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementResidual[2].fill(0.0)<sp/></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#import<sp/>pdb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>self.mesh.elementMaterialTypes,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>self.coefficients.nMaterialProperties,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#print<sp/>self.coefficients.materialProperties,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.forceStrongConditions:</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>cj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(self.dirichletConditionsForceDOF)):</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>dofN,g<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.dirichletConditionsForceDOF[cj].DOFBoundaryConditionsDict.items()):</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[cj].dof[dofN]<sp/>=<sp/><ref refid="d7/db9/namespaceproteus_1_1Optimizers_1ac61a46e0c63f4fca39b193e3457840f9" kindref="member">g</ref>(self.dirichletConditionsForceDOF[cj].DOFBoundaryPointDict[dofN],self.timeIntegration.t)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict<sp/>=<sp/>cArgumentsDict.ArgumentsDict()</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_trial_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.psi</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_grad_trial_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.grad_psi</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.nodeArray</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_l2g&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.elementNodesArray</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;dV_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.elementQuadratureWeights[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,0)]</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_trial_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.psi</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_grad_trial_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.grad_psi</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_test_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.psi</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_grad_test_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.grad_psi</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_trial_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.psi_trace</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_grad_trial_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.grad_psi_trace</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;dS_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.elementBoundaryQuadratureWeights[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,0)]</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_trial_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.psi_trace</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_grad_trial_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.grad_psi_trace</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_test_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.psi_trace</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_grad_test_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.grad_psi_trace</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;normal_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.boundaryNormals</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;boundaryJac_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.boundaryJacobians</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_penalty&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;penalty&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;gravityStep&quot;</highlight><highlight class="normal">]<sp/>=<sp/>int(self.coefficients.gravityStep)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;nElements_global&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.nElements_global</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;materialTypes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.elementMaterialTypes</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;nMaterialProperties&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.nMaterialProperties</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;materialProperties&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.materialProperties</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;pore_fluid_unit_weight&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.pore_fluid_unit_weight</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;pore_pressure_head_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.pore_pressure_head</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_strain&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_strain0&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;strain0&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_strain_last&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_plasticStrain&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;plasticStrain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_plasticStrain_last&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_strain&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_strain0&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;strain0&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_strain_last&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_plasticStrain&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;plasticStrain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_plasticStrain_last&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_l2g&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.dofMap.l2g</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;u_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].dof</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;v_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[1].dof</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;w_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[2].dof</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;bodyForce&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.bodyForce</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;offset_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.offset[0]</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;offset_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.offset[1]</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;offset_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.offset[2]</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;stride_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.stride[0]</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;stride_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.stride[1]</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;stride_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.stride[2]</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;globalResidual&quot;</highlight><highlight class="normal">]<sp/>=<sp/>r</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;nExteriorElementBoundaries_global&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.nExteriorElementBoundaries_global</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;exteriorElementBoundariesArray&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.exteriorElementBoundariesArray</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;elementBoundaryElementsArray&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.elementBoundaryElementsArray</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;elementBoundaryLocalElementBoundariesArray&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.elementBoundaryLocalElementBoundariesArray</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isDOFBoundary_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.numericalFlux.isDOFBoundary[0]</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isDOFBoundary_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.numericalFlux.isDOFBoundary[1]</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isDOFBoundary_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.numericalFlux.isDOFBoundary[2]</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isStressFluxBoundary_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,0)]</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isStressFluxBoundary_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,1)]</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isStressFluxBoundary_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,2)]</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_bc_u_ext&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.numericalFlux.ebqe[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,0)]</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_bc_v_ext&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.numericalFlux.ebqe[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,1)]</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_bc_w_ext&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.numericalFlux.ebqe[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,2)]</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_bc_stressFlux_u_ext&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc&apos;</highlight><highlight class="normal">,0)]</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_bc_stressFlux_v_ext&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc&apos;</highlight><highlight class="normal">,1)]</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_bc_stressFlux_w_ext&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc&apos;</highlight><highlight class="normal">,2)]</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elastoPlastic.calculateResidual(argsDict)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Global<sp/>residual&quot;</highlight><highlight class="normal">,level=9,data=r)</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.forceStrongConditions:</highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>cj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(self.dirichletConditionsForceDOF)):</highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>dofN,g<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.dirichletConditionsForceDOF[cj].DOFBoundaryConditionsDict.items()):</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[self.offset[cj]+self.stride[cj]*dofN]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nonlinear_function_evaluations<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel_1a8d7828319ae28cb4c74a6dd5c1cf76a3" kindref="member">getJacobian</ref>(self,jacobian,usePicard=False):</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfemIntegrals.zeroJacobian_CSR(self.nNonzerosInJacobian,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian)</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict<sp/>=<sp/>cArgumentsDict.ArgumentsDict()</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;usePicard&quot;</highlight><highlight class="normal">]<sp/>=<sp/>usePicard</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_trial_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.psi</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_grad_trial_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.grad_psi</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.nodeArray</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_l2g&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.elementNodesArray</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;dV_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.elementQuadratureWeights[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,0)]</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_trial_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.psi</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_grad_trial_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.grad_psi</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_test_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.psi</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_grad_test_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.grad_psi</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_trial_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.psi_trace</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;mesh_grad_trial_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.grad_psi_trace</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;dS_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.elementBoundaryQuadratureWeights[(</highlight><highlight class="stringliteral">&apos;u&apos;</highlight><highlight class="normal">,0)]</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_trial_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.psi_trace</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_grad_trial_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.grad_psi_trace</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_test_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.psi_trace</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_grad_test_trace_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.grad_psi_trace</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;normal_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.boundaryNormals</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;boundaryJac_ref&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.elementMaps.boundaryJacobians</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_penalty&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;penalty&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;gravityStep&quot;</highlight><highlight class="normal">]<sp/>=<sp/>int(self.coefficients.gravityStep)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;nElements_global&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.nElements_global</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;materialTypes&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.elementMaterialTypes</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;nMaterialProperties&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.nMaterialProperties</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;materialProperties&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.materialProperties</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;pore_fluid_unit_weight&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.pore_fluid_unit_weight</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;pore_pressure_head_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.pore_pressure_head</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_strain&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_strain0&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;strain0&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_strain_last&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_plasticStrain&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;plasticStrain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;q_plasticStrain_last&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.q[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_strain&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;strain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_strain0&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;strain0&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_strain_last&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;strain_last&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_plasticStrain&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;plasticStrain&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;ebqe_plasticStrain_last&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;plasticStrain_last&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;disp_l2g&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].femSpace.dofMap.l2g</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;u_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[0].dof</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;v_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[1].dof</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;w_dof&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.u[2].dof</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;bodyForce&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.coefficients.bodyForce</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrRowIndeces_u_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrRowIndeces[(0,0)]</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_u_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets[(0,0)]</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrRowIndeces_u_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrRowIndeces[(0,1)]</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_u_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets[(0,1)]</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrRowIndeces_u_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrRowIndeces[(0,2)]</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_u_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets[(0,2)]</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrRowIndeces_v_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrRowIndeces[(1,0)]</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_v_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets[(1,0)]</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrRowIndeces_v_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrRowIndeces[(1,1)]</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_v_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets[(1,1)]</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrRowIndeces_v_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrRowIndeces[(1,2)]</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_v_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets[(1,2)]</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrRowIndeces_w_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrRowIndeces[(2,0)]</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_w_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets[(2,0)]</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrRowIndeces_w_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrRowIndeces[(2,1)]</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_w_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets[(2,1)]</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrRowIndeces_w_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrRowIndeces[(2,2)]</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_w_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets[(2,2)]</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;globalJacobian&quot;</highlight><highlight class="normal">]<sp/>=<sp/>jacobian.getCSRrepresentation()[2]</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;nExteriorElementBoundaries_global&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.nExteriorElementBoundaries_global</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;exteriorElementBoundariesArray&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.exteriorElementBoundariesArray</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;elementBoundaryElementsArray&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.elementBoundaryElementsArray</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;elementBoundaryLocalElementBoundariesArray&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.mesh.elementBoundaryLocalElementBoundariesArray</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isDOFBoundary_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.numericalFlux.isDOFBoundary[0]</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isDOFBoundary_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.numericalFlux.isDOFBoundary[1]</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isDOFBoundary_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.numericalFlux.isDOFBoundary[2]</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isStressFluxBoundary_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,0)]</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isStressFluxBoundary_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,1)]</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;isStressFluxBoundary_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;stressFlux_bc_flag&apos;</highlight><highlight class="normal">,2)]</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_eb_u_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets_eb[(0,0)]</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_eb_u_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets_eb[(0,1)]</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_eb_u_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets_eb[(0,2)]</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_eb_v_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets_eb[(1,0)]</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_eb_v_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets_eb[(1,1)]</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_eb_v_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets_eb[(1,2)]</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_eb_w_u&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets_eb[(2,0)]</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_eb_w_v&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets_eb[(2,1)]</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argsDict[</highlight><highlight class="stringliteral">&quot;csrColumnOffsets_eb_w_w&quot;</highlight><highlight class="normal">]<sp/>=<sp/>self.csrColumnOffsets_eb[(2,2)]</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elastoPlastic.calculateJacobian(argsDict)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d0f/namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Jacobian<sp/>&quot;</highlight><highlight class="normal">,level=10,data=jacobian)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.forceStrongConditions:</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling<sp/>=<sp/>1.0</highlight><highlight class="comment">#probably<sp/>want<sp/>to<sp/>add<sp/>some<sp/>scaling<sp/>to<sp/>match<sp/>non-dirichlet<sp/>diagonals<sp/>in<sp/>linear<sp/>system<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>cj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.nc):</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>dofN<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.dirichletConditionsForceDOF[cj].DOFBoundaryConditionsDict.keys()):</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_dofN<sp/>=<sp/>self.offset[cj]+self.stride[cj]*dofN</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.rowptr[global_dofN],self.rowptr[global_dofN+1]):</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self.colind[i]<sp/>==<sp/>global_dofN):</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nzval[i]<sp/>=<sp/>scaling</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nzval[i]<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#mwf<sp/>decide<sp/>if<sp/>this<sp/>is<sp/>reasonable<sp/>for<sp/>solver<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nonlinear_function_jacobian_evaluations<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#jacobian.fwrite(&quot;jacobian_p&quot;+`self.nonlinear_function_jacobian_evaluations`)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jacobian</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel_1a17b3bfc50275968637c93574f82e3dcf" kindref="member">calculateElementQuadrature</ref>(self):</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="852"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Calculate<sp/>the<sp/>physical<sp/>location<sp/>and<sp/>weights<sp/>of<sp/>the<sp/>quadrature<sp/>rules</highlight></codeline>
<codeline lineno="853"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>the<sp/>shape<sp/>information<sp/>at<sp/>the<sp/>quadrature<sp/>points.</highlight></codeline>
<codeline lineno="854"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="855"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>should<sp/>be<sp/>called<sp/>only<sp/>when<sp/>the<sp/>mesh<sp/>changes.</highlight></codeline>
<codeline lineno="856"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.getBasisValuesRef(self.elementQuadraturePoints)</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.getBasisGradientValuesRef(self.elementQuadraturePoints)</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.getBasisValuesRef(self.elementQuadraturePoints)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.getBasisGradientValuesRef(self.elementQuadraturePoints)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#get<sp/>physical<sp/>locations<sp/>of<sp/>quadrature<sp/>points<sp/>and<sp/>jacobian<sp/>information<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#assume<sp/>all<sp/>components<sp/>live<sp/>on<sp/>the<sp/>same<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.u[0].femSpace.elementMaps.getValues(self.elementQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;x&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>self.movingDomain:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>self.tLast_mesh<sp/>!=<sp/>None:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;xt&apos;][:]=self.q[&apos;x&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;xt&apos;]-=self.q[&apos;x_last&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>1.0/(self.t_mesh<sp/>-<sp/>self.tLast_mesh)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;xt&apos;]*=alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;xt&apos;][:]=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>self.q[&apos;x_last&apos;][:]=self.q[&apos;x&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.u[0].femSpace.elementMaps.getJacobianValues(self.elementQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;J&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;inverse(J)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;det(J)&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.q[&apos;abs(det(J))&apos;]=np.absolute(self.q[&apos;det(J)&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#<sp/>get<sp/>physical<sp/>space<sp/>integration<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.q[&apos;dV&apos;]<sp/>=<sp/>np.zeros((self.mesh.nElements_global,self.nQuadraturePoints_element),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cfemIntegrals.calculateIntegrationWeights(self.q[&apos;abs(det(J))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementQuadratureWeights[(&apos;u&apos;,0)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;dV&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>ci<sp/>in<sp/>range(self.nc):<sp/>self.q[(&apos;dV_u&apos;,ci)]<sp/>=<sp/>self.q[&apos;dV&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#get<sp/>shape<sp/>information<sp/>at<sp/>the<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.testSpace[0].getBasisValues(self.elementQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(&apos;w&apos;,0)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cfemIntegrals.calculateWeightedShape(self.elementQuadratureWeights[(&apos;r&apos;,1)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;abs(det(J))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(&apos;w&apos;,1)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(&apos;w*dV_r&apos;,1)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.testSpace[1].getBasisGradientValues(self.elementQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;inverse(J)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(&apos;grad(w)&apos;,1)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cfemIntegrals.calculateWeightedShapeGradients(self.elementQuadratureWeights[(&apos;f&apos;,0)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;abs(det(J))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(&apos;grad(w)&apos;,0)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(&apos;grad(w)*dV_f&apos;,0)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>self.Hess:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>self.testSpace[1].getBasisHessianValues(self.elementQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;inverse(J)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>cfemIntegrals.calculateWeightedShapeGradients(self.elementQuadratureWeights[(&apos;a&apos;,1,1)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[&apos;abs(det(J))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(&apos;Hess(w)&apos;,1)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.q[(&apos;Hess(w)*dV_a&apos;,1,1)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.coefficients.initializeElementQuadrature(self.timeIntegration.t,self.q)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel_1a636a75eac2e9f270d5328c6cb1df0c95" kindref="member">calculateElementBoundaryQuadrature</ref>(self):</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="916"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Calculate<sp/>the<sp/>physical<sp/>location<sp/>and<sp/>weights<sp/>of<sp/>the<sp/>quadrature<sp/>rules</highlight></codeline>
<codeline lineno="917"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>the<sp/>shape<sp/>information<sp/>at<sp/>the<sp/>quadrature<sp/>points<sp/>on<sp/>element<sp/>boundaries.</highlight></codeline>
<codeline lineno="918"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="919"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>should<sp/>be<sp/>called<sp/>only<sp/>when<sp/>the<sp/>mesh<sp/>changes.</highlight></codeline>
<codeline lineno="920"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#cek<sp/>todo,<sp/>a<sp/>local<sp/>calculation<sp/>of<sp/>the<sp/>element<sp/>boundary<sp/>quadrature<sp/>permuations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#get<sp/>physical<sp/>locations<sp/>of<sp/>element<sp/>boundary<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#assume<sp/>all<sp/>components<sp/>live<sp/>on<sp/>the<sp/>same<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.u[0].femSpace.elementMaps.getValuesTrace(self.elementBoundaryQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;x&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#get<sp/>metric<sp/>tensor<sp/>and<sp/>unit<sp/>normals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>self.movingDomain:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>self.tLast_mesh<sp/>!=<sp/>None:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;xt&apos;][:]=self.ebq[&apos;x&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;xt&apos;]-=self.ebq[&apos;x_last&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>1.0/(self.t_mesh<sp/>-<sp/>self.tLast_mesh)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;xt&apos;]*=alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;xt&apos;][:]=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;x_last&apos;][:]=self.ebq[&apos;x&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.getJacobianValuesTrace_movingDomain(self.elementBoundaryQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;xt&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;inverse(J)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;g&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;sqrt(det(g))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;n&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.getJacobianValuesTrace(self.elementBoundaryQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;inverse(J)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;g&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;sqrt(det(g))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;n&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cfemIntegrals.copyLeftElementBoundaryInfo(self.mesh.elementBoundaryElementsArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh.elementBoundaryLocalElementBoundariesArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh.exteriorElementBoundariesArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh.interiorElementBoundariesArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;x&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;n&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq_global[&apos;x&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq_global[&apos;n&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>self.movingDomain:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>cfemIntegrals.copyLeftElementBoundaryInfo_movingDomain(self.mesh.elementBoundaryElementsArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh.elementBoundaryLocalElementBoundariesArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh.exteriorElementBoundariesArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh.interiorElementBoundariesArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;xt&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#now<sp/>map<sp/>the<sp/>physical<sp/>points<sp/>back<sp/>to<sp/>the<sp/>reference<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#assume<sp/>all<sp/>components<sp/>live<sp/><sp/>on<sp/>same<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.u[0].femSpace.elementMaps.getInverseValuesTrace(self.ebq[&apos;inverse(J)&apos;],self.ebq[&apos;x&apos;],self.ebq[&apos;hat(x)&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.u[0].femSpace.elementMaps.getPermutations(self.ebq[&apos;hat(x)&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#since<sp/>the<sp/>points<sp/>on<sp/>the<sp/>reference<sp/>boundary<sp/>may<sp/>be<sp/>reordered<sp/>on<sp/>many<sp/>right<sp/>element<sp/>boundaries,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#have<sp/>to<sp/>use<sp/>an<sp/>array<sp/>of<sp/>reference<sp/>boundary<sp/>points<sp/>on<sp/>all<sp/>element<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#first<sp/>copy<sp/>the<sp/>left<sp/>reference<sp/>element<sp/>boundary<sp/>quadrature<sp/>points<sp/>from<sp/>the<sp/>reference<sp/>element<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#get<sp/>the<sp/>shape<sp/>information<sp/>at<sp/>the<sp/>reference<sp/>element<sp/>boundary<sp/>quadrature<sp/>points<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.testSpace[0].getBasisValuesTrace(self.u[0].femSpace.elementMaps.permutations,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;hat(x)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[(&apos;w&apos;,0)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cfemIntegrals.calculateWeightedShapeTrace(self.elementBoundaryQuadratureWeights[(&apos;u&apos;,0)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;sqrt(det(g))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[(&apos;w&apos;,0)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[(&apos;w*dS_u&apos;,0)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.u[0].femSpace.getBasisGradientValuesTrace(self.u[0].femSpace.elementMaps.permutations,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;hat(x)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[&apos;inverse(J)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[(&apos;grad(v)&apos;,0)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cfemIntegrals.calculateElementBoundaryIntegrationWeights(self.ebq[&apos;sqrt(det(g))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementBoundaryQuadratureWeights[(&apos;u&apos;,0)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebq[(&apos;dS_u&apos;,0)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel_1a000802ae33f21cf7351e800f7eb4fc81" kindref="member">calculateExteriorElementBoundaryQuadrature</ref>(self):</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="994"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Calculate<sp/>the<sp/>physical<sp/>location<sp/>and<sp/>weights<sp/>of<sp/>the<sp/>quadrature<sp/>rules</highlight></codeline>
<codeline lineno="995"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>the<sp/>shape<sp/>information<sp/>at<sp/>the<sp/>quadrature<sp/>points<sp/>on<sp/>global<sp/>element<sp/>boundaries.</highlight></codeline>
<codeline lineno="996"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="997"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>should<sp/>be<sp/>called<sp/>only<sp/>when<sp/>the<sp/>mesh<sp/>changes.</highlight></codeline>
<codeline lineno="998"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#get<sp/>physical<sp/>locations<sp/>of<sp/>element<sp/>boundary<sp/>quadrature<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#assume<sp/>all<sp/>components<sp/>live<sp/>on<sp/>the<sp/>same<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.getBasisValuesTraceRef(self.elementBoundaryQuadraturePoints)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.getBasisGradientValuesTraceRef(self.elementBoundaryQuadraturePoints)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.getBasisValuesTraceRef(self.elementBoundaryQuadraturePoints)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.getBasisGradientValuesTraceRef(self.elementBoundaryQuadraturePoints)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.getValuesGlobalExteriorTrace(self.elementBoundaryQuadraturePoints,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[</highlight><highlight class="stringliteral">&apos;x&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#get<sp/>metric<sp/>tensor<sp/>and<sp/>unit<sp/>normals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>self.movingDomain:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>if<sp/>self.tLast_mesh<sp/>!=<sp/>None:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;xt&apos;][:]=self.ebqe[&apos;x&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;xt&apos;]-=self.ebqe[&apos;x_last&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>1.0/(self.t_mesh<sp/>-<sp/>self.tLast_mesh)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;xt&apos;]*=alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;xt&apos;][:]=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;x_last&apos;][:]=self.ebqe[&apos;x&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.getJacobianValuesGlobalExteriorTrace_movingDomain(self.elementBoundaryQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;xt&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;inverse(J)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;g&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;sqrt(det(g))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;n&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>self.u[0].femSpace.elementMaps.getJacobianValuesGlobalExteriorTrace(self.elementBoundaryQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;inverse(J)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;g&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;sqrt(det(g))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;n&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#now<sp/>map<sp/>the<sp/>physical<sp/>points<sp/>back<sp/>to<sp/>the<sp/>reference<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#assume<sp/>all<sp/>components<sp/>live<sp/><sp/>on<sp/>same<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.u[0].femSpace.elementMaps.getInverseValuesGlobalExteriorTrace(self.ebqe[&apos;inverse(J)&apos;],self.ebqe[&apos;x&apos;],self.ebqe[&apos;hat(x)&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#since<sp/>the<sp/>points<sp/>on<sp/>the<sp/>reference<sp/>boundary<sp/>may<sp/>be<sp/>reordered<sp/>on<sp/>many<sp/>right<sp/>element<sp/>boundaries,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#have<sp/>to<sp/>use<sp/>an<sp/>array<sp/>of<sp/>reference<sp/>boundary<sp/>points<sp/>on<sp/>all<sp/>element<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#first<sp/>copy<sp/>the<sp/>left<sp/>reference<sp/>element<sp/>boundary<sp/>quadrature<sp/>points<sp/>from<sp/>the<sp/>reference<sp/>element<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.testSpace[0].getBasisValuesGlobalExteriorTrace(self.elementBoundaryQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(&apos;w&apos;,0)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cfemIntegrals.calculateWeightedShapeGlobalExteriorTrace(self.mesh.exteriorElementBoundariesArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh.elementBoundaryElementsArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mesh.elementBoundaryLocalElementBoundariesArray,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementBoundaryQuadratureWeights[(&apos;f&apos;,0)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;sqrt(det(g))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(&apos;w&apos;,0)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(&apos;w*dS_f&apos;,0)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.u[0].femSpace.getBasisGradientValuesGlobalExteriorTrace(self.elementBoundaryQuadraturePoints,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;inverse(J)&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(&apos;grad(v)&apos;,0)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#setup<sp/>flux<sp/>boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.stressFluxBoundaryConditionsObjectsDict<sp/>=<sp/>dict([(cj,FluxBoundaryConditions(self.mesh,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.nElementBoundaryQuadraturePoints_elementBoundary,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[(</highlight><highlight class="stringliteral">&apos;x&apos;</highlight><highlight class="normal">)],</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getStressFluxBoundaryConditions=self.stressFluxBoundaryConditionsSetterDict[cj]))</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>cj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>list(self.stressFluxBoundaryConditionsSetterDict.keys())])</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.ebqe[&apos;dS&apos;]<sp/>=<sp/>np.zeros((self.mesh.nExteriorElementBoundaries_global,self.nElementBoundaryQuadraturePoints_elementBoundary),&apos;d&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>cfemIntegrals.calculateIntegrationWeights(self.ebqe[&apos;sqrt(det(g))&apos;],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.elementBoundaryQuadratureWeights[(&apos;u&apos;,0)],</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ebqe[&apos;dS&apos;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>ci<sp/>in<sp/>range(self.nc):<sp/>self.ebqe[(&apos;dS_u&apos;,ci)]<sp/>=<sp/>self.ebqe[&apos;dS&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.coefficients.initializeGlobalExteriorElementBoundaryQuadrature(self.timeIntegration.t,self.ebqe)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel_1a921ddfe926ed4c3ca848137bac74000f" kindref="member">estimate_mt</ref>(self):</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel_1af3c8fa7b70fa3d0f881af0e08d0e1aed" kindref="member">calculateSolutionAtQuadrature</ref>(self):</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="da/de9/classproteus_1_1elastoplastic_1_1ElastoPlastic_1_1LevelModel_1ae517436f5735e363013c5c647c86515f" kindref="member">calculateAuxiliaryQuantitiesAfterStep</ref>(self):</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OneLevelTransport.calculateAuxiliaryQuantitiesAfterStep(self)</highlight></codeline>
    </programlisting>
    <location file="elastoplastic/ElastoPlastic.py"/>
  </compounddef>
</doxygen>
