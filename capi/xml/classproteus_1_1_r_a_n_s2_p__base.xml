<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classproteus_1_1_r_a_n_s2_p__base" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>proteus::RANS2P_base</compoundname>
    <derivedcompoundref refid="classproteus_1_1_r_a_n_s2_p" prot="public" virt="non-virtual">proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;</derivedcompoundref>
    <includes refid="_r_a_n_s2_p_8h" local="no">/Users/cekees/proteus/proteus/mprans/RANS2P.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1ac98b9770a5a62b4c353b5487b6094593" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual proteus::RANS2P_base::~RANS2P_base</definition>
        <argsstring>()</argsstring>
        <name>~RANS2P_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="26" column="13" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1a963ea717800e6acb25e84e01886fe599" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::calculateResidual</definition>
        <argsstring>(double NONCONSERVATIVE_FORM, double MOMENTUM_SGE, double PRESSURE_SGE, double VELOCITY_SGE, double PRESSURE_PROJECTION_STABLIZATION, xt::pyarray&lt; double &gt; &amp;numerical_viscosity, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;x_ref, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;p_test_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;p_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_test_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, double eb_adjoint_sigma, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, double hFactor, int nElements_global, int nElementBoundaries_owned, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dc, double C_b, const xt::pyarray&lt; double &gt; &amp;eps_solid, xt::pyarray&lt; double &gt; &amp;phi_solid, const xt::pyarray&lt; double &gt; &amp;q_velocity_solid, const xt::pyarray&lt; double &gt; &amp;q_porosity, const xt::pyarray&lt; double &gt; &amp;q_dragAlpha, const xt::pyarray&lt; double &gt; &amp;q_dragBeta, const xt::pyarray&lt; double &gt; &amp;q_mass_source, const xt::pyarray&lt; double &gt; &amp;q_turb_var_0, const xt::pyarray&lt; double &gt; &amp;q_turb_var_1, const xt::pyarray&lt; double &gt; &amp;q_turb_var_grad_0, const double LAG_LES, xt::pyarray&lt; double &gt; &amp;q_eddy_viscosity, xt::pyarray&lt; double &gt; &amp;q_eddy_viscosity_last, xt::pyarray&lt; double &gt; &amp;ebqe_eddy_viscosity, xt::pyarray&lt; double &gt; &amp;ebqe_eddy_viscosity_last, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; int &gt; &amp;rp_l2g, xt::pyarray&lt; int &gt; &amp;rvel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, xt::pyarray&lt; double &gt; &amp;p_old_dof, xt::pyarray&lt; double &gt; &amp;u_old_dof, xt::pyarray&lt; double &gt; &amp;v_old_dof, xt::pyarray&lt; double &gt; &amp;w_old_dof, xt::pyarray&lt; double &gt; &amp;g, const double useVF, xt::pyarray&lt; double &gt; &amp;q_rho, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; double &gt; &amp;phi_nodes, xt::pyarray&lt; double &gt; &amp;normal_phi, xt::pyarray&lt; double &gt; &amp;kappa_phi, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc, xt::pyarray&lt; double &gt; &amp;q_mom_w_acc, xt::pyarray&lt; double &gt; &amp;q_mass_adv, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_w_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_dV, xt::pyarray&lt; double &gt; &amp;q_dV_last, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u, xt::pyarray&lt; double &gt; &amp;q_numDiff_v, xt::pyarray&lt; double &gt; &amp;q_numDiff_w, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_w_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_colind, int offset_p, int offset_u, int offset_v, int offset_w, int stride_p, int stride_u, int stride_v, int stride_w, xt::pyarray&lt; double &gt; &amp;globalResidual, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_normal_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_kappa_phi_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_porosity_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_0, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_1, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_p, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_w, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_p, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_w, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_w, xt::pyarray&lt; double &gt; &amp;ebqe_bc_p_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_w_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_w_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_w_diff_ext, xt::pyarray&lt; double &gt; &amp;q_x, xt::pyarray&lt; double &gt; &amp;q_velocity, xt::pyarray&lt; double &gt; &amp;ebqe_velocity, xt::pyarray&lt; double &gt; &amp;flux, xt::pyarray&lt; double &gt; &amp;elementResidual_p, xt::pyarray&lt; int &gt; &amp;elementFlags, xt::pyarray&lt; int &gt; &amp;boundaryFlags, xt::pyarray&lt; double &gt; &amp;barycenters, xt::pyarray&lt; double &gt; &amp;wettedAreas, xt::pyarray&lt; double &gt; &amp;netForces_p, xt::pyarray&lt; double &gt; &amp;netForces_v, xt::pyarray&lt; double &gt; &amp;netMoments, xt::pyarray&lt; double &gt; &amp;velocityError, xt::pyarray&lt; double &gt; &amp;velocityErrorNodal, xt::pyarray&lt; double &gt; &amp;forcex, xt::pyarray&lt; double &gt; &amp;forcey, xt::pyarray&lt; double &gt; &amp;forcez, int use_ball_as_particle, xt::pyarray&lt; double &gt; &amp;ball_center, xt::pyarray&lt; double &gt; &amp;ball_radius, xt::pyarray&lt; double &gt; &amp;ball_velocity, xt::pyarray&lt; double &gt; &amp;ball_angular_velocity, xt::pyarray&lt; double &gt; &amp;ball_center_acceleration, xt::pyarray&lt; double &gt; &amp;ball_angular_acceleration, xt::pyarray&lt; double &gt; &amp;ball_density, xt::pyarray&lt; double &gt; &amp;particle_signed_distances, xt::pyarray&lt; double &gt; &amp;particle_signed_distance_normals, xt::pyarray&lt; double &gt; &amp;particle_velocities, xt::pyarray&lt; double &gt; &amp;particle_centroids, xt::pyarray&lt; double &gt; &amp;ebq_global_phi_s, xt::pyarray&lt; double &gt; &amp;ebq_global_grad_phi_s, xt::pyarray&lt; double &gt; &amp;ebq_particle_velocity_s, int nParticles, xt::pyarray&lt; double &gt; &amp;particle_netForces, xt::pyarray&lt; double &gt; &amp;particle_netMoments, xt::pyarray&lt; double &gt; &amp;particle_surfaceArea, int nElements_owned, double particle_nitsche, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, xt::pyarray&lt; double &gt; &amp;phi_solid_nodes, xt::pyarray&lt; double &gt; &amp;distance_to_solids, const int use_pseudo_penalty, bool useExact)=0</argsstring>
        <name>calculateResidual</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1a4f3d38ca72da9c6c44587ece861c0d38">calculateResidual</reimplementedby>
        <param>
          <type>double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOMENTUM_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>VELOCITY_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_PROJECTION_STABLIZATION</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_eddy_viscosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_eddy_viscosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>rp_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>rvel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_rho</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_nodes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_w_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_adv</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_x</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementResidual_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>barycenters</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>wettedAreas</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>netForces_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>netForces_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>netMoments</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocityError</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocityErrorNodal</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>forcex</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>forcey</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>forcez</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_global_phi_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_global_grad_phi_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_particle_velocity_s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_netMoments</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_surfaceArea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>distance_to_solids</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="27" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1a1eb56865a030363c1e46101ba12ce73e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::calculateJacobian</definition>
        <argsstring>(double NONCONSERVATIVE_FORM, double MOMENTUM_SGE, double PRESSURE_SGE, double VELOCITY_SGE, double PRESSURE_PROJECTION_STABILIZATION, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;x_ref, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;p_test_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;p_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_test_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, double eb_adjoint_sigma, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, double hFactor, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dg, double C_b, const xt::pyarray&lt; double &gt; &amp;eps_solid, const xt::pyarray&lt; double &gt; &amp;phi_solid, const xt::pyarray&lt; double &gt; &amp;q_velocity_solid, const xt::pyarray&lt; double &gt; &amp;q_porosity, const xt::pyarray&lt; double &gt; &amp;q_dragAlpha, const xt::pyarray&lt; double &gt; &amp;q_dragBeta, const xt::pyarray&lt; double &gt; &amp;q_mass_source, const xt::pyarray&lt; double &gt; &amp;q_turb_var_0, const xt::pyarray&lt; double &gt; &amp;q_turb_var_1, const xt::pyarray&lt; double &gt; &amp;q_turb_var_grad_0, const double LAG_LES, xt::pyarray&lt; double &gt; &amp;q_eddy_viscosity_last, xt::pyarray&lt; double &gt; &amp;ebqe_eddy_viscosity_last, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, xt::pyarray&lt; double &gt; &amp;p_old_dof, xt::pyarray&lt; double &gt; &amp;u_old_dof, xt::pyarray&lt; double &gt; &amp;v_old_dof, xt::pyarray&lt; double &gt; &amp;w_old_dof, xt::pyarray&lt; double &gt; &amp;g, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; double &gt; &amp;phi_nodes, xt::pyarray&lt; double &gt; &amp;normal_phi, xt::pyarray&lt; double &gt; &amp;kappa_phi, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_w_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_dV, xt::pyarray&lt; double &gt; &amp;q_dV_last, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_w_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_colind, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_w, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_w, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_w, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; &amp;globalJacobian, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_normal_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_kappa_phi_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_porosity_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_0, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_1, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_p, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_w, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_p, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_w, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_w, xt::pyarray&lt; double &gt; &amp;ebqe_bc_p_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_w_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_w_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_w_diff_ext, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_w, xt::pyarray&lt; int &gt; &amp;elementFlags, xt::pyarray&lt; int &gt; &amp;boundaryFlags, int use_ball_as_particle, xt::pyarray&lt; double &gt; &amp;ball_center, xt::pyarray&lt; double &gt; &amp;ball_radius, xt::pyarray&lt; double &gt; &amp;ball_velocity, xt::pyarray&lt; double &gt; &amp;ball_angular_velocity, xt::pyarray&lt; double &gt; &amp;ball_center_acceleration, xt::pyarray&lt; double &gt; &amp;ball_angular_acceleration, xt::pyarray&lt; double &gt; &amp;ball_density, xt::pyarray&lt; double &gt; &amp;particle_signed_distances, xt::pyarray&lt; double &gt; &amp;particle_signed_distance_normals, xt::pyarray&lt; double &gt; &amp;particle_velocities, xt::pyarray&lt; double &gt; &amp;particle_centroids, xt::pyarray&lt; double &gt; &amp;ebq_global_phi_s, xt::pyarray&lt; double &gt; &amp;ebq_global_grad_phi_s, xt::pyarray&lt; double &gt; &amp;ebq_particle_velocity_s, xt::pyarray&lt; double &gt; &amp;phi_solid_nodes, xt::pyarray&lt; double &gt; &amp;distance_to_solids, int nParticles, int nElements_owned, double particle_nitsche, double particle_epsFact, double particle_alpha, double particle_beta, double particle_penalty_constant, const int use_pseudo_penalty, bool useExact)=0</argsstring>
        <name>calculateJacobian</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1ae44c05f9d6f9bc947943a10fcf31b87b">calculateJacobian</reimplementedby>
        <param>
          <type>double</type>
          <declname>NONCONSERVATIVE_FORM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOMENTUM_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>VELOCITY_SGE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PRESSURE_PROJECTION_STABILIZATION</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>LAG_LES</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_eddy_viscosity_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_old_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_nodes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_center_acceleration</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_angular_acceleration</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ball_density</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_global_phi_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_global_grad_phi_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebq_particle_velocity_s</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi_solid_nodes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>distance_to_solids</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_epsFact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>particle_penalty_constant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>use_pseudo_penalty</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="230" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1ab3d4afdc49aa0f82a16b91a7b23f46a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::calculateVelocityAverage</definition>
        <argsstring>(int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, int nInteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;interiorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;ebqe_velocity, xt::pyarray&lt; double &gt; &amp;velocityAverage, xt::pyarray&lt; int &gt; &amp;elementMaterialTypes, xt::pyarray&lt; double &gt; &amp;porosityTypes)=0</argsstring>
        <name>calculateVelocityAverage</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1a85e3969f8f1443ff2fce334c4130688d">calculateVelocityAverage</reimplementedby>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nInteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>interiorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocityAverage</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementMaterialTypes</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>porosityTypes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="430" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1a7ae28605b71198b17663de9b7c271489" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::getTwoPhaseAdvectionOperator</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_trail_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; &amp;advection_matrix)=0</argsstring>
        <name>getTwoPhaseAdvectionOperator</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1a4066a1358ff62871fc786f0b827ced50">getTwoPhaseAdvectionOperator</reimplementedby>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trail_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>advection_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="453" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1ad4ba44c6c177b7199e7f638fb84a9db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::getTwoPhaseInvScaledLaplaceOperator</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; int &gt; &amp;sdInfo_p_p_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_p_p_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_colind, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; &amp;laplace_matrix)=0</argsstring>
        <name>getTwoPhaseInvScaledLaplaceOperator</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1aa34d4d015653730ed6f72869def7bb1f">getTwoPhaseInvScaledLaplaceOperator</reimplementedby>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_p_p_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_p_p_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>laplace_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="482" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_r_a_n_s2_p__base_1a623336fcd7c7745cc4723b134de9196d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::RANS2P_base::getTwoPhaseScaledMassOperator</definition>
        <argsstring>(int scale_type, int use_numerical_viscosity, int lumped, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, xt::pyarray&lt; double &gt; &amp;numerical_viscosity, int nElements_global, double useMetrics, double epsFact_rho, double epsFact_mu, double rho_0, double nu_0, double rho_1, double nu_1, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; &amp;mass_matrix)=0</argsstring>
        <name>getTwoPhaseScaledMassOperator</name>
        <reimplementedby refid="classproteus_1_1_r_a_n_s2_p_1ae7abe1924cd3441df875a156ccb185d7">getTwoPhaseScaledMassOperator</reimplementedby>
        <param>
          <type>int</type>
          <declname>scale_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_numerical_viscosity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lumped</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>numerical_viscosity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mass_matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="514" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>proteus::RANS2P_base</label>
        <link refid="classproteus_1_1_r_a_n_s2_p__base"/>
      </node>
      <node id="2">
        <label>proteus::RANS2P&lt; CompKernelType, CompKernelType_v, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nDOF_v_trial_element, nDOF_v_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1_r_a_n_s2_p"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/Users/cekees/proteus/proteus/mprans/RANS2P.h" line="23" column="3" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS2P.h" bodystart="24" bodyend="552"/>
    <listofallmembers>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1a1eb56865a030363c1e46101ba12ce73e" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1a963ea717800e6acb25e84e01886fe599" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1ab3d4afdc49aa0f82a16b91a7b23f46a2" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>calculateVelocityAverage</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1a7ae28605b71198b17663de9b7c271489" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>getTwoPhaseAdvectionOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1ad4ba44c6c177b7199e7f638fb84a9db2" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>getTwoPhaseInvScaledLaplaceOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1a623336fcd7c7745cc4723b134de9196d" prot="public" virt="pure-virtual"><scope>proteus::RANS2P_base</scope><name>getTwoPhaseScaledMassOperator</name></member>
      <member refid="classproteus_1_1_r_a_n_s2_p__base_1ac98b9770a5a62b4c353b5487b6094593" prot="public" virt="virtual"><scope>proteus::RANS2P_base</scope><name>~RANS2P_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
