<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceproteus_1_1deim__utils" kind="namespace" language="Python">
    <compoundname>proteus::deim_utils</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceproteus_1_1deim__utils_1a86047d40d8d20e3cc56c3641096289da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.deim_utils.read_from_hdf5</definition>
        <argsstring>(hdfFile, label, dof_map=None)</argsstring>
        <name>read_from_hdf5</name>
        <param>
          <type>hdfFile</type>
          <defname>hdfFile</defname>
        </param>
        <param>
          <type>label</type>
          <defname>label</defname>
        </param>
        <param>
          <type>dof_map</type>
          <defname>dof_map</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Just grab the array stored in the node with label label and return it
If dof_map is not none, use this to map values in the array
If dof_map is not none, this determines shape of the output array
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="deim_utils.py" line="10" column="1" bodyfile="deim_utils.py" bodystart="10" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1deim__utils_1a549229b1daa318923bfc1a6d2b186569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.deim_utils.read_snapshots</definition>
        <argsstring>(archive, nsnap, val_name)</argsstring>
        <name>read_snapshots</name>
        <param>
          <type>archive</type>
          <defname>archive</defname>
        </param>
        <param>
          <type>nsnap</type>
          <defname>nsnap</defname>
        </param>
        <param>
          <type>val_name</type>
          <defname>val_name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>assumes nsnap values of array in val_name are stored in h5file as
/val_name&apos;i&apos; for i=0,nspap-1

loads these into a matrix and returns
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="deim_utils.py" line="25" column="1" bodyfile="deim_utils.py" bodystart="25" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1deim__utils_1a69efa7dcd46387443f67352f013eeb5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.deim_utils.generate_svd_decomposition</definition>
        <argsstring>(archive, nsnap, val_name, outbase)</argsstring>
        <name>generate_svd_decomposition</name>
        <param>
          <type>archive</type>
          <defname>archive</defname>
        </param>
        <param>
          <type>nsnap</type>
          <defname>nsnap</defname>
        </param>
        <param>
          <type>val_name</type>
          <defname>val_name</defname>
        </param>
        <param>
          <type>outbase</type>
          <defname>outbase</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>assumes nsnap values of array in val_name are stored in h5file as
/val_name&apos;i&apos; for i=0,nspap-1

loads these into a matrix, performs an SVD, and stores the output in outbase_SVD_basis, 
  outbase_singular_values in numpy&apos;s binary format

returns U,s,V svd decomposition of snapshots
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="deim_utils.py" line="44" column="1" bodyfile="deim_utils.py" bodystart="44" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1deim__utils_1a7a0062d7f3aeadfd10b6bba909174a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.deim_utils.calculate_deim_indices</definition>
        <argsstring>(Uin)</argsstring>
        <name>calculate_deim_indices</name>
        <param>
          <type>Uin</type>
          <defname>Uin</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>input: Uin n x m array of basis vectors for nonlinear function snapshots
output: rho, m vector of indices \rho_i for extracting $\vec F$ values</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="deim_utils.py" line="63" column="1" bodyfile="deim_utils.py" bodystart="63" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1deim__utils_1a2089e1daec8ceb5690383f39a0a8b585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.deim_utils.deim_alg</definition>
        <argsstring>(Uin, m)</argsstring>
        <name>deim_alg</name>
        <param>
          <type>Uin</type>
          <defname>Uin</defname>
        </param>
        <param>
          <type>m</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="deim_utils.py" line="94" column="1" bodyfile="deim_utils.py" bodystart="94" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1deim__utils_1a813967aba90a8a39d8af90cde718f8c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.deim_utils.visualize_zslice</definition>
        <argsstring>(variable, nnx, nny, iz, x=None, y=None, name=None)</argsstring>
        <name>visualize_zslice</name>
        <param>
          <type>variable</type>
          <defname>variable</defname>
        </param>
        <param>
          <type>nnx</type>
          <defname>nnx</defname>
        </param>
        <param>
          <type>nny</type>
          <defname>nny</defname>
        </param>
        <param>
          <type>iz</type>
          <defname>iz</defname>
        </param>
        <param>
          <type>x</type>
          <defname>x</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>y</type>
          <defname>y</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>name</type>
          <defname>name</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>convenience function for plotting a slice
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="deim_utils.py" line="115" column="1" bodyfile="deim_utils.py" bodystart="115" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1deim__utils_1ab408934caa9abd203b64a8e2776682a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.deim_utils.extract_sub_matrix_csr</definition>
        <argsstring>(rho, rowptr, colind, nnzval)</argsstring>
        <name>extract_sub_matrix_csr</name>
        <param>
          <type>rho</type>
          <defname>rho</defname>
        </param>
        <param>
          <type>rowptr</type>
          <defname>rowptr</defname>
        </param>
        <param>
          <type>colind</type>
          <defname>colind</defname>
        </param>
        <param>
          <type>nnzval</type>
          <defname>nnzval</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>manually extract the rows in the deim index vector rho from a csr matrix representation 
returns a csr representation 
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="deim_utils.py" line="145" column="1" bodyfile="deim_utils.py" bodystart="145" bodyend="164"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>utility module for generating deim interpolants
</verbatim> </para>
    </detaileddescription>
    <location file="deim_utils.py" line="1" column="1"/>
  </compounddef>
</doxygen>
