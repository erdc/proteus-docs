<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classproteus_1_1cpp_r_a_n_s3_p_sed" kind="class" language="C++" prot="public">
    <compoundname>proteus::cppRANS3PSed</compoundname>
    <basecompoundref refid="classproteus_1_1cpp_r_a_n_s3_p_sed__base" prot="public" virt="non-virtual">proteus::cppRANS3PSed_base</basecompoundref>
    <includes refid="_r_a_n_s3_p_sed_8h" local="no">/Users/cekees/proteus/proteus/mprans/RANS3PSed.h</includes>
    <templateparamlist>
      <param>
        <type>class CompKernelType</type>
      </param>
      <param>
        <type>int</type>
        <declname>nSpace</declname>
        <defname>nSpace</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_element</declname>
        <defname>nQuadraturePoints_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_mesh_trial_element</declname>
        <defname>nDOF_mesh_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_trial_element</declname>
        <defname>nDOF_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_test_element</declname>
        <defname>nDOF_test_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_elementBoundary</declname>
        <defname>nQuadraturePoints_elementBoundary</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1ac19e94825587e6f2eed2ec25527ee492" prot="public" static="no" mutable="no">
        <type><ref refid="classproteus_1_1cpp_hsu_sed_stress" kindref="compound">cppHsuSedStress</ref>&lt; 3 &gt;</type>
        <definition>cppHsuSedStress&lt;3&gt; proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::closure</definition>
        <argsstring></argsstring>
        <name>closure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="421" column="23" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1ad82cf990ee3277f3a9974569cd863759" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_test_X_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_test_X_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="422" column="17" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a38e85cd1aa07ce311a3bf51efed94c93" prot="public" static="no" mutable="no">
        <type>CompKernelType</type>
        <definition>CompKernelType proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ck</definition>
        <argsstring></argsstring>
        <name>ck</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="423" column="22" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1ac41675470c05bbe85e6e39b6afd5aa45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::cppRANS3PSed</definition>
        <argsstring>()</argsstring>
        <name>cppRANS3PSed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="424" column="5" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="424" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a3615f265b1da3620220c885262c96e13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::setSedClosure</definition>
        <argsstring>(double aDarcy, double betaForch, double grain, double packFraction, double packMargin, double maxFraction, double frFraction, double sigmaC, double C3e, double C4e, double eR, double fContact, double mContact, double nContact, double angFriction, double vos_limiter, double mu_fr_limiter)</argsstring>
        <name>setSedClosure</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_sed__base_1a6d8b4ed2c6082bd488aa3cfb83035037">setSedClosure</reimplements>
        <param>
          <type>double</type>
          <declname>aDarcy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>betaForch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>grain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>packFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>packMargin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>frFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaC</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C3e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C4e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eR</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angFriction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vos_limiter</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mu_fr_limiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="447" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="447" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a53df626617905746e05332bdba8017ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::smoothedHeaviside</definition>
        <argsstring>(double eps, double phi)</argsstring>
        <name>smoothedHeaviside</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="484" column="21" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="484" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1ace4301d760df17dfcba7b6615b45cd88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::smoothedHeaviside_integral</definition>
        <argsstring>(double eps, double phi)</argsstring>
        <name>smoothedHeaviside_integral</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="498" column="21" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="498" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1ad6dfc840f12108c348effc6930dfd582" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::smoothedDirac</definition>
        <argsstring>(double eps, double phi)</argsstring>
        <name>smoothedDirac</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="519" column="21" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="519" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1aa98daf1d8f30ef2212508d540b9cd64b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateCoefficients</definition>
        <argsstring>(const double eps_rho, const double eps_mu, const double sigma, const double rho_0, double nu_0, const double rho_1, double nu_1, const double rho_s, const double h_e, const double smagorinskyConstant, const int turbulenceClosureModel, const double g[nSpace], const double useVF, const double &amp;vf, const double &amp;phi, const double n[nSpace], const double &amp;kappa, const double vos, const double &amp;p, const double grad_p[nSpace], const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], const double &amp;u, const double &amp;v, const double &amp;w, const double &amp;uStar, const double &amp;vStar, const double &amp;wStar, double &amp;eddy_viscosity, double &amp;mom_u_acc, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_v, double &amp;mom_w_acc, double &amp;dmom_w_acc_w, double mass_adv[nSpace], double dmass_adv_u[nSpace], double dmass_adv_v[nSpace], double dmass_adv_w[nSpace], double mom_u_adv[nSpace], double dmom_u_adv_u[nSpace], double dmom_u_adv_v[nSpace], double dmom_u_adv_w[nSpace], double mom_v_adv[nSpace], double dmom_v_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_v_adv_w[nSpace], double mom_w_adv[nSpace], double dmom_w_adv_u[nSpace], double dmom_w_adv_v[nSpace], double dmom_w_adv_w[nSpace], double mom_uu_diff_ten[nSpace], double mom_vv_diff_ten[nSpace], double mom_ww_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double &amp;mom_u_ham, double dmom_u_ham_grad_p[nSpace], double dmom_u_ham_grad_u[nSpace], double &amp;mom_v_ham, double dmom_v_ham_grad_p[nSpace], double dmom_v_ham_grad_v[nSpace], double &amp;mom_w_ham, double dmom_w_ham_grad_p[nSpace], double dmom_w_ham_grad_w[nSpace])</argsstring>
        <name>evaluateCoefficients</name>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>h_e</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>g</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>kappa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vos</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_acc_w</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="532" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="532" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a5986ebd909a68158b7271e968415b73c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateDarcyForchheimerTerms_Ergun</definition>
        <argsstring>(const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, double nu_t, const double useVF, const double vf, const double phi, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double vos, const double u_f, const double v_f, const double w_f, const double uStar_f, const double vStar_f, const double wStar_f, double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace], double gradC_x, double gradC_y, double gradC_z)</argsstring>
        <name>updateDarcyForchheimerTerms_Ergun</name>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_t</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vos</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u_f</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v_f</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w_f</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar_f</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar_f</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar_f</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>gradC_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradC_y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradC_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="813" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="813" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a20f031a97906437d5796322f77760840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updatePenaltyForPacking</definition>
        <argsstring>(const double vos, const double u, const double v, const double w, double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace])</argsstring>
        <name>updatePenaltyForPacking</name>
        <param>
          <type>const double</type>
          <declname>vos</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="887" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="887" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1aa847e29534fae4e6e0a08024771352cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateFrictionalPressure</definition>
        <argsstring>(const double vos, const double grad_vos[nSpace], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source)</argsstring>
        <name>updateFrictionalPressure</name>
        <param>
          <type>const double</type>
          <declname>vos</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_vos</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="917" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="917" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1afb8bccee4d7d4c89ad1d19a918bca858" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateFrictionalStress</definition>
        <argsstring>(const double LAG_MU_FR, const double mu_fr_last, double &amp;mu_fr_new, const double vos, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double rho_s, const double useVF, const double vf, const double phi, const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], double mom_uu_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vv_diff_ten[nSpace], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_ww_diff_ten[nSpace], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1])</argsstring>
        <name>updateFrictionalStress</name>
        <param>
          <type>const double</type>
          <declname>LAG_MU_FR</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>mu_fr_last</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mu_fr_new</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vos</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="931" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="931" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a305cc67c0e932cddf8a42cf39da09ef4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;hFactor, const double &amp;elementDiameter, const double &amp;dmt, const double &amp;dm, const double df[nSpace], const double &amp;a, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dmt</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>df</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="989" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="989" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1ad00ddab934ba5c67c902241fbbe521a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;Ct_sge, const double &amp;Cd_sge, const double G[nSpace *nSpace], const double &amp;G_dd_G, const double &amp;tr_G, const double &amp;A0, const double Ai[nSpace], const double &amp;Kij, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;q_cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>G</declname>
          <array>[nSpace *nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>G_dd_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tr_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>A0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>Ai</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Kij</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="1023" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="1023" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a72e0a022520468b3d29b7e3626871f60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double &amp;pdeResidualP, const double &amp;pdeResidualU, const double &amp;pdeResidualV, const double &amp;pdeResidualW, double &amp;subgridErrorP, double &amp;subgridErrorU, double &amp;subgridErrorV, double &amp;subgridErrorW)</argsstring>
        <name>calculateSubgridError_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualP</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualU</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualV</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualW</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorP</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorU</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorV</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="1044" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="1044" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1ad321b35a852f2c57b571c886815cca05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridErrorDerivatives_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double dpdeResidualP_du[nDOF_trial_element], const double dpdeResidualP_dv[nDOF_trial_element], const double dpdeResidualP_dw[nDOF_trial_element], const double dpdeResidualU_dp[nDOF_trial_element], const double dpdeResidualU_du[nDOF_trial_element], const double dpdeResidualV_dp[nDOF_trial_element], const double dpdeResidualV_dv[nDOF_trial_element], const double dpdeResidualW_dp[nDOF_trial_element], const double dpdeResidualW_dw[nDOF_trial_element], double dsubgridErrorP_du[nDOF_trial_element], double dsubgridErrorP_dv[nDOF_trial_element], double dsubgridErrorP_dw[nDOF_trial_element], double dsubgridErrorU_dp[nDOF_trial_element], double dsubgridErrorU_du[nDOF_trial_element], double dsubgridErrorV_dp[nDOF_trial_element], double dsubgridErrorV_dv[nDOF_trial_element], double dsubgridErrorW_dp[nDOF_trial_element], double dsubgridErrorW_dw[nDOF_trial_element])</argsstring>
        <name>calculateSubgridErrorDerivatives_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="1063" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="1063" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1abade80fd88bb6038b8ffcf27504cd3bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFlux</definition>
        <argsstring>(const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double &amp;bc_oneByRho, const double n[nSpace], const double &amp;vos, const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double &amp;bc_w, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;flux_mass, double &amp;flux_umom, double &amp;flux_vmom, double &amp;flux_wmom, double *velocity_star, double *velocity)</argsstring>
        <name>exteriorNumericalAdvectiveFlux</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vos</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_mass</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_umom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_vmom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_wmom</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity_star</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="1104" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="1104" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1afdb0f801bbb7c9d293c3db185a2f43ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFluxDerivatives</definition>
        <argsstring>(const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double n[nSpace], const double &amp;vos, const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double &amp;bc_w, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;dflux_mass_du, double &amp;dflux_mass_dv, double &amp;dflux_mass_dw, double &amp;dflux_umom_dp, double &amp;dflux_umom_du, double &amp;dflux_umom_dv, double &amp;dflux_umom_dw, double &amp;dflux_vmom_dp, double &amp;dflux_vmom_du, double &amp;dflux_vmom_dv, double &amp;dflux_vmom_dw, double &amp;dflux_wmom_dp, double &amp;dflux_wmom_du, double &amp;dflux_wmom_dv, double &amp;dflux_wmom_dw, double *velocity_star)</argsstring>
        <name>exteriorNumericalAdvectiveFluxDerivatives</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vos</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dw</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity_star</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="1239" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="1239" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a10337220439d28581ea3a43578215d98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalDiffusiveFlux</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *bc_a, const double &amp;bc_u, const double &amp;bc_flux, double *a, const double grad_potential[nSpace], const double &amp;u, const double &amp;penalty, double &amp;flux)</argsstring>
        <name>exteriorNumericalDiffusiveFlux</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_potential</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="1390" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="1390" bodyend="1435"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1af74978eb8e1ddc674df03f981c3001aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ExteriorNumericalDiffusiveFluxJacobian</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *a, const double &amp;v, const double grad_v[nSpace], const double &amp;penalty)</argsstring>
        <name>ExteriorNumericalDiffusiveFluxJacobian</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="1439" column="16" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="1439" bodyend="1469"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a3cc309456acc104642dcf956116946b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateResidual</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, double PSTAB, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;p_test_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_ref, xt::pyarray&lt; double &gt; &amp;q_p, xt::pyarray&lt; double &gt; &amp;q_grad_p, xt::pyarray&lt; double &gt; &amp;ebqe_p, xt::pyarray&lt; double &gt; &amp;ebqe_grad_p, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;p_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_test_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, double eb_adjoint_sigma, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, double hFactor, int nElements_global, int nElementBoundaries_owned, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double rho_s, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dc, double C_b, const xt::pyarray&lt; double &gt; &amp;eps_solid, const xt::pyarray&lt; double &gt; &amp;q_velocity_fluid, const xt::pyarray&lt; double &gt; &amp;q_velocityStar_fluid, const xt::pyarray&lt; double &gt; &amp;q_vos, const xt::pyarray&lt; double &gt; &amp;q_dvos_dt, const xt::pyarray&lt; double &gt; &amp;q_grad_vos, const xt::pyarray&lt; double &gt; &amp;q_dragAlpha, const xt::pyarray&lt; double &gt; &amp;q_dragBeta, const xt::pyarray&lt; double &gt; &amp;q_mass_source, const xt::pyarray&lt; double &gt; &amp;q_turb_var_0, const xt::pyarray&lt; double &gt; &amp;q_turb_var_1, const xt::pyarray&lt; double &gt; &amp;q_turb_var_grad_0, xt::pyarray&lt; double &gt; &amp;q_eddy_viscosity, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, xt::pyarray&lt; double &gt; &amp;g, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; double &gt; &amp;normal_phi, xt::pyarray&lt; double &gt; &amp;kappa_phi, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc, xt::pyarray&lt; double &gt; &amp;q_mom_w_acc, xt::pyarray&lt; double &gt; &amp;q_mass_adv, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_w_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_dV, xt::pyarray&lt; double &gt; &amp;q_dV_last, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;ebqe_velocity_star, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u, xt::pyarray&lt; double &gt; &amp;q_numDiff_v, xt::pyarray&lt; double &gt; &amp;q_numDiff_w, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_w_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_colind, int offset_p, int offset_u, int offset_v, int offset_w, int stride_p, int stride_u, int stride_v, int stride_w, xt::pyarray&lt; double &gt; &amp;globalResidual, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_normal_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_kappa_phi_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_vos_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_0, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_1, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_p, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_w, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_p, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_w, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_w, xt::pyarray&lt; double &gt; &amp;ebqe_bc_p_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_w_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_w_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_w_diff_ext, xt::pyarray&lt; double &gt; &amp;q_x, xt::pyarray&lt; double &gt; &amp;q_velocity, xt::pyarray&lt; double &gt; &amp;ebqe_velocity, xt::pyarray&lt; double &gt; &amp;flux, xt::pyarray&lt; double &gt; &amp;elementResidual_p_save, xt::pyarray&lt; int &gt; &amp;elementFlags, xt::pyarray&lt; int &gt; &amp;boundaryFlags, xt::pyarray&lt; double &gt; &amp;barycenters, xt::pyarray&lt; double &gt; &amp;wettedAreas, xt::pyarray&lt; double &gt; &amp;netForces_p, xt::pyarray&lt; double &gt; &amp;netForces_v, xt::pyarray&lt; double &gt; &amp;netMoments, xt::pyarray&lt; double &gt; &amp;ncDrag, double LAG_MU_FR, xt::pyarray&lt; double &gt; &amp;q_mu_fr_last, xt::pyarray&lt; double &gt; &amp;q_mu_fr)</argsstring>
        <name>calculateResidual</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_sed__base_1a72faec5a6810f5f66410565126436eb8">calculateResidual</reimplements>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PSTAB</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_grad_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_grad_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_fluid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocityStar_fluid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_vos</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dvos_dt</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_grad_vos</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_eddy_viscosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_w_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_adv</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity_star</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_vos_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_x</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementResidual_p_save</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>barycenters</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>wettedAreas</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>netForces_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>netForces_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>netMoments</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ncDrag</declname>
        </param>
        <param>
          <type>double</type>
          <declname>LAG_MU_FR</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mu_fr_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mu_fr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="1471" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="1471" bodyend="3045"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1a3d37ff2561bb4ba6db5714d7850e0991" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateJacobian</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, double PSTAB, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;p_trial_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;p_test_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_ref, xt::pyarray&lt; double &gt; &amp;q_p, xt::pyarray&lt; double &gt; &amp;q_grad_p, xt::pyarray&lt; double &gt; &amp;ebqe_p, xt::pyarray&lt; double &gt; &amp;ebqe_grad_p, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;p_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;p_test_trace_ref, xt::pyarray&lt; double &gt; &amp;p_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, double eb_adjoint_sigma, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, double hFactor, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double rho_s, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dg, double C_b, const xt::pyarray&lt; double &gt; &amp;eps_solid, const xt::pyarray&lt; double &gt; &amp;q_velocity_fluid, const xt::pyarray&lt; double &gt; &amp;q_velocityStar_fluid, const xt::pyarray&lt; double &gt; &amp;q_vos, const xt::pyarray&lt; double &gt; &amp;q_dvos_dt, const xt::pyarray&lt; double &gt; &amp;q_grad_vos, const xt::pyarray&lt; double &gt; &amp;q_dragAlpha, const xt::pyarray&lt; double &gt; &amp;q_dragBeta, const xt::pyarray&lt; double &gt; &amp;q_mass_source, const xt::pyarray&lt; double &gt; &amp;q_turb_var_0, const xt::pyarray&lt; double &gt; &amp;q_turb_var_1, const xt::pyarray&lt; double &gt; &amp;q_turb_var_grad_0, xt::pyarray&lt; int &gt; &amp;p_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;p_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, xt::pyarray&lt; double &gt; &amp;g, const double useVF, xt::pyarray&lt; double &gt; &amp;vf, xt::pyarray&lt; double &gt; &amp;phi, xt::pyarray&lt; double &gt; &amp;normal_phi, xt::pyarray&lt; double &gt; &amp;kappa_phi, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_w_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_dV, xt::pyarray&lt; double &gt; &amp;q_dV_last, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;ebqe_velocity_star, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_w_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_w_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_w_v_colind, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_p_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_p_w, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_w, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_w, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_p, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_w_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; &amp;globalJacobian, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_vf_ext, xt::pyarray&lt; double &gt; &amp;ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;bc_ebqe_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_normal_phi_ext, xt::pyarray&lt; double &gt; &amp;ebqe_kappa_phi_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_vos_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_0, const xt::pyarray&lt; double &gt; &amp;ebqe_turb_var_1, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_p, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_w, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_p, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_w, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_w, xt::pyarray&lt; double &gt; &amp;ebqe_bc_p_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_w_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_w_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_w_diff_ext, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_p_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_w, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_p, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_w_w, xt::pyarray&lt; int &gt; &amp;elementFlags, double LAG_MU_FR, xt::pyarray&lt; double &gt; &amp;q_mu_fr_last, xt::pyarray&lt; double &gt; &amp;q_mu_fr)</argsstring>
        <name>calculateJacobian</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_sed__base_1a86a1e8b03082487f7557b9eb87191df1">calculateJacobian</reimplements>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PSTAB</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_grad_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_grad_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_fluid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocityStar_fluid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_vos</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dvos_dt</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_grad_vos</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity_star</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_vos_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>double</type>
          <declname>LAG_MU_FR</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mu_fr_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mu_fr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="3047" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="3047" bodyend="4658"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed_1aa5474231af5f44728823827f63be3392" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateVelocityAverage</definition>
        <argsstring>(int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, int nInteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;interiorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;w_dof, xt::pyarray&lt; double &gt; &amp;vos_dof, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;ebqe_velocity, xt::pyarray&lt; double &gt; &amp;velocityAverage)</argsstring>
        <name>calculateVelocityAverage</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_sed__base_1a648b58d62856d9a87dc4981d4cac21ef">calculateVelocityAverage</reimplements>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nInteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>interiorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vos_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocityAverage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="4660" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="4660" bodyend="4828"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>proteus::cppRANS3PSed_base</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_sed__base"/>
      </node>
      <node id="1">
        <label>proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_sed"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>proteus::cppRANS3PSed_base</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_sed__base"/>
      </node>
      <node id="3">
        <label>proteus::cppHsuSedStress&lt; 3 &gt;</label>
        <link refid="classproteus_1_1cpp_hsu_sed_stress"/>
      </node>
      <node id="1">
        <label>proteus::cppRANS3PSed&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_sed"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>closure</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" line="418" column="5" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed.h" bodystart="419" bodyend="4829"/>
    <listofallmembers>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a3d37ff2561bb4ba6db5714d7850e0991" prot="public" virt="virtual"><scope>proteus::cppRANS3PSed</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a3cc309456acc104642dcf956116946b5" prot="public" virt="virtual"><scope>proteus::cppRANS3PSed</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a305cc67c0e932cddf8a42cf39da09ef4" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1ad00ddab934ba5c67c902241fbbe521a0" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a72e0a022520468b3d29b7e3626871f60" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>calculateSubgridError_tauRes</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1ad321b35a852f2c57b571c886815cca05" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>calculateSubgridErrorDerivatives_tauRes</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1aa5474231af5f44728823827f63be3392" prot="public" virt="virtual"><scope>proteus::cppRANS3PSed</scope><name>calculateVelocityAverage</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a38e85cd1aa07ce311a3bf51efed94c93" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>ck</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1ac19e94825587e6f2eed2ec25527ee492" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>closure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1ac41675470c05bbe85e6e39b6afd5aa45" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>cppRANS3PSed</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1aa98daf1d8f30ef2212508d540b9cd64b" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>evaluateCoefficients</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1abade80fd88bb6038b8ffcf27504cd3bd" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>exteriorNumericalAdvectiveFlux</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1afdb0f801bbb7c9d293c3db185a2f43ca" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>exteriorNumericalAdvectiveFluxDerivatives</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a10337220439d28581ea3a43578215d98" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>exteriorNumericalDiffusiveFlux</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1af74978eb8e1ddc674df03f981c3001aa" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>ExteriorNumericalDiffusiveFluxJacobian</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1ad82cf990ee3277f3a9974569cd863759" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>nDOF_test_X_trial_element</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a3615f265b1da3620220c885262c96e13" prot="public" virt="virtual"><scope>proteus::cppRANS3PSed</scope><name>setSedClosure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1ad6dfc840f12108c348effc6930dfd582" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>smoothedDirac</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a53df626617905746e05332bdba8017ba" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>smoothedHeaviside</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1ace4301d760df17dfcba7b6615b45cd88" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>smoothedHeaviside_integral</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a5986ebd909a68158b7271e968415b73c" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>updateDarcyForchheimerTerms_Ergun</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1aa847e29534fae4e6e0a08024771352cd" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>updateFrictionalPressure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1afb8bccee4d7d4c89ad1d19a918bca858" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>updateFrictionalStress</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed_1a20f031a97906437d5796322f77760840" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PSed</scope><name>updatePenaltyForPacking</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed__base_1ade94832d6627ba9e925c8a1747a326e7" prot="public" virt="virtual"><scope>proteus::cppRANS3PSed</scope><name>~cppRANS3PSed_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
