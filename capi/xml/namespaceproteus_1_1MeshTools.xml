<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceproteus_1_1MeshTools" kind="namespace" language="Python">
    <compoundname>proteus::MeshTools</compoundname>
    <innerclass refid="classproteus_1_1MeshTools_1_1Edge" prot="public">proteus::MeshTools::Edge</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1EdgeGrid" prot="public">proteus::MeshTools::EdgeGrid</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1EdgeMesh" prot="public">proteus::MeshTools::EdgeMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Element" prot="public">proteus::MeshTools::Element</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1HexahedralMesh" prot="public">proteus::MeshTools::HexahedralMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Hexahedron" prot="public">proteus::MeshTools::Hexahedron</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1InterpolatedBathymetryMesh" prot="public">proteus::MeshTools::InterpolatedBathymetryMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Mesh" prot="public">proteus::MeshTools::Mesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Mesh2DM" prot="public">proteus::MeshTools::Mesh2DM</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Mesh3DM" prot="public">proteus::MeshTools::Mesh3DM</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MeshOptions" prot="public">proteus::MeshTools::MeshOptions</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MeshParallelPartitioningTypes" prot="public">proteus::MeshTools::MeshParallelPartitioningTypes</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MultilevelEdgeMesh" prot="public">proteus::MeshTools::MultilevelEdgeMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MultilevelHexahedralMesh" prot="public">proteus::MeshTools::MultilevelHexahedralMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MultilevelMesh" prot="public">proteus::MeshTools::MultilevelMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MultilevelNURBSMesh" prot="public">proteus::MeshTools::MultilevelNURBSMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MultilevelQuadrilateralMesh" prot="public">proteus::MeshTools::MultilevelQuadrilateralMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MultilevelRectangularGrid" prot="public">proteus::MeshTools::MultilevelRectangularGrid</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MultilevelSimplicialMesh" prot="public">proteus::MeshTools::MultilevelSimplicialMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MultilevelTetrahedralMesh" prot="public">proteus::MeshTools::MultilevelTetrahedralMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1MultilevelTriangularMesh" prot="public">proteus::MeshTools::MultilevelTriangularMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Node" prot="public">proteus::MeshTools::Node</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1NURBSMesh" prot="public">proteus::MeshTools::NURBSMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1PointMesh" prot="public">proteus::MeshTools::PointMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Polygon" prot="public">proteus::MeshTools::Polygon</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Polyhedron" prot="public">proteus::MeshTools::Polyhedron</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Quadrilateral" prot="public">proteus::MeshTools::Quadrilateral</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1QuadrilateralGrid" prot="public">proteus::MeshTools::QuadrilateralGrid</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1QuadrilateralMesh" prot="public">proteus::MeshTools::QuadrilateralMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1RectangularGrid" prot="public">proteus::MeshTools::RectangularGrid</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1TetrahedralMesh" prot="public">proteus::MeshTools::TetrahedralMesh</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Tetrahedron" prot="public">proteus::MeshTools::Tetrahedron</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1Triangle" prot="public">proteus::MeshTools::Triangle</innerclass>
    <innerclass refid="classproteus_1_1MeshTools_1_1TriangularMesh" prot="public">proteus::MeshTools::TriangularMesh</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1a7fdb7319ec8cee2533d4a2bce2e93b6d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.nNodes_global</definition>
        <argsstring></argsstring>
        <name>nNodes_global</name>
        <briefdescription>
<para>information about allowed Xdmf topologies Xdmf cell type id to Name </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5991" column="1" bodyfile="MeshTools.py" bodystart="5991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1ae26a33da7cc70528ced24800d1b2a83e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.nodeArray</definition>
        <argsstring></argsstring>
        <name>nodeArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5992" column="1" bodyfile="MeshTools.py" bodystart="5992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1a17912140cf56d4d3d4981f4eed640f81" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.nodeMaterialTypes</definition>
        <argsstring></argsstring>
        <name>nodeMaterialTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5993" column="1" bodyfile="MeshTools.py" bodystart="5993" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1a4a9e409af3fada8e70dc10674dfc1a88" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.nNodes_element</definition>
        <argsstring></argsstring>
        <name>nNodes_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5994" column="1" bodyfile="MeshTools.py" bodystart="5994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1a0c56b4782cc18f37070bca34e412b492" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.nElements_global</definition>
        <argsstring></argsstring>
        <name>nElements_global</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5995" column="1" bodyfile="MeshTools.py" bodystart="5995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1a0ba344d0696a8ffbdd6e22d6fc7106af" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.elementTopologyName</definition>
        <argsstring></argsstring>
        <name>elementTopologyName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5996" column="1" bodyfile="MeshTools.py" bodystart="5996" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1a4ea01cf3ad023eedda5707cf1d3cfe0f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.elementNodesArray</definition>
        <argsstring></argsstring>
        <name>elementNodesArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5997" column="1" bodyfile="MeshTools.py" bodystart="5997" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1a564d54d7edab150645e4e490c3f4f8c1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.elementNodes_offset</definition>
        <argsstring></argsstring>
        <name>elementNodes_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5998" column="1" bodyfile="MeshTools.py" bodystart="5998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1ae317a653a641f37a7177cf4960729087" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.elementMaterialTypes</definition>
        <argsstring></argsstring>
        <name>elementMaterialTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5999" column="1" bodyfile="MeshTools.py" bodystart="5999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1a6eb358af18a4c08002ae9744ebf92b47" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.nNodes_owned</definition>
        <argsstring></argsstring>
        <name>nNodes_owned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6000" column="1" bodyfile="MeshTools.py" bodystart="6000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1MeshTools_1a3690cf88feb708bd47c503eefa6a4730" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::MeshTools.nElements_owned</definition>
        <argsstring></argsstring>
        <name>nElements_owned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6001" column="1" bodyfile="MeshTools.py" bodystart="6001" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a9937ccd897f610b5811a03bdee9f1b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.getNodesFromEdges</definition>
        <argsstring>(edges)</argsstring>
        <name>getNodesFromEdges</name>
        <param>
          <type>edges</type>
          <defname>edges</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Extract the subset of nodes from a list of edges.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="150" column="1" bodyfile="MeshTools.py" bodystart="150" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a5f00cb7458d8fb009f72695bf7e63cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.getEdgesFromPolygons</definition>
        <argsstring>(polygons)</argsstring>
        <name>getEdgesFromPolygons</name>
        <param>
          <type>polygons</type>
          <defname>polygons</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Extract the subset of edges from a list of polygons</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="167" column="1" bodyfile="MeshTools.py" bodystart="167" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a682ddfa754776ece2e9977888531fb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.buildReferenceSimplex</definition>
        <argsstring>(nd=2)</argsstring>
        <name>buildReferenceSimplex</name>
        <param>
          <type>nd</type>
          <defname>nd</defname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Create and return a Proteus mesh object for the reference 
element.

Parameters
----------
nd : int
    Dimension of reference element

Returns
-------
mesh : :class:`proteus.MeshTools.TriangularMesh`
    Simplex mesh
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="3876" column="1" bodyfile="MeshTools.py" bodystart="3876" bodyend="3916"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1aa89dea1c7aa42a7f202ef1c395527c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.findXMLgridElement</definition>
        <argsstring>(xmf, MeshTag=&apos;Spatial_Domain&apos;, id_in_collection=-1, verbose=0)</argsstring>
        <name>findXMLgridElement</name>
        <param>
          <type>xmf</type>
          <defname>xmf</defname>
        </param>
        <param>
          <type>MeshTag</type>
          <defname>MeshTag</defname>
          <defval>&apos;Spatial_Domain&apos;</defval>
        </param>
        <param>
          <type>id_in_collection</type>
          <defname>id_in_collection</defname>
          <defval>-1</defval>
        </param>
        <param>
          <type>verbose</type>
          <defname>verbose</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>utility functions for reading meshes from Xdmf </para>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Try to find the element of the xml tree xmf that holds a uniform
grid with the name given in MeshTag by searching through Temporal
Grid Collections and Grid Collections.

If MeshTag isn&apos;t found, uses the first entry in the Domain
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5826" column="1" bodyfile="MeshTools.py" bodystart="5826" bodyend="5851"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a38a1d89179fe5a92f56f5e633908a4ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.extractPropertiesFromXdmfGridNode</definition>
        <argsstring>(Grid)</argsstring>
        <name>extractPropertiesFromXdmfGridNode</name>
        <param>
          <type>Grid</type>
          <defname>Grid</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>unpack the Topology, Geometry, NodeMaterials, and ElementMaterials
nodes from xdmf node for a uniform grid
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5852" column="1" bodyfile="MeshTools.py" bodystart="5852" bodyend="5874"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a9c70d9d10876a7497458750ec9e8e700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.readUniformElementTopologyFromXdmf</definition>
        <argsstring>(elementTopologyName, Topology, hdf5, topologyid2name, topology2nodes)</argsstring>
        <name>readUniformElementTopologyFromXdmf</name>
        <param>
          <type><ref refid="namespaceproteus_1_1MeshTools_1a0ba344d0696a8ffbdd6e22d6fc7106af" kindref="member">elementTopologyName</ref></type>
          <defname>elementTopologyName</defname>
        </param>
        <param>
          <type>Topology</type>
          <defname>Topology</defname>
        </param>
        <param>
          <type>hdf5</type>
          <defname>hdf5</defname>
        </param>
        <param>
          <type>topologyid2name</type>
          <defname>topologyid2name</defname>
        </param>
        <param>
          <type>topology2nodes</type>
          <defname>topology2nodes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read xmdf element topology information when there are uniform elements in the mesh
Type of element given by elementTopologyName
Heavy data stored in hdf5
topologyid2name -- lookup for number of nodes in a given element type

returns

nElements_global  -- the number of elements in the mesh
nNodes_element    -- number of nodes per element
elementNodesArray -- element --&gt; node connectivity stored as flattened array accessed using elementNodes_offset
elementNodes_offset -- offsets into the elementNodesArray storage for element connectivity, 
element eN nodes are in elementNodesArray[elementNodes_offset[eN]:elementNodes_offset[eN+1]]</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5875" column="1" bodyfile="MeshTools.py" bodystart="5875" bodyend="5904"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a370d777332ecc4caab513fa1277b5970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.readMixedElementTopologyFromXdmf</definition>
        <argsstring>(elementTopologyName, Topology, hdf5, topologyid2name, topology2nodes)</argsstring>
        <name>readMixedElementTopologyFromXdmf</name>
        <param>
          <type><ref refid="namespaceproteus_1_1MeshTools_1a0ba344d0696a8ffbdd6e22d6fc7106af" kindref="member">elementTopologyName</ref></type>
          <defname>elementTopologyName</defname>
        </param>
        <param>
          <type>Topology</type>
          <defname>Topology</defname>
        </param>
        <param>
          <type>hdf5</type>
          <defname>hdf5</defname>
        </param>
        <param>
          <type>topologyid2name</type>
          <defname>topologyid2name</defname>
        </param>
        <param>
          <type>topology2nodes</type>
          <defname>topology2nodes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read xmdf element topology information when there are mixed elements in the mesh
Heavy data stored in hdf5
topologyid2name -- lookup for number of nodes in a given element type

returns

nElements_global  -- the number of elements in the mesh
elementNodesArray -- element --&gt; node connectivity stored as flattened 
array accessed using elementNodes_offset
elementNodes_offset -- offsets into the elementNodesArray storage for element 
connectivity, element eN nodes are 
inelementNodesArray[elementNodes_offset[eN]:elementNodes_offset[eN+1]]</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5905" column="1" bodyfile="MeshTools.py" bodystart="5905" bodyend="5951"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a44160b7ba5972539d6f419b95f9831c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.readMeshXdmf</definition>
        <argsstring>(xmf_archive_base, heavy_file_base, MeshTag=&quot;Spatial_Domain&quot;, hasHDF5=True, verbose=0)</argsstring>
        <name>readMeshXdmf</name>
        <param>
          <type>xmf_archive_base</type>
          <defname>xmf_archive_base</defname>
        </param>
        <param>
          <type>heavy_file_base</type>
          <defname>heavy_file_base</defname>
        </param>
        <param>
          <type>MeshTag</type>
          <defname>MeshTag</defname>
          <defval>&quot;Spatial_Domain&quot;</defval>
        </param>
        <param>
          <type>hasHDF5</type>
          <defname>hasHDF5</defname>
          <defval>True</defval>
        </param>
        <param>
          <type>verbose</type>
          <defname>verbose</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read in a mesh from XDMF, assuming heavy data is in hdf5

:return: a BasicMeshInfo object with the minimal information read</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="5952" column="1" bodyfile="MeshTools.py" bodystart="5952" bodyend="6062"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a433ddab5e2305d22045b016a285cfe45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.writeHexMesh</definition>
        <argsstring>(mesh_info, hexfile_base, index_base=0)</argsstring>
        <name>writeHexMesh</name>
        <param>
          <type>mesh_info</type>
          <defname>mesh_info</defname>
        </param>
        <param>
          <type>hexfile_base</type>
          <defname>hexfile_base</defname>
        </param>
        <param>
          <type>index_base</type>
          <defname>index_base</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Write a hex mesh in Ido&apos;s format with base numbering index_base
HEX
nNodes_global nElements_global
x0 y0 z0
x1 y1 z1
...
xN yN zN
[n0 n1 n2 n3 n4 n5 n6 n7 mat0]
[n0 n1 n2 n3 n4 n5 n6 n7 mat1]
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6063" column="1" bodyfile="MeshTools.py" bodystart="6063" bodyend="6089"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a23f482dd0c87e76b70c2aeca7c8fffd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.distance</definition>
        <argsstring>(a, b)</argsstring>
        <name>distance</name>
        <param>
          <type>a</type>
          <defname>a</defname>
        </param>
        <param>
          <type>b</type>
          <defname>b</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6172" column="1" bodyfile="MeshTools.py" bodystart="6172" bodyend="6175"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a571b1e77c1cea2677c1f5c10e62f1b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.triangleVerticesToNormals</definition>
        <argsstring>(elementVertices)</argsstring>
        <name>triangleVerticesToNormals</name>
        <param>
          <type>elementVertices</type>
          <defname>elementVertices</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Given a set of vertices to a triangle, return normals and a point corresponding to each normal
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6176" column="1" bodyfile="MeshTools.py" bodystart="6176" bodyend="6203"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1ad1f553293cdade7e24646456b28a13f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.tetrahedronVerticesToNormals</definition>
        <argsstring>(elementVertices)</argsstring>
        <name>tetrahedronVerticesToNormals</name>
        <param>
          <type>elementVertices</type>
          <defname>elementVertices</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Given a set of vertices to a tetrahedron, return normals and a point corresponding to each normal
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6204" column="1" bodyfile="MeshTools.py" bodystart="6204" bodyend="6228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a7eb7a1be5959fa46aee570056503f037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.intersectPoints</definition>
        <argsstring>(line, points)</argsstring>
        <name>intersectPoints</name>
        <param>
          <type>line</type>
          <defname>line</defname>
        </param>
        <param>
          <type>points</type>
          <defname>points</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Given a line segment (defined as two points), identify all points that the line segment intersects.

This hasn&apos;t been vectorized.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6229" column="1" bodyfile="MeshTools.py" bodystart="6229" bodyend="6250"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a16cdb578b2b75c1a860adb513241ef60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.intersectEdges</definition>
        <argsstring>(line, edges)</argsstring>
        <name>intersectEdges</name>
        <param>
          <type>line</type>
          <defname>line</defname>
        </param>
        <param>
          <type>edges</type>
          <defname>edges</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Given a line segment (defined as two points), identify the locations of its intersections with all
given edges (defined as line segments).  If the line and an edge overlap, the *furthest* point
along the line (closest to the second point) that is still on each edge is returned.

This hasn&apos;t been vectorized.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6251" column="1" bodyfile="MeshTools.py" bodystart="6251" bodyend="6316"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1afc2480fe04a5e96f50f3d6ffc018d438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.intersectPolyhedron</definition>
        <argsstring>(line, polyhedron)</argsstring>
        <name>intersectPolyhedron</name>
        <param>
          <type>line</type>
          <defname>line</defname>
        </param>
        <param>
          <type>polyhedron</type>
          <defname>polyhedron</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Given a line (defined as two points), identify the locations that it enters and exits the
polyhedron (defined as a collection of half-planes in three-space in normal, vertex form)

If the facets of the polyhedron are in edge form, the normal can be computed by taking the cross product of any
two non-parallel edges of the facet (in three-space).  Any vertex of the facet will work.

Implementation of algorithm described here: http://geomalgorithms.com/a13-_intersect-4.html

This hasn&apos;t been vectorized.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6317" column="1" bodyfile="MeshTools.py" bodystart="6317" bodyend="6371"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a91db81de987f79c4fb62eb6ff606efc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.getMeshIntersections</definition>
        <argsstring>(mesh, toPolyhedron, endpoints)</argsstring>
        <name>getMeshIntersections</name>
        <param>
          <type>mesh</type>
          <defname>mesh</defname>
        </param>
        <param>
          <type>toPolyhedron</type>
          <defname>toPolyhedron</defname>
        </param>
        <param>
          <type>endpoints</type>
          <defname>endpoints</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Return all intersections between a line segment and a Proteus mesh


:param mesh - a Proteus mesh
:param toPolyhedron - a method for converting Proteus element vertices to polyhedra in normal/point form
:param endpoints - a pair of points in 3-space defining the line segment

:return a list of pairs of intersections through the mesh
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6372" column="1" bodyfile="MeshTools.py" bodystart="6372" bodyend="6396"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a831f4b33dafe410e35efe0acb2f8eb04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.runTriangle</definition>
        <argsstring>(polyfile, baseFlags=&quot;Yp&quot;, name=&quot;&quot;)</argsstring>
        <name>runTriangle</name>
        <param>
          <type>polyfile</type>
          <defname>polyfile</defname>
        </param>
        <param>
          <type>baseFlags</type>
          <defname>baseFlags</defname>
          <defval>&quot;Yp&quot;</defval>
        </param>
        <param>
          <type>name</type>
          <defname>name</defname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generate tetgen files from a polyfile.

Arguments
---------
polyfile : str
    Filename with appropriate data for tengen.
baseFlags : str
    Standard Tetgen options for generation
name : str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6397" column="1" bodyfile="MeshTools.py" bodystart="6397" bodyend="6432"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1ab88f6c65db15e41f287bf662a21bd49f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.runTetgen</definition>
        <argsstring>(polyfile, baseFlags=&quot;Yp&quot;, name=&quot;&quot;)</argsstring>
        <name>runTetgen</name>
        <param>
          <type>polyfile</type>
          <defname>polyfile</defname>
        </param>
        <param>
          <type>baseFlags</type>
          <defname>baseFlags</defname>
          <defval>&quot;Yp&quot;</defval>
        </param>
        <param>
          <type>name</type>
          <defname>name</defname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generate tetgen files from a polyfile.

Arguments
---------
polyfile : str
    Filename with appropriate data for tengen.
baseFlags : str
    Standard Tetgen options for generation
name : str</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6433" column="1" bodyfile="MeshTools.py" bodystart="6433" bodyend="6475"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a0b084d893bab49a6d0c9372c3ab8d680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.genMeshWithTriangle</definition>
        <argsstring>(polyfile, nbase=1)</argsstring>
        <name>genMeshWithTriangle</name>
        <param>
          <type>polyfile</type>
          <defname>polyfile</defname>
        </param>
        <param>
          <type>nbase</type>
          <defname>nbase</defname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generate a mesh from a set of triangle files.

Arguments
---------
polyfile : str
    Filename base for triangle files
nbase : int

Returns
--------
mesh : :class:`proteus.MeshTools.TriangularMesh`
    Simplex mesh
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6476" column="1" bodyfile="MeshTools.py" bodystart="6476" bodyend="6502"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a30cc0394e4e3f6a5f3570577cfb429cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.genMeshWithTetgen</definition>
        <argsstring>(polyfile, nbase=1)</argsstring>
        <name>genMeshWithTetgen</name>
        <param>
          <type>polyfile</type>
          <defname>polyfile</defname>
        </param>
        <param>
          <type>nbase</type>
          <defname>nbase</defname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generate a mesh from a set of tetgen files.

Arguments
---------
polyfile : str
    Filename base for tetgen files
nbase : int

Returns
--------
mesh : :class:`proteus.MeshTools.TetrahedralMesh`
    Simplex mesh
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6503" column="1" bodyfile="MeshTools.py" bodystart="6503" bodyend="6530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1ac5a818d2dfc05cd983067d024423aeff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.msh2simplex</definition>
        <argsstring>(fileprefix, nd)</argsstring>
        <name>msh2simplex</name>
        <param>
          <type>fileprefix</type>
          <defname>fileprefix</defname>
        </param>
        <param>
          <type>nd</type>
          <defname>nd</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Converts a .msh file (Gmsh) to .ele .edge .node files (triangle).
(!) Works only with triangle elements in 2D and tetrahedral elements in 3D.

Parameters
----------
fileprefix: str
    prefix of the .msh file (e.g. &apos;mesh&apos; if file called &apos;mesh.msh&apos;)</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6664" column="1" bodyfile="MeshTools.py" bodystart="6664" bodyend="6793"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a23896b43e6078ef344495b49b4e77d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools.generateMesh</definition>
        <argsstring>(physics, numerics, generatePartitionedMeshFromFiles=False)</argsstring>
        <name>generateMesh</name>
        <param>
          <type>physics</type>
          <defname>physics</defname>
        </param>
        <param>
          <type>numerics</type>
          <defname>numerics</defname>
        </param>
        <param>
          <type>generatePartitionedMeshFromFiles</type>
          <defname>generatePartitionedMeshFromFiles</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6794" column="1" bodyfile="MeshTools.py" bodystart="6794" bodyend="6809"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1MeshTools_1a69849c6746e3605c089b136d65659866" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.MeshTools._generateMesh</definition>
        <argsstring>(domain, meshOptions, generatePartitionedMeshFromFiles=False)</argsstring>
        <name>_generateMesh</name>
        <param>
          <type>domain</type>
          <defname>domain</defname>
        </param>
        <param>
          <type>meshOptions</type>
          <defname>meshOptions</defname>
        </param>
        <param>
          <type>generatePartitionedMeshFromFiles</type>
          <defname>generatePartitionedMeshFromFiles</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="MeshTools.py" line="6810" column="1" bodyfile="MeshTools.py" bodystart="6810" bodyend="7277"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Tools for creating and manipulating 1,2, and 3D meshes.

.. inheritance-diagram:: proteus.MeshTools
   :parts: 1
</verbatim> </para>
    </detaileddescription>
    <location file="MeshTools.py" line="1" column="1"/>
  </compounddef>
</doxygen>
