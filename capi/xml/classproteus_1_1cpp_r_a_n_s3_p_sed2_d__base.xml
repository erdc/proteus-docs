<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>proteus::cppRANS3PSed2D_base</compoundname>
    <derivedcompoundref refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d" prot="public" virt="non-virtual">proteus::cppRANS3PSed2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</derivedcompoundref>
    <includes refid="_r_a_n_s3_p_sed2_d_8h" local="no">/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1a1a94c163b57fd75b401f153a5f09b86d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual proteus::cppRANS3PSed2D_base::~cppRANS3PSed2D_base</definition>
        <argsstring>()</argsstring>
        <name>~cppRANS3PSed2D_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h" line="19" column="13" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1a78e5d43277537b19fbae4507dbe12772" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void proteus::cppRANS3PSed2D_base::setSedClosure</definition>
        <argsstring>(double aDarcy, double betaForch, double grain, double packFraction, double packMargin, double maxFraction, double frFraction, double sigmaC, double C3e, double C4e, double eR, double fContact, double mContact, double nContact, double angFriction, double vos_limiter, double mu_fr_limiter)</argsstring>
        <name>setSedClosure</name>
        <reimplementedby refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d_1a9ba1a2bca61767a170e064a6478a9792">setSedClosure</reimplementedby>
        <param>
          <type>double</type>
          <declname>aDarcy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>betaForch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>grain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>packFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>packMargin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>frFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaC</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C3e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C4e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eR</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angFriction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vos_limiter</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mu_fr_limiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h" line="20" column="18" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h" bodystart="20" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1acd37f3a868c374cd6c98af886cc5cb51" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::cppRANS3PSed2D_base::calculateResidual</definition>
        <argsstring>(xt::pyarray&lt; double &gt; mesh_trial_ref, xt::pyarray&lt; double &gt; mesh_grad_trial_ref, xt::pyarray&lt; double &gt; mesh_dof, xt::pyarray&lt; double &gt; mesh_velocity_dof, double MOVING_DOMAIN, double PSTAB, xt::pyarray&lt; int &gt; mesh_l2g, xt::pyarray&lt; double &gt; dV_ref, xt::pyarray&lt; double &gt; p_trial_ref, xt::pyarray&lt; double &gt; p_grad_trial_ref, xt::pyarray&lt; double &gt; p_test_ref, xt::pyarray&lt; double &gt; p_grad_test_ref, xt::pyarray&lt; double &gt; q_p, xt::pyarray&lt; double &gt; q_grad_p, xt::pyarray&lt; double &gt; ebqe_p, xt::pyarray&lt; double &gt; ebqe_grad_p, xt::pyarray&lt; double &gt; vel_trial_ref, xt::pyarray&lt; double &gt; vel_grad_trial_ref, xt::pyarray&lt; double &gt; vel_test_ref, xt::pyarray&lt; double &gt; vel_grad_test_ref, xt::pyarray&lt; double &gt; mesh_trial_trace_ref, xt::pyarray&lt; double &gt; mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; dS_ref, xt::pyarray&lt; double &gt; p_trial_trace_ref, xt::pyarray&lt; double &gt; p_grad_trial_trace_ref, xt::pyarray&lt; double &gt; p_test_trace_ref, xt::pyarray&lt; double &gt; p_grad_test_trace_ref, xt::pyarray&lt; double &gt; vel_trial_trace_ref, xt::pyarray&lt; double &gt; vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; vel_test_trace_ref, xt::pyarray&lt; double &gt; vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; normal_ref, xt::pyarray&lt; double &gt; boundaryJac_ref, double eb_adjoint_sigma, xt::pyarray&lt; double &gt; elementDiameter, xt::pyarray&lt; double &gt; nodeDiametersArray, double hFactor, int nElements_global, int nElementBoundaries_owned, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double rho_s, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dc, double C_b, const xt::pyarray&lt; double &gt; eps_solid, const xt::pyarray&lt; double &gt; q_velocity_fluid, const xt::pyarray&lt; double &gt; q_velocityStar_fluid, const xt::pyarray&lt; double &gt; q_vos, const xt::pyarray&lt; double &gt; q_dvos_dt, const xt::pyarray&lt; double &gt; q_grad_vos, const xt::pyarray&lt; double &gt; q_dragAlpha, const xt::pyarray&lt; double &gt; q_dragBeta, const xt::pyarray&lt; double &gt; q_mass_source, const xt::pyarray&lt; double &gt; q_turb_var_0, const xt::pyarray&lt; double &gt; q_turb_var_1, const xt::pyarray&lt; double &gt; q_turb_var_grad_0, xt::pyarray&lt; double &gt; q_eddy_viscosity, xt::pyarray&lt; int &gt; p_l2g, xt::pyarray&lt; int &gt; vel_l2g, xt::pyarray&lt; double &gt; p_dof, xt::pyarray&lt; double &gt; u_dof, xt::pyarray&lt; double &gt; v_dof, xt::pyarray&lt; double &gt; w_dof, xt::pyarray&lt; double &gt; g, const double useVF, xt::pyarray&lt; double &gt; vf, xt::pyarray&lt; double &gt; phi, xt::pyarray&lt; double &gt; normal_phi, xt::pyarray&lt; double &gt; kappa_phi, xt::pyarray&lt; double &gt; q_mom_u_acc, xt::pyarray&lt; double &gt; q_mom_v_acc, xt::pyarray&lt; double &gt; q_mom_w_acc, xt::pyarray&lt; double &gt; q_mass_adv, xt::pyarray&lt; double &gt; q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; q_mom_w_acc_beta_bdf, xt::pyarray&lt; double &gt; q_dV, xt::pyarray&lt; double &gt; q_dV_last, xt::pyarray&lt; double &gt; q_velocity_sge, xt::pyarray&lt; double &gt; ebqe_velocity_star, xt::pyarray&lt; double &gt; q_cfl, xt::pyarray&lt; double &gt; q_numDiff_u, xt::pyarray&lt; double &gt; q_numDiff_v, xt::pyarray&lt; double &gt; q_numDiff_w, xt::pyarray&lt; double &gt; q_numDiff_u_last, xt::pyarray&lt; double &gt; q_numDiff_v_last, xt::pyarray&lt; double &gt; q_numDiff_w_last, xt::pyarray&lt; int &gt; sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; sdInfo_u_u_colind, xt::pyarray&lt; int &gt; sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; sdInfo_u_v_colind, xt::pyarray&lt; int &gt; sdInfo_u_w_rowptr, xt::pyarray&lt; int &gt; sdInfo_u_w_colind, xt::pyarray&lt; int &gt; sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; sdInfo_v_v_colind, xt::pyarray&lt; int &gt; sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; sdInfo_v_u_colind, xt::pyarray&lt; int &gt; sdInfo_v_w_rowptr, xt::pyarray&lt; int &gt; sdInfo_v_w_colind, xt::pyarray&lt; int &gt; sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; sdInfo_w_w_colind, xt::pyarray&lt; int &gt; sdInfo_w_u_rowptr, xt::pyarray&lt; int &gt; sdInfo_w_u_colind, xt::pyarray&lt; int &gt; sdInfo_w_v_rowptr, xt::pyarray&lt; int &gt; sdInfo_w_v_colind, int offset_p, int offset_u, int offset_v, int offset_w, int stride_p, int stride_u, int stride_v, int stride_w, xt::pyarray&lt; double &gt; globalResidual, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; elementBoundaryElementsArray, xt::pyarray&lt; int &gt; elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; ebqe_vf_ext, xt::pyarray&lt; double &gt; bc_ebqe_vf_ext, xt::pyarray&lt; double &gt; ebqe_phi_ext, xt::pyarray&lt; double &gt; bc_ebqe_phi_ext, xt::pyarray&lt; double &gt; ebqe_normal_phi_ext, xt::pyarray&lt; double &gt; ebqe_kappa_phi_ext, const xt::pyarray&lt; double &gt; ebqe_vos_ext, const xt::pyarray&lt; double &gt; ebqe_turb_var_0, const xt::pyarray&lt; double &gt; ebqe_turb_var_1, xt::pyarray&lt; int &gt; isDOFBoundary_p, xt::pyarray&lt; int &gt; isDOFBoundary_u, xt::pyarray&lt; int &gt; isDOFBoundary_v, xt::pyarray&lt; int &gt; isDOFBoundary_w, xt::pyarray&lt; int &gt; isAdvectiveFluxBoundary_p, xt::pyarray&lt; int &gt; isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; isAdvectiveFluxBoundary_w, xt::pyarray&lt; int &gt; isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; isDiffusiveFluxBoundary_v, xt::pyarray&lt; int &gt; isDiffusiveFluxBoundary_w, xt::pyarray&lt; double &gt; ebqe_bc_p_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_mom_w_adv_ext, xt::pyarray&lt; double &gt; ebqe_bc_u_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; ebqe_penalty_ext, xt::pyarray&lt; double &gt; ebqe_bc_v_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; ebqe_bc_w_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_w_diff_ext, xt::pyarray&lt; double &gt; q_x, xt::pyarray&lt; double &gt; q_velocity, xt::pyarray&lt; double &gt; ebqe_velocity, xt::pyarray&lt; double &gt; flux, xt::pyarray&lt; double &gt; elementResidual_p, xt::pyarray&lt; int &gt; elementFlags, xt::pyarray&lt; int &gt; boundaryFlags, xt::pyarray&lt; double &gt; barycenters, xt::pyarray&lt; double &gt; wettedAreas, xt::pyarray&lt; double &gt; netForces_p, xt::pyarray&lt; double &gt; netForces_v, xt::pyarray&lt; double &gt; netMoments, xt::pyarray&lt; double &gt; ncDrag, double LAG_MU_FR, xt::pyarray&lt; double &gt; q_mu_fr_last, xt::pyarray&lt; double &gt; q_mu_fr)=0</argsstring>
        <name>calculateResidual</name>
        <reimplementedby refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d_1ab361f8844d517b344da48542fc8b1b21">calculateResidual</reimplementedby>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PSTAB</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_grad_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_grad_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_velocity_fluid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_velocityStar_fluid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_vos</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_dvos_dt</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_grad_vos</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_eddy_viscosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mom_u_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mom_v_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mom_w_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mass_adv</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_velocity_star</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_numDiff_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_numDiff_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_vos_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_x</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>elementResidual_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>boundaryFlags</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>barycenters</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>wettedAreas</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>netForces_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>netForces_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>netMoments</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ncDrag</declname>
        </param>
        <param>
          <type>double</type>
          <declname>LAG_MU_FR</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mu_fr_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mu_fr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h" line="37" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1af8891ce3272dbadc93bbe35eb91b6a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::cppRANS3PSed2D_base::calculateJacobian</definition>
        <argsstring>(xt::pyarray&lt; double &gt; mesh_trial_ref, xt::pyarray&lt; double &gt; mesh_grad_trial_ref, xt::pyarray&lt; double &gt; mesh_dof, xt::pyarray&lt; double &gt; mesh_velocity_dof, double MOVING_DOMAIN, double PSTAB, xt::pyarray&lt; int &gt; mesh_l2g, xt::pyarray&lt; double &gt; dV_ref, xt::pyarray&lt; double &gt; p_trial_ref, xt::pyarray&lt; double &gt; p_grad_trial_ref, xt::pyarray&lt; double &gt; p_test_ref, xt::pyarray&lt; double &gt; p_grad_test_ref, xt::pyarray&lt; double &gt; q_p, xt::pyarray&lt; double &gt; q_grad_p, xt::pyarray&lt; double &gt; ebqe_p, xt::pyarray&lt; double &gt; ebqe_grad_p, xt::pyarray&lt; double &gt; vel_trial_ref, xt::pyarray&lt; double &gt; vel_grad_trial_ref, xt::pyarray&lt; double &gt; vel_test_ref, xt::pyarray&lt; double &gt; vel_grad_test_ref, xt::pyarray&lt; double &gt; mesh_trial_trace_ref, xt::pyarray&lt; double &gt; mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; dS_ref, xt::pyarray&lt; double &gt; p_trial_trace_ref, xt::pyarray&lt; double &gt; p_grad_trial_trace_ref, xt::pyarray&lt; double &gt; p_test_trace_ref, xt::pyarray&lt; double &gt; p_grad_test_trace_ref, xt::pyarray&lt; double &gt; vel_trial_trace_ref, xt::pyarray&lt; double &gt; vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; vel_test_trace_ref, xt::pyarray&lt; double &gt; vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; normal_ref, xt::pyarray&lt; double &gt; boundaryJac_ref, double eb_adjoint_sigma, xt::pyarray&lt; double &gt; elementDiameter, xt::pyarray&lt; double &gt; nodeDiametersArray, double hFactor, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double epsFact_rho, double epsFact_mu, double sigma, double rho_0, double nu_0, double rho_1, double nu_1, double rho_s, double smagorinskyConstant, int turbulenceClosureModel, double Ct_sge, double Cd_sge, double C_dg, double C_b, const xt::pyarray&lt; double &gt; eps_solid, const xt::pyarray&lt; double &gt; q_velocity_fluid, const xt::pyarray&lt; double &gt; q_velocityStar_fluid, const xt::pyarray&lt; double &gt; q_vos, const xt::pyarray&lt; double &gt; q_dvos_dt, const xt::pyarray&lt; double &gt; q_grad_vos, const xt::pyarray&lt; double &gt; q_dragAlpha, const xt::pyarray&lt; double &gt; q_dragBeta, const xt::pyarray&lt; double &gt; q_mass_source, const xt::pyarray&lt; double &gt; q_turb_var_0, const xt::pyarray&lt; double &gt; q_turb_var_1, const xt::pyarray&lt; double &gt; q_turb_var_grad_0, xt::pyarray&lt; int &gt; p_l2g, xt::pyarray&lt; int &gt; vel_l2g, xt::pyarray&lt; double &gt; p_dof, xt::pyarray&lt; double &gt; u_dof, xt::pyarray&lt; double &gt; v_dof, xt::pyarray&lt; double &gt; w_dof, xt::pyarray&lt; double &gt; g, const double useVF, xt::pyarray&lt; double &gt; vf, xt::pyarray&lt; double &gt; phi, xt::pyarray&lt; double &gt; normal_phi, xt::pyarray&lt; double &gt; kappa_phi, xt::pyarray&lt; double &gt; q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; q_mom_w_acc_beta_bdf, xt::pyarray&lt; double &gt; q_dV, xt::pyarray&lt; double &gt; q_dV_last, xt::pyarray&lt; double &gt; q_velocity_sge, xt::pyarray&lt; double &gt; ebqe_velocity_star, xt::pyarray&lt; double &gt; q_cfl, xt::pyarray&lt; double &gt; q_numDiff_u_last, xt::pyarray&lt; double &gt; q_numDiff_v_last, xt::pyarray&lt; double &gt; q_numDiff_w_last, xt::pyarray&lt; int &gt; sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; sdInfo_u_u_colind, xt::pyarray&lt; int &gt; sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; sdInfo_u_v_colind, xt::pyarray&lt; int &gt; sdInfo_u_w_rowptr, xt::pyarray&lt; int &gt; sdInfo_u_w_colind, xt::pyarray&lt; int &gt; sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; sdInfo_v_v_colind, xt::pyarray&lt; int &gt; sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; sdInfo_v_u_colind, xt::pyarray&lt; int &gt; sdInfo_v_w_rowptr, xt::pyarray&lt; int &gt; sdInfo_v_w_colind, xt::pyarray&lt; int &gt; sdInfo_w_w_rowptr, xt::pyarray&lt; int &gt; sdInfo_w_w_colind, xt::pyarray&lt; int &gt; sdInfo_w_u_rowptr, xt::pyarray&lt; int &gt; sdInfo_w_u_colind, xt::pyarray&lt; int &gt; sdInfo_w_v_rowptr, xt::pyarray&lt; int &gt; sdInfo_w_v_colind, xt::pyarray&lt; int &gt; csrRowIndeces_p_p, xt::pyarray&lt; int &gt; csrColumnOffsets_p_p, xt::pyarray&lt; int &gt; csrRowIndeces_p_u, xt::pyarray&lt; int &gt; csrColumnOffsets_p_u, xt::pyarray&lt; int &gt; csrRowIndeces_p_v, xt::pyarray&lt; int &gt; csrColumnOffsets_p_v, xt::pyarray&lt; int &gt; csrRowIndeces_p_w, xt::pyarray&lt; int &gt; csrColumnOffsets_p_w, xt::pyarray&lt; int &gt; csrRowIndeces_u_p, xt::pyarray&lt; int &gt; csrColumnOffsets_u_p, xt::pyarray&lt; int &gt; csrRowIndeces_u_u, xt::pyarray&lt; int &gt; csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; csrRowIndeces_u_v, xt::pyarray&lt; int &gt; csrColumnOffsets_u_v, xt::pyarray&lt; int &gt; csrRowIndeces_u_w, xt::pyarray&lt; int &gt; csrColumnOffsets_u_w, xt::pyarray&lt; int &gt; csrRowIndeces_v_p, xt::pyarray&lt; int &gt; csrColumnOffsets_v_p, xt::pyarray&lt; int &gt; csrRowIndeces_v_u, xt::pyarray&lt; int &gt; csrColumnOffsets_v_u, xt::pyarray&lt; int &gt; csrRowIndeces_v_v, xt::pyarray&lt; int &gt; csrColumnOffsets_v_v, xt::pyarray&lt; int &gt; csrRowIndeces_v_w, xt::pyarray&lt; int &gt; csrColumnOffsets_v_w, xt::pyarray&lt; int &gt; csrRowIndeces_w_p, xt::pyarray&lt; int &gt; csrColumnOffsets_w_p, xt::pyarray&lt; int &gt; csrRowIndeces_w_u, xt::pyarray&lt; int &gt; csrColumnOffsets_w_u, xt::pyarray&lt; int &gt; csrRowIndeces_w_v, xt::pyarray&lt; int &gt; csrColumnOffsets_w_v, xt::pyarray&lt; int &gt; csrRowIndeces_w_w, xt::pyarray&lt; int &gt; csrColumnOffsets_w_w, xt::pyarray&lt; double &gt; globalJacobian, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; elementBoundaryElementsArray, xt::pyarray&lt; int &gt; elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; ebqe_vf_ext, xt::pyarray&lt; double &gt; bc_ebqe_vf_ext, xt::pyarray&lt; double &gt; ebqe_phi_ext, xt::pyarray&lt; double &gt; bc_ebqe_phi_ext, xt::pyarray&lt; double &gt; ebqe_normal_phi_ext, xt::pyarray&lt; double &gt; ebqe_kappa_phi_ext, const xt::pyarray&lt; double &gt; ebqe_vos_ext, const xt::pyarray&lt; double &gt; ebqe_turb_var_0, const xt::pyarray&lt; double &gt; ebqe_turb_var_1, xt::pyarray&lt; int &gt; isDOFBoundary_p, xt::pyarray&lt; int &gt; isDOFBoundary_u, xt::pyarray&lt; int &gt; isDOFBoundary_v, xt::pyarray&lt; int &gt; isDOFBoundary_w, xt::pyarray&lt; int &gt; isAdvectiveFluxBoundary_p, xt::pyarray&lt; int &gt; isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; isAdvectiveFluxBoundary_w, xt::pyarray&lt; int &gt; isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; isDiffusiveFluxBoundary_v, xt::pyarray&lt; int &gt; isDiffusiveFluxBoundary_w, xt::pyarray&lt; double &gt; ebqe_bc_p_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_mom_w_adv_ext, xt::pyarray&lt; double &gt; ebqe_bc_u_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; ebqe_penalty_ext, xt::pyarray&lt; double &gt; ebqe_bc_v_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; ebqe_bc_w_ext, xt::pyarray&lt; double &gt; ebqe_bc_flux_w_diff_ext, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_p_p, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_p_u, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_p_v, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_p_w, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_u_p, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_u_u, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_u_v, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_u_w, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_v_p, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_v_u, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_v_v, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_v_w, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_w_p, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_w_u, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_w_v, xt::pyarray&lt; int &gt; csrColumnOffsets_eb_w_w, xt::pyarray&lt; int &gt; elementFlags, double mu_fr, xt::pyarray&lt; double &gt; q_mu_fr_last, xt::pyarray&lt; double &gt; q_mu_fr)=0</argsstring>
        <name>calculateJacobian</name>
        <reimplementedby refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d_1a34b4b1b36f823cf10eccca9d3697771f">calculateJacobian</reimplementedby>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>double</type>
          <declname>PSTAB</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_grad_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_grad_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eb_adjoint_sigma</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact_mu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho_s</declname>
        </param>
        <param>
          <type>double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_dg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C_b</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>eps_solid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_velocity_fluid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_velocityStar_fluid</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_vos</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_dvos_dt</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_grad_vos</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_dragAlpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_dragBeta</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_mass_source</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_turb_var_1</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>q_turb_var_grad_0</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>p_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>p_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>normal_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>kappa_phi</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mom_w_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_velocity_star</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_numDiff_w_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_u_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_v_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_w_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_w_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>sdInfo_w_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrRowIndeces_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>bc_ebqe_vf_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>bc_ebqe_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_normal_phi_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_kappa_phi_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_vos_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_turb_var_0</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_turb_var_1</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isAdvectiveFluxBoundary_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isAdvectiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>isDiffusiveFluxBoundary_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_p_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_mom_w_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_w_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_bc_flux_w_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_p_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_p_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_p_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_p_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_u_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_u_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_v_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_v_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_w_p</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_w_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_w_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>csrColumnOffsets_eb_w_w</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>elementFlags</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mu_fr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mu_fr_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>q_mu_fr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h" line="215" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1adb3b1f611f1d127b7b00c84db6780935" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::cppRANS3PSed2D_base::calculateVelocityAverage</definition>
        <argsstring>(int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; exteriorElementBoundariesArray, int nInteriorElementBoundaries_global, xt::pyarray&lt; int &gt; interiorElementBoundariesArray, xt::pyarray&lt; int &gt; elementBoundaryElementsArray, xt::pyarray&lt; int &gt; elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; mesh_dof, xt::pyarray&lt; double &gt; mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; mesh_l2g, xt::pyarray&lt; double &gt; mesh_trial_trace_ref, xt::pyarray&lt; double &gt; mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; normal_ref, xt::pyarray&lt; double &gt; boundaryJac_ref, xt::pyarray&lt; int &gt; vel_l2g, xt::pyarray&lt; double &gt; u_dof, xt::pyarray&lt; double &gt; v_dof, xt::pyarray&lt; double &gt; w_dof, xt::pyarray&lt; double &gt; vos_dof, xt::pyarray&lt; double &gt; vel_trial_trace_ref, xt::pyarray&lt; double &gt; ebqe_velocity, xt::pyarray&lt; double &gt; velocityAverage)=0</argsstring>
        <name>calculateVelocityAverage</name>
        <reimplementedby refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d_1a4b85f99176252061eac1ed33e0d2ee76">calculateVelocityAverage</reimplementedby>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nInteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>interiorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>w_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vos_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt;</type>
          <declname>velocityAverage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h" line="386" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>proteus::cppRANS3PSed2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>proteus::cppRANS3PSed2D_base</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base"/>
      </node>
    </inheritancegraph>
    <location file="/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h" line="16" column="3" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PSed2D.h" bodystart="17" bodyend="408"/>
    <listofallmembers>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1af8891ce3272dbadc93bbe35eb91b6a00" prot="public" virt="pure-virtual"><scope>proteus::cppRANS3PSed2D_base</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1acd37f3a868c374cd6c98af886cc5cb51" prot="public" virt="pure-virtual"><scope>proteus::cppRANS3PSed2D_base</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1adb3b1f611f1d127b7b00c84db6780935" prot="public" virt="pure-virtual"><scope>proteus::cppRANS3PSed2D_base</scope><name>calculateVelocityAverage</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1a78e5d43277537b19fbae4507dbe12772" prot="public" virt="virtual"><scope>proteus::cppRANS3PSed2D_base</scope><name>setSedClosure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_sed2_d__base_1a1a94c163b57fd75b401f153a5f09b86d" prot="public" virt="virtual"><scope>proteus::cppRANS3PSed2D_base</scope><name>~cppRANS3PSed2D_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
