<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceproteus_1_1Context" kind="namespace" language="Python">
    <compoundname>proteus::Context</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceproteus_1_1Context_1a9bf97566037bc92ac8551ffd0f48719c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::Context.context</definition>
        <argsstring></argsstring>
        <name>context</name>
        <initializer>=  None</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Context.py" line="35" column="1" bodyfile="Context.py" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceproteus_1_1Context_1a4d159861623d4787cb2ba97533c80f3c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>proteus::Context.contextOptionsString</definition>
        <argsstring></argsstring>
        <name>contextOptionsString</name>
        <initializer>=  None</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Context.py" line="38" column="1" bodyfile="Context.py" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceproteus_1_1Context_1ab593177db08498b46eb76d3faa87a505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.Context.get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get the global context object</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Context.py" line="40" column="1" bodyfile="Context.py" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1Context_1a5966a755fc5ade13023e4c265d76d131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.Context.set</definition>
        <argsstring>(contextIn)</argsstring>
        <name>set</name>
        <param>
          <type>contextIn</type>
          <defname>contextIn</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Set the global context as an object</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Context.py" line="45" column="1" bodyfile="Context.py" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1Context_1ad8c00b56b4fe4c6808b66cc3d78edeae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.Context.setFromModule</definition>
        <argsstring>(moduleIn, mutable=False)</argsstring>
        <name>setFromModule</name>
        <param>
          <type>moduleIn</type>
          <defname>moduleIn</defname>
        </param>
        <param>
          <type>mutable</type>
          <defname>mutable</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Construct the global context object from a module</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Context.py" line="50" column="1" bodyfile="Context.py" bodystart="50" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceproteus_1_1Context_1a461242d050aceb1e84d9426074c67004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def proteus.Context.Options</definition>
        <argsstring>(optionsList=None, mutable=False)</argsstring>
        <name>Options</name>
        <param>
          <type>optionsList</type>
          <defname>optionsList</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>mutable</type>
          <defname>mutable</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Construct an o
from proteus.LinearAlgebraToptions object (named tuple)

:param optionsList: An iterable of options tuples. Each option is
                    a 3-tuple, with the first entry the option
                    name string, the second entry the default
                    value, and the third entry a help string

Example::

  opts=Context.Options([(&quot;nnx&quot;, 11, &quot;number of mesh nodes in x-direction&quot;),
                        (&quot;nny&quot;, 21, &quot;number of mesh nodes in y-direction&quot;])
  nnx = opts.nnx
  nny = opts.nny</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Context.py" line="64" column="1" bodyfile="Context.py" bodystart="64" bodyend="114"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Support for a global user context

Sub-models in multi-physics simulations sometimes need to be consistent
with other sub-models through certain &quot;global&quot; information. This model
provides methods for setting and getting such a global user context.
It also alows declaring input options to the user context that can be
set from the command line.

Example (set the global context from an object)::

  #create a simple context class
  globalSettings = {&quot;nnx&quot;:11, &quot;T&quot;:10.0, &quot;g&quot;=9.8}
  MyContext = namedtuple(&quot;MyContext&quot;,globalSettings.keys())
  #set the global  context  object
  proteus.Context.set(MyContext._make(globalSettings.values())

Example (set the global context from a module)::

  import globalSettingsModule
  proteus.Context.setFromModule(globalSettingsModule)

Example (use the global context)::

  ct = proteus.Context.get()
  nnx = ct.nnx</verbatim> </para>
    </detaileddescription>
    <location file="Context.py" line="1" column="1"/>
  </compounddef>
</doxygen>
