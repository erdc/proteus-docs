<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classproteus_1_1cpp_v_o_s3_p__base" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>proteus::cppVOS3P_base</compoundname>
    <derivedcompoundref refid="classproteus_1_1cpp_v_o_s" prot="public" virt="non-virtual">proteus::cppVOS&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</derivedcompoundref>
    <includes refid="_v_o_s3_p_8h" local="no">/Users/cekees/proteus/proteus/mprans/VOS3P.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1a1aec5a376a2afd9414ea170c6ce97181" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::Rpos</definition>
        <argsstring></argsstring>
        <name>Rpos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="40" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1a69a2f72196cdd6fd77855bd5a0f93a08" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::Rneg</definition>
        <argsstring></argsstring>
        <name>Rneg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="40" column="24" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1a0c0797e4fc46b8dc8d0354862d6e9316" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::FluxCorrectionMatrix</definition>
        <argsstring></argsstring>
        <name>FluxCorrectionMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="41" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1a3823d6d44ebd5ab4c248a5603b441e8b" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::solL</definition>
        <argsstring></argsstring>
        <name>solL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="42" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1a7bce486a8d10bdda8e77afed74c026fd" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::TransportMatrix</definition>
        <argsstring></argsstring>
        <name>TransportMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="43" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1a7d7f7441f53a5eeeca6fc5bbd2be980c" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::TransposeTransportMatrix</definition>
        <argsstring></argsstring>
        <name>TransposeTransportMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="43" column="35" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1acb6cf83dfbc98de10840994deb51d93c" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::u_free_dof_old</definition>
        <argsstring></argsstring>
        <name>u_free_dof_old</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="44" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1ab3d9b5df1b35a5be853c1a16e1bef7f1" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::porosity_free_dof</definition>
        <argsstring></argsstring>
        <name>porosity_free_dof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="44" column="33" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1a26bdbe2f7d2dc18cf1b109594fd1607e" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::psi</definition>
        <argsstring></argsstring>
        <name>psi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="45" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1a23b3461683e00e66b8e0bd5c809c139a" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::eta</definition>
        <argsstring></argsstring>
        <name>eta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="45" column="23" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1ab8da03261eb87d6e3b02470da281f146" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::global_entropy_residual</definition>
        <argsstring></argsstring>
        <name>global_entropy_residual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="45" column="27" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_v_o_s3_p__base_1ad269d923dd7c499af15a6eb9dc78e42b" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppVOS3P_base::boundary_integral</definition>
        <argsstring></argsstring>
        <name>boundary_integral</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="45" column="51" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1cpp_v_o_s3_p__base_1acbdc691d5a39a69f6aa71d7646389f11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual proteus::cppVOS3P_base::~cppVOS3P_base</definition>
        <argsstring>()</argsstring>
        <name>~cppVOS3P_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="47" column="13" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_v_o_s3_p__base_1a9ad755f99918fd8e7c591f0a545c7978" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::cppVOS3P_base::calculateResidual</definition>
        <argsstring>(double dt, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;u_trial_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;u_test_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;u_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_test_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, int nElements_global, double useMetrics, double alphaBDF, int lag_shockCapturing, double shockCapturingDiffusion, double sc_uref, double sc_alpha, const xt::pyarray&lt; double &gt; &amp;q_porosity, const xt::pyarray&lt; double &gt; &amp;porosity_dof, xt::pyarray&lt; double &gt; &amp;q_dvos_dt, xt::pyarray&lt; int &gt; &amp;u_l2g, xt::pyarray&lt; int &gt; &amp;r_l2g, xt::pyarray&lt; double &gt; &amp;elementDiameter, int degree_polynomial, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;u_dof_old, xt::pyarray&lt; double &gt; &amp;velocity, xt::pyarray&lt; double &gt; &amp;q_m, xt::pyarray&lt; double &gt; &amp;q_u, xt::pyarray&lt; double &gt; &amp;q_grad_u, xt::pyarray&lt; double &gt; &amp;q_m_betaBDF, xt::pyarray&lt; double &gt; &amp;q_dV, xt::pyarray&lt; double &gt; &amp;q_dV_last, xt::pyarray&lt; double &gt; &amp;cfl, xt::pyarray&lt; double &gt; &amp;edge_based_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, int offset_u, int stride_u, xt::pyarray&lt; double &gt; &amp;globalResidual, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_velocity_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_porosity_ext, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; int &gt; &amp;isFluxBoundary_u, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_phi, double epsFact, xt::pyarray&lt; double &gt; &amp;ebqe_u, xt::pyarray&lt; double &gt; &amp;ebqe_flux, double cE, double cK, double uL, double uR, int numDOFs, int NNZ, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_DofLoops, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_DofLoops, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_CellLoops, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_CellLoops, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_CellLoops, xt::pyarray&lt; double &gt; &amp;Cx, xt::pyarray&lt; double &gt; &amp;Cy, xt::pyarray&lt; double &gt; &amp;Cz, xt::pyarray&lt; double &gt; &amp;CTx, xt::pyarray&lt; double &gt; &amp;CTy, xt::pyarray&lt; double &gt; &amp;CTz, xt::pyarray&lt; double &gt; &amp;ML, xt::pyarray&lt; double &gt; &amp;delta_x_ij, int LUMPED_MASS_MATRIX, int STABILIZATION_TYPE, int ENTROPY_TYPE, xt::pyarray&lt; double &gt; &amp;dLow, xt::pyarray&lt; double &gt; &amp;fluxMatrix, xt::pyarray&lt; double &gt; &amp;uDotLow, xt::pyarray&lt; double &gt; &amp;uLow, xt::pyarray&lt; double &gt; &amp;dt_times_dH_minus_dL, xt::pyarray&lt; double &gt; &amp;min_u_bc, xt::pyarray&lt; double &gt; &amp;max_u_bc, xt::pyarray&lt; double &gt; &amp;quantDOFs)=0</argsstring>
        <name>calculateResidual</name>
        <reimplementedby refid="classproteus_1_1cpp_v_o_s_1a811844f4a1cf9807067a5f0ed59ed531">calculateResidual</reimplementedby>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lag_shockCapturing</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shockCapturingDiffusion</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sc_uref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sc_alpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>porosity_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dvos_dt</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>u_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>r_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>degree_polynomial</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof_old</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_m</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_grad_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_m_betaBDF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>edge_based_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_phi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_flux</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cK</declname>
        </param>
        <param>
          <type>double</type>
          <declname>uL</declname>
        </param>
        <param>
          <type>double</type>
          <declname>uR</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numDOFs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NNZ</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_DofLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_DofLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_CellLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_CellLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_CellLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>Cx</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>Cy</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>Cz</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>CTx</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>CTy</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>CTz</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ML</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>delta_x_ij</declname>
        </param>
        <param>
          <type>int</type>
          <declname>LUMPED_MASS_MATRIX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>STABILIZATION_TYPE</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ENTROPY_TYPE</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>fluxMatrix</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>uDotLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>uLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dt_times_dH_minus_dL</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>min_u_bc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>max_u_bc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>quantDOFs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="48" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_v_o_s3_p__base_1ada0da2d421d4058aa9b5b6cbbb93df2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::cppVOS3P_base::calculateJacobian</definition>
        <argsstring>(double dt, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;u_trial_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;u_test_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;u_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_test_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, int nElements_global, double useMetrics, double alphaBDF, int lag_shockCapturing, double shockCapturingDiffusion, const xt::pyarray&lt; double &gt; &amp;q_porosity, xt::pyarray&lt; int &gt; &amp;u_l2g, xt::pyarray&lt; int &gt; &amp;r_l2g, xt::pyarray&lt; double &gt; &amp;elementDiameter, int degree_polynomial, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;velocity, xt::pyarray&lt; double &gt; &amp;q_m_betaBDF, xt::pyarray&lt; double &gt; &amp;cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; double &gt; &amp;globalJacobian, xt::pyarray&lt; double &gt; &amp;delta_x_ij, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_velocity_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_porosity_ext, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; int &gt; &amp;isFluxBoundary_u, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_ext, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_u, int LUMPED_MASS_MATRIX)=0</argsstring>
        <name>calculateJacobian</name>
        <reimplementedby refid="classproteus_1_1cpp_v_o_s_1a8b90ed345c7cb2ad309fbf8c6019916c">calculateJacobian</reimplementedby>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lag_shockCapturing</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shockCapturingDiffusion</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>u_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>r_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>degree_polynomial</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_m_betaBDF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>delta_x_ij</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>LUMPED_MASS_MATRIX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="154" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_v_o_s3_p__base_1ab9a30d0550e23f3e6f9243d3067f9046" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::cppVOS3P_base::FCTStep</definition>
        <argsstring>(int NNZ, int numDOFs, xt::pyarray&lt; double &gt; &amp;lumped_mass_matrix, xt::pyarray&lt; double &gt; &amp;soln, xt::pyarray&lt; double &gt; &amp;solH, xt::pyarray&lt; double &gt; &amp;uLow, xt::pyarray&lt; double &gt; &amp;limited_solution, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_DofLoops, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_DofLoops, xt::pyarray&lt; double &gt; &amp;MassMatrix, xt::pyarray&lt; double &gt; &amp;dt_times_dH_minus_dL, xt::pyarray&lt; double &gt; &amp;min_u_bc, xt::pyarray&lt; double &gt; &amp;max_u_bc, int LUMPED_MASS_MATRIX)=0</argsstring>
        <name>FCTStep</name>
        <reimplementedby refid="classproteus_1_1cpp_v_o_s_1a801d5f75d78d4cb2bacbe5c076410594">FCTStep</reimplementedby>
        <param>
          <type>int</type>
          <declname>NNZ</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numDOFs</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>lumped_mass_matrix</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>soln</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>solH</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>uLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>limited_solution</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_DofLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_DofLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>MassMatrix</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dt_times_dH_minus_dL</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>min_u_bc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>max_u_bc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>LUMPED_MASS_MATRIX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="212" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_v_o_s3_p__base_1ad7c09c9e79b2a2b77a06efb59beb7617" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::cppVOS3P_base::kth_FCT_step</definition>
        <argsstring>(double dt, int num_fct_iter, int NNZ, int numDOFs, xt::pyarray&lt; double &gt; &amp;MC, xt::pyarray&lt; double &gt; &amp;ML, xt::pyarray&lt; double &gt; &amp;soln, xt::pyarray&lt; double &gt; &amp;solLim, xt::pyarray&lt; double &gt; &amp;uDotLow, xt::pyarray&lt; double &gt; &amp;uLow, xt::pyarray&lt; double &gt; &amp;dLow, xt::pyarray&lt; double &gt; &amp;FluxMatrix, xt::pyarray&lt; double &gt; &amp;limitedFlux, xt::pyarray&lt; double &gt; &amp;min_u_bc, xt::pyarray&lt; double &gt; &amp;max_u_bc, double global_min_u, double global_max_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_DofLoops, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_DofLoops)=0</argsstring>
        <name>kth_FCT_step</name>
        <reimplementedby refid="classproteus_1_1cpp_v_o_s_1a92b7e3b1c858d3e1ebbe7c914b4304ba">kth_FCT_step</reimplementedby>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_fct_iter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NNZ</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numDOFs</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>MC</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ML</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>soln</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>solLim</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>uDotLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>uLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>FluxMatrix</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>limitedFlux</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>min_u_bc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>max_u_bc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>global_min_u</declname>
        </param>
        <param>
          <type>double</type>
          <declname>global_max_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_DofLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_DofLoops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="227" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_v_o_s3_p__base_1a74fd24b60a9af82773fc4c5ce0ca99d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::cppVOS3P_base::calculateResidual_entropy_viscosity</definition>
        <argsstring>(double dt, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;u_trial_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;u_test_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;u_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_test_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, int nElements_global, double useMetrics, double alphaBDF, int lag_shockCapturing, double shockCapturingDiffusion, double sc_uref, double sc_alpha, const xt::pyarray&lt; double &gt; &amp;q_porosity, const xt::pyarray&lt; double &gt; &amp;porosity_dof, xt::pyarray&lt; double &gt; &amp;q_dvos_dt, xt::pyarray&lt; int &gt; &amp;u_l2g, xt::pyarray&lt; int &gt; &amp;r_l2g, xt::pyarray&lt; double &gt; &amp;elementDiameter, int degree_polynomial, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;u_dof_old, xt::pyarray&lt; double &gt; &amp;velocity, xt::pyarray&lt; double &gt; &amp;q_m, xt::pyarray&lt; double &gt; &amp;q_u, xt::pyarray&lt; double &gt; &amp;q_grad_u, xt::pyarray&lt; double &gt; &amp;q_m_betaBDF, xt::pyarray&lt; double &gt; &amp;q_dV, xt::pyarray&lt; double &gt; &amp;q_dV_last, xt::pyarray&lt; double &gt; &amp;cfl, xt::pyarray&lt; double &gt; &amp;edge_based_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, int offset_u, int stride_u, xt::pyarray&lt; double &gt; &amp;globalResidual, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_velocity_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_porosity_ext, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; int &gt; &amp;isFluxBoundary_u, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_phi, double epsFact, xt::pyarray&lt; double &gt; &amp;ebqe_u, xt::pyarray&lt; double &gt; &amp;ebqe_flux, double cE, double cK, double uL, double uR, int numDOFs, int NNZ, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_DofLoops, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_DofLoops, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_CellLoops, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_CellLoops, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_CellLoops, xt::pyarray&lt; double &gt; &amp;Cx, xt::pyarray&lt; double &gt; &amp;Cy, xt::pyarray&lt; double &gt; &amp;Cz, xt::pyarray&lt; double &gt; &amp;CTx, xt::pyarray&lt; double &gt; &amp;CTy, xt::pyarray&lt; double &gt; &amp;CTz, xt::pyarray&lt; double &gt; &amp;ML, xt::pyarray&lt; double &gt; &amp;delta_x_ij, int LUMPED_MASS_MATRIX, int STABILIZATION_TYPE, int ENTROPY_TYPE, xt::pyarray&lt; double &gt; &amp;dLow, xt::pyarray&lt; double &gt; &amp;fluxMatrix, xt::pyarray&lt; double &gt; &amp;uDotLow, xt::pyarray&lt; double &gt; &amp;uLow, xt::pyarray&lt; double &gt; &amp;dt_times_dH_minus_dL, xt::pyarray&lt; double &gt; &amp;min_u_bc, xt::pyarray&lt; double &gt; &amp;max_u_bc, xt::pyarray&lt; double &gt; &amp;quantDOFs)=0</argsstring>
        <name>calculateResidual_entropy_viscosity</name>
        <reimplementedby refid="classproteus_1_1cpp_v_o_s_1a97dd6c525863bae2896804f2ee5baab9">calculateResidual_entropy_viscosity</reimplementedby>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lag_shockCapturing</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shockCapturingDiffusion</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sc_uref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sc_alpha</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>porosity_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dvos_dt</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>u_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>r_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>degree_polynomial</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof_old</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_m</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_grad_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_m_betaBDF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_dV_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>edge_based_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_phi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsFact</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_flux</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cE</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cK</declname>
        </param>
        <param>
          <type>double</type>
          <declname>uL</declname>
        </param>
        <param>
          <type>double</type>
          <declname>uR</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numDOFs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>NNZ</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_DofLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_DofLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_CellLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_CellLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_CellLoops</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>Cx</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>Cy</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>Cz</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>CTx</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>CTy</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>CTz</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ML</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>delta_x_ij</declname>
        </param>
        <param>
          <type>int</type>
          <declname>LUMPED_MASS_MATRIX</declname>
        </param>
        <param>
          <type>int</type>
          <declname>STABILIZATION_TYPE</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ENTROPY_TYPE</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>fluxMatrix</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>uDotLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>uLow</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dt_times_dH_minus_dL</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>min_u_bc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>max_u_bc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>quantDOFs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="246" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_v_o_s3_p__base_1a6a222a7180c11351720db75d6efbf8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void proteus::cppVOS3P_base::calculateMassMatrix</definition>
        <argsstring>(double dt, xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;u_trial_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;u_test_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;u_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_test_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, int nElements_global, double useMetrics, double alphaBDF, int lag_shockCapturing, double shockCapturingDiffusion, const xt::pyarray&lt; double &gt; &amp;q_porosity, xt::pyarray&lt; int &gt; &amp;u_l2g, xt::pyarray&lt; int &gt; &amp;r_l2g, xt::pyarray&lt; double &gt; &amp;elementDiameter, int degree_polynomial, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;velocity, xt::pyarray&lt; double &gt; &amp;q_m_betaBDF, xt::pyarray&lt; double &gt; &amp;cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; double &gt; &amp;globalJacobian, xt::pyarray&lt; double &gt; &amp;delta_x_ij, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;ebqe_velocity_ext, const xt::pyarray&lt; double &gt; &amp;ebqe_porosity_ext, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; int &gt; &amp;isFluxBoundary_u, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_ext, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_u, int LUMPED_MASS_MATRIX)=0</argsstring>
        <name>calculateMassMatrix</name>
        <reimplementedby refid="classproteus_1_1cpp_v_o_s_1ab7545076307204040ab950db32587d1b">calculateMassMatrix</reimplementedby>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lag_shockCapturing</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shockCapturingDiffusion</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_porosity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>u_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>r_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>degree_polynomial</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_m_betaBDF</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>delta_x_ij</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity_ext</declname>
        </param>
        <param>
          <type>const xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_porosity_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>LUMPED_MASS_MATRIX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="353" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>proteus::cppVOS3P_base</label>
        <link refid="classproteus_1_1cpp_v_o_s3_p__base"/>
      </node>
      <node id="2">
        <label>proteus::cppVOS&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1cpp_v_o_s"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>proteus::cppVOS3P_base</label>
        <link refid="classproteus_1_1cpp_v_o_s3_p__base"/>
        <childnode refid="2" relation="usage">
          <edgelabel>FluxCorrectionMatrix</edgelabel>
          <edgelabel>Rneg</edgelabel>
          <edgelabel>Rpos</edgelabel>
          <edgelabel>TransportMatrix</edgelabel>
          <edgelabel>TransposeTransportMatrix</edgelabel>
          <edgelabel>boundary_integral</edgelabel>
          <edgelabel>eta</edgelabel>
          <edgelabel>global_entropy_residual</edgelabel>
          <edgelabel>porosity_free_dof</edgelabel>
          <edgelabel>psi</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::valarray&lt; double &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/Users/cekees/proteus/proteus/mprans/VOS3P.h" line="36" column="3" bodyfile="/Users/cekees/proteus/proteus/mprans/VOS3P.h" bodystart="37" bodyend="411"/>
    <listofallmembers>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1ad269d923dd7c499af15a6eb9dc78e42b" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>boundary_integral</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1ada0da2d421d4058aa9b5b6cbbb93df2c" prot="public" virt="pure-virtual"><scope>proteus::cppVOS3P_base</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a6a222a7180c11351720db75d6efbf8fa" prot="public" virt="pure-virtual"><scope>proteus::cppVOS3P_base</scope><name>calculateMassMatrix</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a9ad755f99918fd8e7c591f0a545c7978" prot="public" virt="pure-virtual"><scope>proteus::cppVOS3P_base</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a74fd24b60a9af82773fc4c5ce0ca99d3" prot="public" virt="pure-virtual"><scope>proteus::cppVOS3P_base</scope><name>calculateResidual_entropy_viscosity</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a23b3461683e00e66b8e0bd5c809c139a" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>eta</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1ab9a30d0550e23f3e6f9243d3067f9046" prot="public" virt="pure-virtual"><scope>proteus::cppVOS3P_base</scope><name>FCTStep</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a0c0797e4fc46b8dc8d0354862d6e9316" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>FluxCorrectionMatrix</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1ab8da03261eb87d6e3b02470da281f146" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>global_entropy_residual</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1ad7c09c9e79b2a2b77a06efb59beb7617" prot="public" virt="pure-virtual"><scope>proteus::cppVOS3P_base</scope><name>kth_FCT_step</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1ab3d9b5df1b35a5be853c1a16e1bef7f1" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>porosity_free_dof</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a26bdbe2f7d2dc18cf1b109594fd1607e" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>psi</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a69a2f72196cdd6fd77855bd5a0f93a08" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>Rneg</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a1aec5a376a2afd9414ea170c6ce97181" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>Rpos</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a3823d6d44ebd5ab4c248a5603b441e8b" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>solL</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a7bce486a8d10bdda8e77afed74c026fd" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>TransportMatrix</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1a7d7f7441f53a5eeeca6fc5bbd2be980c" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>TransposeTransportMatrix</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1acb6cf83dfbc98de10840994deb51d93c" prot="public" virt="non-virtual"><scope>proteus::cppVOS3P_base</scope><name>u_free_dof_old</name></member>
      <member refid="classproteus_1_1cpp_v_o_s3_p__base_1acbdc691d5a39a69f6aa71d7646389f11" prot="public" virt="virtual"><scope>proteus::cppVOS3P_base</scope><name>~cppVOS3P_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
