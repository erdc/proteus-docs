<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classproteus_1_1cpp_r_a_n_s3_p_f2_d" kind="class" language="C++" prot="public">
    <compoundname>proteus::cppRANS3PF2D</compoundname>
    <basecompoundref refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base" prot="public" virt="non-virtual">proteus::cppRANS3PF2D_base</basecompoundref>
    <includes refid="_r_a_n_s3_p_f2_d_8h" local="no">/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h</includes>
    <templateparamlist>
      <param>
        <type>class CompKernelType</type>
      </param>
      <param>
        <type>int</type>
        <declname>nSpace</declname>
        <defname>nSpace</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_element</declname>
        <defname>nQuadraturePoints_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_mesh_trial_element</declname>
        <defname>nDOF_mesh_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_trial_element</declname>
        <defname>nDOF_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_test_element</declname>
        <defname>nDOF_test_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_elementBoundary</declname>
        <defname>nQuadraturePoints_elementBoundary</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1af1971c1aec8f6a297e0c26f39d700d1a" prot="public" static="no" mutable="no">
        <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::surrogate_boundaries</definition>
        <argsstring></argsstring>
        <name>surrogate_boundaries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="108" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ae29105b5b383fe426ac032f53ee4c337" prot="public" static="no" mutable="no">
        <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::surrogate_boundary_elements</definition>
        <argsstring></argsstring>
        <name>surrogate_boundary_elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="108" column="40" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a55a9eb20038f5af43eb73b1f1ff86a02" prot="public" static="no" mutable="no">
        <type><ref refid="jf_8h_1ad6a1294cda25bf40114e0b9a56cd0445" kindref="member">std::vector</ref>&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::surrogate_boundary_particle</definition>
        <argsstring></argsstring>
        <name>surrogate_boundary_particle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="108" column="68" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a60dbc9d340befae3fe957f87b17fc556" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::TransportMatrix</definition>
        <argsstring></argsstring>
        <name>TransportMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="109" column="21" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1acd1d94eb882ee07695712d7ad8676810" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::TransposeTransportMatrix</definition>
        <argsstring></argsstring>
        <name>TransposeTransportMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="109" column="37" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a8831d500fea2358b8ab261396b148d66" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; double &gt;</type>
        <definition>std::valarray&lt;double&gt; proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::psi</definition>
        <argsstring></argsstring>
        <name>psi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="109" column="62" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a37c01a28aa8ad6b29cae206ba5c9a100" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::C_sbm</definition>
        <argsstring></argsstring>
        <name>C_sbm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="110" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a1d52d3f53ebd25a66a24ab7ab32ccfff" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::beta_sbm</definition>
        <argsstring></argsstring>
        <name>beta_sbm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="110" column="20" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a366fedaa780c14682f3295d1a0599a27" prot="public" static="no" mutable="no">
        <type><ref refid="classproteus_1_1cpp_hsu_sed_stress" kindref="compound">cppHsuSedStress</ref>&lt; 2 &gt;</type>
        <definition>cppHsuSedStress&lt;2&gt; proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::closure</definition>
        <argsstring></argsstring>
        <name>closure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="111" column="23" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ab4d2392d15f3343c236527d75fa34e63" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_test_X_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_test_X_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="112" column="17" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a80e5400f56f7c96453d64ea714e27eaa" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::nSpace2</definition>
        <argsstring></argsstring>
        <name>nSpace2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="113" column="9" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a3e1ca42e5a01f12ac3b8ee83f72cd102" prot="public" static="no" mutable="no">
        <type>CompKernelType</type>
        <definition>CompKernelType proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ck</definition>
        <argsstring></argsstring>
        <name>ck</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="114" column="22" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a990a76c4e77fed9102655a38f42e7ee4" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1ac61dbf98c43ac13d15c02ba156dc2ef3" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 1, nQuadraturePoints_element, nQuadraturePoints_elementBoundary &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,1,nQuadraturePoints_element,nQuadraturePoints_elementBoundary&gt; proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::gf</definition>
        <argsstring></argsstring>
        <name>gf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="115" column="28" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a6e83fcaa95f03a8653f44df989f4fc6c" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1ac61dbf98c43ac13d15c02ba156dc2ef3" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 1, nQuadraturePoints_element, nQuadraturePoints_elementBoundary &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,1,nQuadraturePoints_element,nQuadraturePoints_elementBoundary&gt; proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::gf_s</definition>
        <argsstring></argsstring>
        <name>gf_s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="116" column="28" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aee427498fff56cb097f778da00be9542" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::cppRANS3PF2D</definition>
        <argsstring>()</argsstring>
        <name>cppRANS3PF2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="117" column="5" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="117" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aa26bc945f3a078231cdbc3f01c4b9f72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::setSedClosure</definition>
        <argsstring>(double aDarcy, double betaForch, double grain, double packFraction, double packMargin, double maxFraction, double frFraction, double sigmaC, double C3e, double C4e, double eR, double fContact, double mContact, double nContact, double angFriction, double vos_limiter, double mu_fr_limiter)</argsstring>
        <name>setSedClosure</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1ab4e742e47bdcd7ff301235bd4138a497">setSedClosure</reimplements>
        <param>
          <type>double</type>
          <declname>aDarcy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>betaForch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>grain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>packFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>packMargin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>frFraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaC</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C3e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C4e</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eR</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nContact</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angFriction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vos_limiter</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mu_fr_limiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="152" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="152" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a4cbd34a25151847bccceb3a1ed7e46e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::Dot</definition>
        <argsstring>(const double vec1[nSpace], const double vec2[nSpace])</argsstring>
        <name>Dot</name>
        <param>
          <type>const double</type>
          <declname>vec1</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>vec2</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="189" column="21" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="189" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a6e17ca1a288097ff9c1161795f6a5395" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateTangentialGradient</definition>
        <argsstring>(const double normal[nSpace], const double vel_grad[nSpace], double vel_tgrad[nSpace])</argsstring>
        <name>calculateTangentialGradient</name>
        <param>
          <type>const double</type>
          <declname>normal</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>vel_grad</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>vel_tgrad</declname>
          <array>[nSpace]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="198" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aa98b9bf3ee9c1af951dd6fd5fd0de02f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateCoefficients</definition>
        <argsstring>(const double eps_rho, const double eps_mu, const double eps_s, const double sigma, const double rho_0, double nu_0, const double rho_1, double nu_1, const double h_e, const double smagorinskyConstant, const int turbulenceClosureModel, const double g[nSpace], const double useVF, const double &amp;vf, const double &amp;phi, const double n[nSpace], const double distance_to_omega_solid, const double &amp;kappa, const double porosity, const double &amp;p, const double grad_p[nSpace], const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], const double &amp;u, const double &amp;v, const double &amp;w, const double &amp;uStar, const double &amp;vStar, const double &amp;wStar, double &amp;eddy_viscosity, double &amp;mom_u_acc, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_v, double &amp;mom_w_acc, double &amp;dmom_w_acc_w, double mass_adv[nSpace], double dmass_adv_u[nSpace], double dmass_adv_v[nSpace], double dmass_adv_w[nSpace], double mom_u_adv[nSpace], double dmom_u_adv_u[nSpace], double dmom_u_adv_v[nSpace], double dmom_u_adv_w[nSpace], double mom_v_adv[nSpace], double dmom_v_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_v_adv_w[nSpace], double mom_w_adv[nSpace], double dmom_w_adv_u[nSpace], double dmom_w_adv_v[nSpace], double dmom_w_adv_w[nSpace], double mom_uu_diff_ten[nSpace], double mom_vv_diff_ten[nSpace], double mom_ww_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double &amp;mom_u_ham, double dmom_u_ham_grad_p[nSpace], double dmom_u_ham_grad_u[nSpace], double &amp;mom_v_ham, double dmom_v_ham_grad_p[nSpace], double dmom_v_ham_grad_v[nSpace], double &amp;mom_w_ham, double dmom_w_ham_grad_p[nSpace], double dmom_w_ham_grad_w[nSpace], double &amp;rhoSave, double &amp;nuSave, int KILL_PRESSURE_TERM, int MULTIPLY_EXTERNAL_FORCE_BY_DENSITY, double forcex, double forcey, double forcez, int MATERIAL_PARAMETERS_AS_FUNCTION, double density_as_function, double dynamic_viscosity_as_function, int USE_SBM, double x, double y, double z, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, int INT_BY_PARTS_PRESSURE)</argsstring>
        <name>evaluateCoefficients</name>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>h_e</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>smagorinskyConstant</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>g</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>distance_to_omega_solid</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>kappa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_w_acc_w</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_p</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>rhoSave</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>nuSave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>KILL_PRESSURE_TERM</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MULTIPLY_EXTERNAL_FORCE_BY_DENSITY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcex</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcey</declname>
        </param>
        <param>
          <type>double</type>
          <declname>forcez</declname>
        </param>
        <param>
          <type>int</type>
          <declname>MATERIAL_PARAMETERS_AS_FUNCTION</declname>
        </param>
        <param>
          <type>double</type>
          <declname>density_as_function</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dynamic_viscosity_as_function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>USE_SBM</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>INT_BY_PARTS_PRESSURE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="208" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="208" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1af5c703a916aa7c738bb993cce16bd79e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateDarcyForchheimerTerms_Ergun</definition>
        <argsstring>(const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, double nu_t, const double useVF, const double vf, const double phi, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double phi_s, const double u_s, const double v_s, const double w_s, const double uStar_s, const double vStar_s, const double wStar_s, double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace], double gradC_x, double gradC_y, double gradC_z)</argsstring>
        <name>updateDarcyForchheimerTerms_Ergun</name>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu_t</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar_s</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>gradC_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradC_y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gradC_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="524" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="524" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1adf33935108314f7456a900a381873a8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateSolidParticleTerms</definition>
        <argsstring>(bool element_owned, const double particle_nitsche, const double dV, const int nParticles, const int sd_offset, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, const double porosity, const double penalty, const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double x, const double y, const double z, const double p, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source, double dmom_u_source[nSpace], double dmom_v_source[nSpace], double dmom_w_source[nSpace], double mom_u_adv[nSpace], double mom_v_adv[nSpace], double mom_w_adv[nSpace], double dmom_u_adv_u[nSpace], double dmom_v_adv_v[nSpace], double dmom_w_adv_w[nSpace], double &amp;mom_u_ham, double dmom_u_ham_grad_u[nSpace], double &amp;mom_v_ham, double dmom_v_ham_grad_v[nSpace], double &amp;mom_w_ham, double dmom_w_ham_grad_w[nSpace], double *particle_netForces, double *particle_netMoments, double *particle_surfaceArea)</argsstring>
        <name>updateSolidParticleTerms</name>
        <param>
          <type>bool</type>
          <declname>element_owned</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>particle_nitsche</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dV</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sd_offset</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_source</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_w_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_adv_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_ham_grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_ham_grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_ham</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_w_ham_grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netMoments</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_surfaceArea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="604" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="604" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1afb10993194275c984618577c0a0920bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::compute_force_around_solid</definition>
        <argsstring>(bool element_owned, const double dV, const int nParticles, const int sd_offset, double *particle_signed_distances, double *particle_signed_distance_normals, double *particle_velocities, double *particle_centroids, int use_ball_as_particle, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, const double penalty, const double alpha, const double beta, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double x, const double y, const double z, const double p, const double u, const double v, const double w, const double uStar, const double vStar, const double wStar, const double eps_s, const double grad_u[nSpace], const double grad_v[nSpace], const double grad_w[nSpace], double *particle_netForces, double *particle_netMoments)</argsstring>
        <name>compute_force_around_solid</name>
        <param>
          <type>bool</type>
          <declname>element_owned</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dV</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nParticles</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sd_offset</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distances</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_signed_distance_normals</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_velocities</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_centroids</declname>
        </param>
        <param>
          <type>int</type>
          <declname>use_ball_as_particle</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>uStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>wStar</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_w</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netForces</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>particle_netMoments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="787" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="787" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a17b9438705ec0446a86c12630403ffca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateCFL</definition>
        <argsstring>(const double &amp;hFactor, const double &amp;elementDiameter, const double &amp;dm, const double df[nSpace], double &amp;cfl)</argsstring>
        <name>calculateCFL</name>
        <param>
          <type>const double &amp;</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>df</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="900" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="900" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a868acec924e0d14f54c16595974fc6b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateTurbulenceClosure</definition>
        <argsstring>(const int turbulenceClosureModel, const double eps_rho, const double eps_mu, const double rho_0, const double nu_0, const double rho_1, const double nu_1, const double useVF, const double vf, const double phi, const double porosity, const double eddy_visc_coef_0, const double turb_var_0, const double turb_var_1, const double turb_grad_0[nSpace], double &amp;eddy_viscosity, double mom_uu_diff_ten[nSpace], double mom_vv_diff_ten[nSpace], double mom_ww_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_uw_diff_ten[1], double mom_vu_diff_ten[1], double mom_vw_diff_ten[1], double mom_wu_diff_ten[1], double mom_wv_diff_ten[1], double &amp;mom_u_source, double &amp;mom_v_source, double &amp;mom_w_source)</argsstring>
        <name>updateTurbulenceClosure</name>
        <param>
          <type>const int</type>
          <declname>turbulenceClosureModel</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eps_mu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>nu_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>useVF</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>vf</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>eddy_visc_coef_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_var_0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_var_1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>turb_grad_0</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>eddy_viscosity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uu_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vv_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_ww_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vw_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_wv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_w_source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="919" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="919" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a7dfdc9f8efae78c369619dd2a0deb272" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;hFactor, const double &amp;elementDiameter, const double &amp;dmt, const double &amp;dm, const double df[nSpace], const double &amp;a, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>hFactor</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dmt</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>df</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1015" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1015" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ad0d7f96a02775053d56b5cc752dc7f32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;Ct_sge, const double &amp;Cd_sge, const double G[nSpace *nSpace], const double &amp;G_dd_G, const double &amp;tr_G, const double &amp;A0, const double Ai[nSpace], const double &amp;Kij, const double &amp;pfac, double &amp;tau_v, double &amp;tau_p, double &amp;q_cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Cd_sge</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>G</declname>
          <array>[nSpace *nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>G_dd_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tr_G</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>A0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>Ai</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>Kij</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pfac</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1043" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1043" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a91856e5ad5ae41de0bd631eb6e636405" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double &amp;pdeResidualP, const double &amp;pdeResidualU, const double &amp;pdeResidualV, const double &amp;pdeResidualW, double &amp;subgridErrorP, double &amp;subgridErrorU, double &amp;subgridErrorV, double &amp;subgridErrorW)</argsstring>
        <name>calculateSubgridError_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualP</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualU</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualV</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>pdeResidualW</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorP</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorU</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorV</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>subgridErrorW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1064" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1064" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a5fb7376817242960ffad3186847a08d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridErrorDerivatives_tauRes</definition>
        <argsstring>(const double &amp;tau_p, const double &amp;tau_v, const double dpdeResidualP_du[nDOF_trial_element], const double dpdeResidualP_dv[nDOF_trial_element], const double dpdeResidualP_dw[nDOF_trial_element], const double dpdeResidualU_dp[nDOF_trial_element], const double dpdeResidualU_du[nDOF_trial_element], const double dpdeResidualV_dp[nDOF_trial_element], const double dpdeResidualV_dv[nDOF_trial_element], const double dpdeResidualW_dp[nDOF_trial_element], const double dpdeResidualW_dw[nDOF_trial_element], double dsubgridErrorP_du[nDOF_trial_element], double dsubgridErrorP_dv[nDOF_trial_element], double dsubgridErrorP_dw[nDOF_trial_element], double dsubgridErrorU_dp[nDOF_trial_element], double dsubgridErrorU_du[nDOF_trial_element], double dsubgridErrorV_dp[nDOF_trial_element], double dsubgridErrorV_dv[nDOF_trial_element], double dsubgridErrorW_dp[nDOF_trial_element], double dsubgridErrorW_dw[nDOF_trial_element])</argsstring>
        <name>calculateSubgridErrorDerivatives_tauRes</name>
        <param>
          <type>const double &amp;</type>
          <declname>tau_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualP_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualU_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualV_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>dpdeResidualW_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorP_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorU_du</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorV_dv</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dp</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dsubgridErrorW_dw</declname>
          <array>[nDOF_trial_element]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1083" column="19" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1083" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a2b469d43c6be05723e9f9c7e0077c51b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFlux</definition>
        <argsstring>(const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double &amp;bc_oneByRho, const double n[nSpace], const double &amp;porosity, const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double &amp;bc_w, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;flux_mass, double &amp;flux_umom, double &amp;flux_vmom, double &amp;flux_wmom, double *velocity_star, double *velocity)</argsstring>
        <name>exteriorNumericalAdvectiveFlux</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_mass</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_umom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_vmom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_wmom</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity_star</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1124" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1124" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a541e58848dacd885e9f09921203e4321" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFluxDerivatives</definition>
        <argsstring>(const int &amp;isDOFBoundary_p, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isDOFBoundary_w, const int &amp;isFluxBoundary_p, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const int &amp;isFluxBoundary_w, const double &amp;oneByRho, const double n[nSpace], const double &amp;porosity, const double &amp;bc_p, const double &amp;bc_u, const double &amp;bc_v, const double &amp;bc_w, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double bc_f_wmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;bc_flux_wmom, const double &amp;p, const double &amp;u, const double &amp;v, const double &amp;w, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double f_wmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_mass_dw[nSpace], const double df_umom_dp[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_umom_dw[nSpace], const double df_vmom_dp[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], const double df_vmom_dw[nSpace], const double df_wmom_dp[nSpace], const double df_wmom_du[nSpace], const double df_wmom_dv[nSpace], const double df_wmom_dw[nSpace], double &amp;dflux_mass_du, double &amp;dflux_mass_dv, double &amp;dflux_mass_dw, double &amp;dflux_umom_dp, double &amp;dflux_umom_du, double &amp;dflux_umom_dv, double &amp;dflux_umom_dw, double &amp;dflux_vmom_dp, double &amp;dflux_vmom_du, double &amp;dflux_vmom_dv, double &amp;dflux_vmom_dw, double &amp;dflux_wmom_dp, double &amp;dflux_wmom_du, double &amp;dflux_wmom_dv, double &amp;dflux_wmom_dw, double *velocity_star)</argsstring>
        <name>exteriorNumericalAdvectiveFluxDerivatives</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_w</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_w</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>oneByRho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>porosity</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_wmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_wmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dp</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_wmom_dw</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dw</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dp</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_wmom_dw</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity_star</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1261" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1261" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ab8933e57b333a8ec68b09e1616e08931" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalDiffusiveFlux</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *bc_a, const double &amp;bc_u, const double &amp;bc_flux, double *a, const double grad_potential[nSpace], const double &amp;u, const double &amp;penalty, double &amp;flux)</argsstring>
        <name>exteriorNumericalDiffusiveFlux</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_potential</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1425" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1425" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a1533d3214757e8b1a56ad8e1132ac9ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ExteriorNumericalDiffusiveFluxJacobian</definition>
        <argsstring>(const double &amp;eps, const double &amp;phi, int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isFluxBoundary, const double n[nSpace], double *a, const double &amp;v, const double grad_v[nSpace], const double &amp;penalty)</argsstring>
        <name>ExteriorNumericalDiffusiveFluxJacobian</name>
        <param>
          <type>const double &amp;</type>
          <declname>eps</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1473" column="16" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1473" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ab699013e5acb6166a1c359b59da08b17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_symmetric_gradient_dot_vec</definition>
        <argsstring>(const double *grad_u, const double *grad_v, const double *n, double res[2])</argsstring>
        <name>get_symmetric_gradient_dot_vec</name>
        <param>
          <type>const double *</type>
          <declname>grad_u</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>grad_v</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>res</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1505" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1505" bodyend="1511"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aada7d0cc8576fd3da3bd8ab161c25c4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_cross_product</definition>
        <argsstring>(const double *u, const double *v)</argsstring>
        <name>get_cross_product</name>
        <param>
          <type>const double *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1512" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1512" bodyend="1515"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a9bc8bb207169ef07b5f65b5301c5a4c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_dot_product</definition>
        <argsstring>(const double *u, const double *v)</argsstring>
        <name>get_dot_product</name>
        <param>
          <type>const double *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1516" column="14" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1516" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a33f84b54bffe9455c6fea9aad79579f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_distance_to_ball</definition>
        <argsstring>(int n_balls, double *ball_center, double *ball_radius, double x, double y, double z, double &amp;distance)</argsstring>
        <name>get_distance_to_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1520" column="11" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1520" bodyend="1538"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1adb0cb565807bc1cca1232e5644b1a08d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_distance_to_ith_ball</definition>
        <argsstring>(int n_balls, double *ball_center, double *ball_radius, int I, double x, double y, double z, double &amp;distance)</argsstring>
        <name>get_distance_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1539" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1539" bodyend="1548"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aaccb671f81313ba063a50a0a67b92565" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_normal_to_ith_ball</definition>
        <argsstring>(int n_balls, double *ball_center, double *ball_radius, int I, double x, double y, double z, double &amp;nx, double &amp;ny)</argsstring>
        <name>get_normal_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1549" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1549" bodyend="1560"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aa0ce40498d137f854725459b43d71343" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::get_velocity_to_ith_ball</definition>
        <argsstring>(int n_balls, double *ball_center, double *ball_radius, double *ball_velocity, double *ball_angular_velocity, int I, double x, double y, double z, double &amp;vx, double &amp;vy)</argsstring>
        <name>get_velocity_to_ith_ball</name>
        <param>
          <type>int</type>
          <declname>n_balls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_center</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_radius</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_velocity</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ball_angular_velocity</declname>
        </param>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1561" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1561" bodyend="1569"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1afe5ce62a6cb88c9b7462b25e433dc417" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateResidual</definition>
        <argsstring>(arguments_dict &amp;args, bool useExact)</argsstring>
        <name>calculateResidual</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a0c7239d7343974cd07ef6cbc50fe42de">calculateResidual</reimplements>
        <param>
          <type><ref refid="structproteus_1_1arguments__dict" kindref="compound">arguments_dict</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="1571" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="1571" bodyend="4662"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1af70d3fe1047e0b617404c4aabb1d2286" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateJacobian</definition>
        <argsstring>(arguments_dict &amp;args, bool useExact)</argsstring>
        <name>calculateJacobian</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a947685ff9b9d15ea407f7fc36aaaf92f">calculateJacobian</reimplements>
        <param>
          <type><ref refid="structproteus_1_1arguments__dict" kindref="compound">arguments_dict</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExact</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="4664" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="4664" bodyend="6975"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1addaa90f8d484e55a4645e705f8b2c8ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateVelocityAverage</definition>
        <argsstring>(arguments_dict &amp;args)</argsstring>
        <name>calculateVelocityAverage</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a50ddb60088e80890cbf731f18b58230c">calculateVelocityAverage</reimplements>
        <param>
          <type><ref refid="structproteus_1_1arguments__dict" kindref="compound">arguments_dict</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="6977" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="6977" bodyend="7149"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a0fcedd86172ff6308d2ff6e28067b074" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::getBoundaryDOFs</definition>
        <argsstring>(arguments_dict &amp;args)</argsstring>
        <name>getBoundaryDOFs</name>
        <reimplements refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1abf6a2ff0f08163562224e04677933f18">getBoundaryDOFs</reimplements>
        <param>
          <type><ref refid="structproteus_1_1arguments__dict" kindref="compound">arguments_dict</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="7152" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="7152" bodyend="7238"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>proteus::cppRANS3PF2D_base</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base"/>
      </node>
      <node id="1">
        <label>proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>proteus::cppRANS3PF2D_base</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base"/>
        <childnode refid="3" relation="usage">
          <edgelabel>TransportMatrix</edgelabel>
          <edgelabel>TransposeTransportMatrix</edgelabel>
          <edgelabel>den_hi</edgelabel>
          <edgelabel>uStar_gamma</edgelabel>
          <edgelabel>uStar_hi</edgelabel>
          <edgelabel>uStar_min_hiHe</edgelabel>
          <edgelabel>uStar_psi</edgelabel>
          <edgelabel>vStar_gamma</edgelabel>
          <edgelabel>vStar_hi</edgelabel>
          <edgelabel>vStar_min_hiHe</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>proteus::cppRANS3PF2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>closure</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>TransportMatrix</edgelabel>
          <edgelabel>TransposeTransportMatrix</edgelabel>
          <edgelabel>psi</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>surrogate_boundaries</edgelabel>
          <edgelabel>surrogate_boundary_elements</edgelabel>
          <edgelabel>surrogate_boundary_particle</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>gf</edgelabel>
          <edgelabel>gf_s</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>proteus::cppHsuSedStress&lt; 2 &gt;</label>
        <link refid="classproteus_1_1cpp_hsu_sed_stress"/>
      </node>
      <node id="3">
        <label>std::valarray&lt; double &gt;</label>
      </node>
      <node id="6">
        <label>equivalent_polynomials::GeneralizedFunctions_mix&lt; nSpace, 1, nQuadraturePoints_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classequivalent__polynomials_1_1_generalized_functions__mix"/>
      </node>
      <node id="5">
        <label>std::vector&lt; int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" line="105" column="5" bodyfile="/Users/cekees/proteus/proteus/mprans/RANS3PF2D.h" bodystart="106" bodyend="7239"/>
    <listofallmembers>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a1d52d3f53ebd25a66a24ab7ab32ccfff" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>beta_sbm</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a37c01a28aa8ad6b29cae206ba5c9a100" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>C_sbm</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a17b9438705ec0446a86c12630403ffca" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>calculateCFL</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1af70d3fe1047e0b617404c4aabb1d2286" prot="public" virt="virtual"><scope>proteus::cppRANS3PF2D</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1afe5ce62a6cb88c9b7462b25e433dc417" prot="public" virt="virtual"><scope>proteus::cppRANS3PF2D</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a7dfdc9f8efae78c369619dd2a0deb272" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ad0d7f96a02775053d56b5cc752dc7f32" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a91856e5ad5ae41de0bd631eb6e636405" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>calculateSubgridError_tauRes</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a5fb7376817242960ffad3186847a08d7" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>calculateSubgridErrorDerivatives_tauRes</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a6e17ca1a288097ff9c1161795f6a5395" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>calculateTangentialGradient</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1addaa90f8d484e55a4645e705f8b2c8ad" prot="public" virt="virtual"><scope>proteus::cppRANS3PF2D</scope><name>calculateVelocityAverage</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a3e1ca42e5a01f12ac3b8ee83f72cd102" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>ck</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a366fedaa780c14682f3295d1a0599a27" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>closure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1afb10993194275c984618577c0a0920bb" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>compute_force_around_solid</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aee427498fff56cb097f778da00be9542" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>cppRANS3PF2D</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a2fd76e568ca8566fa7202850cf45b9ad" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>den_hi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a4cbd34a25151847bccceb3a1ed7e46e4" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>Dot</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aa98b9bf3ee9c1af951dd6fd5fd0de02f" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>evaluateCoefficients</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a2b469d43c6be05723e9f9c7e0077c51b" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>exteriorNumericalAdvectiveFlux</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a541e58848dacd885e9f09921203e4321" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>exteriorNumericalAdvectiveFluxDerivatives</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ab8933e57b333a8ec68b09e1616e08931" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>exteriorNumericalDiffusiveFlux</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a1533d3214757e8b1a56ad8e1132ac9ea" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>ExteriorNumericalDiffusiveFluxJacobian</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aada7d0cc8576fd3da3bd8ab161c25c4c" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>get_cross_product</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a33f84b54bffe9455c6fea9aad79579f0" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>get_distance_to_ball</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1adb0cb565807bc1cca1232e5644b1a08d" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>get_distance_to_ith_ball</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a9bc8bb207169ef07b5f65b5301c5a4c2" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>get_dot_product</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aaccb671f81313ba063a50a0a67b92565" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>get_normal_to_ith_ball</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ab699013e5acb6166a1c359b59da08b17" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>get_symmetric_gradient_dot_vec</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aa0ce40498d137f854725459b43d71343" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>get_velocity_to_ith_ball</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a0fcedd86172ff6308d2ff6e28067b074" prot="public" virt="virtual"><scope>proteus::cppRANS3PF2D</scope><name>getBoundaryDOFs</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a990a76c4e77fed9102655a38f42e7ee4" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>gf</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a6e83fcaa95f03a8653f44df989f4fc6c" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>gf_s</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ab4d2392d15f3343c236527d75fa34e63" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>nDOF_test_X_trial_element</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a80e5400f56f7c96453d64ea714e27eaa" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>nSpace2</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a8831d500fea2358b8ab261396b148d66" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>psi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1aa26bc945f3a078231cdbc3f01c4b9f72" prot="public" virt="virtual"><scope>proteus::cppRANS3PF2D</scope><name>setSedClosure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1af1971c1aec8f6a297e0c26f39d700d1a" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>surrogate_boundaries</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1ae29105b5b383fe426ac032f53ee4c337" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>surrogate_boundary_elements</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a55a9eb20038f5af43eb73b1f1ff86a02" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>surrogate_boundary_particle</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a60dbc9d340befae3fe957f87b17fc556" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>TransportMatrix</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1acd1d94eb882ee07695712d7ad8676810" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>TransposeTransportMatrix</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1af5c703a916aa7c738bb993cce16bd79e" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>updateDarcyForchheimerTerms_Ergun</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1adf33935108314f7456a900a381873a8e" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>updateSolidParticleTerms</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d_1a868acec924e0d14f54c16595974fc6b6" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>updateTurbulenceClosure</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1ae8b3878216a48e29e2fbf3b993980d55" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>uStar_gamma</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1ac2e6eb45cbc53bbe351ad0c600a34d9b" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>uStar_hi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a93998c2ecf0ddccbace1913ca186c325" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>uStar_min_hiHe</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a254defd8b58c5e8462c2d68faebd85bf" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>uStar_psi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a84820551f9978c17d2ac88995c1f3913" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>vStar_gamma</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a19ca3412e8482fa0bc69327da4b28122" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>vStar_hi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a22641217e3a13e516a7bf29232e5a5b7" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>vStar_min_hiHe</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1ac215744017c70eed3289a8f8486de309" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>vStar_psi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1ae9cef48c1236142cafb374077eb5f4ec" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>wStar_gamma</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a29d888aa2ec39e77e07e18dce09e4877" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>wStar_hi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1adf1b0862eabc9a707eb17fd6fd78acf4" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>wStar_min_hiHe</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a061b62af455d52facda87532fbf4ca88" prot="public" virt="non-virtual"><scope>proteus::cppRANS3PF2D</scope><name>wStar_psi</name></member>
      <member refid="classproteus_1_1cpp_r_a_n_s3_p_f2_d__base_1a91b336caf0dc8f71b3efbb51675724c6" prot="public" virt="virtual"><scope>proteus::cppRANS3PF2D</scope><name>~cppRANS3PF2D_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
