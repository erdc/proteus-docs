<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classproteus_1_1_s_w2_d" kind="class" language="C++" prot="public">
    <compoundname>proteus::SW2D</compoundname>
    <basecompoundref refid="classproteus_1_1_s_w2_d__base" prot="public" virt="non-virtual">proteus::SW2D_base</basecompoundref>
    <includes refid="_s_w2_d_8h" local="no">/Users/cekees/proteus/proteus/mprans/SW2D.h</includes>
    <templateparamlist>
      <param>
        <type>class CompKernelType</type>
      </param>
      <param>
        <type>int</type>
        <declname>nSpace</declname>
        <defname>nSpace</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_element</declname>
        <defname>nQuadraturePoints_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_mesh_trial_element</declname>
        <defname>nDOF_mesh_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_trial_element</declname>
        <defname>nDOF_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_test_element</declname>
        <defname>nDOF_test_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_elementBoundary</declname>
        <defname>nQuadraturePoints_elementBoundary</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classproteus_1_1_s_w2_d_1aba57ffdd60ffd8abd9419e5d9866dbf3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_test_X_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_test_X_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="464" column="15" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1_s_w2_d_1a11528b4193ce34ad3f2493530fece980" prot="public" static="no" mutable="no">
        <type>CompKernelType</type>
        <definition>CompKernelType proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ck</definition>
        <argsstring></argsstring>
        <name>ck</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="465" column="20" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1a062d9159fc3b7d73b22d2dffe633d666" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::SW2D</definition>
        <argsstring>()</argsstring>
        <name>SW2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="466" column="5" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="466" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1aefc51adcf3505de0a2b179f233fdf220" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::evaluateCoefficients</definition>
        <argsstring>(const double nu, const double g, const double grad_b[nSpace], const double &amp;h, const double &amp;u, const double &amp;v, double &amp;mass_acc, double &amp;dmass_acc_h, double &amp;mom_u_acc, double &amp;dmom_u_acc_h, double &amp;dmom_u_acc_u, double &amp;mom_v_acc, double &amp;dmom_v_acc_h, double &amp;dmom_v_acc_v, double mass_adv[nSpace], double dmass_adv_h[nSpace], double dmass_adv_u[nSpace], double dmass_adv_v[nSpace], double mom_u_adv[nSpace], double dmom_u_adv_h[nSpace], double dmom_u_adv_u[nSpace], double dmom_u_adv_v[nSpace], double mom_v_adv[nSpace], double dmom_v_adv_h[nSpace], double dmom_v_adv_u[nSpace], double dmom_v_adv_v[nSpace], double mom_u_diff_ten[nSpace], double mom_v_diff_ten[nSpace], double mom_uv_diff_ten[1], double mom_vu_diff_ten[1], double &amp;mom_u_source, double &amp;dmom_u_source_h, double &amp;mom_v_source, double &amp;dmom_v_source_h)</argsstring>
        <name>evaluateCoefficients</name>
        <param>
          <type>const double</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_b</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mass_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmass_acc_h</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_h</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_acc_u</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_acc</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_h</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_acc_v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mass_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_h</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmass_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_h</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_u_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_adv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_h</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>dmom_v_adv_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_u_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_v_diff_ten</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_uv_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double</type>
          <declname>mom_vu_diff_ten</declname>
          <array>[1]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_u_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_u_source_h</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>mom_v_source</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dmom_v_source_h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="481" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="481" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1abe30e480bf801e2514e18c0a4650905e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;elementDiameter, const double &amp;nu, const double &amp;g, const double &amp;h, const double &amp;u, const double &amp;v, double tau[9], double &amp;cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tau</declname>
          <array>[9]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="590" column="10" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="590" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1a4833c7bcf5d68c327f4eff218e855bf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau_supg</definition>
        <argsstring>(const double &amp;elementDiameter, const double &amp;nu, const double &amp;g, const double &amp;h, const double &amp;u, const double &amp;v, const double &amp;alpha, const double &amp;area, double tau_x[9], double tau_y[9], double &amp;cfl)</argsstring>
        <name>calculateSubgridError_tau_supg</name>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tau_x</declname>
          <array>[9]</array>
        </param>
        <param>
          <type>double</type>
          <declname>tau_y</declname>
          <array>[9]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="758" column="10" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="758" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1ab573b3bfeaa7694d3a2295b3985d9919" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFlux</definition>
        <argsstring>(const int &amp;isDOFBoundary_h, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isFluxBoundary_h, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const double n[nSpace], const double &amp;bc_h, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;h, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double df_mass_dh[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_umom_dh[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_vmom_dh[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], double &amp;flux_mass, double &amp;flux_umom, double &amp;flux_vmom, double *velocity)</argsstring>
        <name>exteriorNumericalAdvectiveFlux</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_h</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_h</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_h</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dh</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dh</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dh</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_mass</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_umom</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux_vmom</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="810" column="12" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="810" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1aebbc3545cf1686aac576cd60cee4436f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFluxDerivatives</definition>
        <argsstring>(const int &amp;isDOFBoundary_h, const int &amp;isDOFBoundary_u, const int &amp;isDOFBoundary_v, const int &amp;isFluxBoundary_h, const int &amp;isFluxBoundary_u, const int &amp;isFluxBoundary_v, const double n[nSpace], const double &amp;bc_h, const double bc_f_mass[nSpace], const double bc_f_umom[nSpace], const double bc_f_vmom[nSpace], const double &amp;bc_flux_mass, const double &amp;bc_flux_umom, const double &amp;bc_flux_vmom, const double &amp;h, const double f_mass[nSpace], const double f_umom[nSpace], const double f_vmom[nSpace], const double df_mass_du[nSpace], const double df_mass_dv[nSpace], const double df_umom_dh[nSpace], const double df_umom_du[nSpace], const double df_umom_dv[nSpace], const double df_vmom_dh[nSpace], const double df_vmom_du[nSpace], const double df_vmom_dv[nSpace], double &amp;dflux_mass_dh, double &amp;dflux_mass_du, double &amp;dflux_mass_dv, double &amp;dflux_umom_dh, double &amp;dflux_umom_du, double &amp;dflux_umom_dv, double &amp;dflux_vmom_dh, double &amp;dflux_vmom_du, double &amp;dflux_vmom_dv)</argsstring>
        <name>exteriorNumericalAdvectiveFluxDerivatives</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_h</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_h</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_h</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>bc_f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_mass</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_umom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_vmom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f_mass</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_umom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>f_vmom</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_mass_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dh</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_umom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dh</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_du</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>df_vmom_dv</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dh</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_mass_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dh</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_umom_dv</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dh</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_du</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux_vmom_dv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="940" column="10" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="940" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1a590c785573fb064360cb47a86435cc07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateResidual</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;h_trial_ref, xt::pyarray&lt; double &gt; &amp;h_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;h_test_ref, xt::pyarray&lt; double &gt; &amp;h_grad_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;h_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;h_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;h_test_trace_ref, xt::pyarray&lt; double &gt; &amp;h_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double nu, double g, double shockCapturingCoefficient, xt::pyarray&lt; int &gt; &amp;h_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;b_dof, xt::pyarray&lt; double &gt; &amp;h_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;h_dof_sge, xt::pyarray&lt; double &gt; &amp;u_dof_sge, xt::pyarray&lt; double &gt; &amp;v_dof_sge, xt::pyarray&lt; double &gt; &amp;q_mass_acc, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc, xt::pyarray&lt; double &gt; &amp;q_mass_adv, xt::pyarray&lt; double &gt; &amp;q_mass_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_h, xt::pyarray&lt; double &gt; &amp;q_numDiff_u, xt::pyarray&lt; double &gt; &amp;q_numDiff_v, xt::pyarray&lt; double &gt; &amp;q_numDiff_h_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, int offset_h, int offset_u, int offset_v, int stride_h, int stride_u, int stride_v, xt::pyarray&lt; double &gt; &amp;globalResidual, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_h, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_h, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; double &gt; &amp;ebqe_bc_h_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; &amp;q_velocity, xt::pyarray&lt; double &gt; &amp;ebqe_velocity, xt::pyarray&lt; double &gt; &amp;flux, xt::pyarray&lt; double &gt; &amp;elementResidual_h_save)</argsstring>
        <name>calculateResidual</name>
        <reimplements refid="classproteus_1_1_s_w2_d__base_1a77491d5d560ab848f91047cb3f28c630">calculateResidual</reimplements>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shockCapturingCoefficient</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>h_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>b_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_adv</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_h_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_h_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementResidual_h_save</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="1156" column="10" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="1156" bodyend="2093"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1a027afa6b76683e72eaae44bad62165aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateResidual_supg</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;h_trial_ref, xt::pyarray&lt; double &gt; &amp;h_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;h_test_ref, xt::pyarray&lt; double &gt; &amp;h_grad_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;h_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;h_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;h_test_trace_ref, xt::pyarray&lt; double &gt; &amp;h_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double nu, double g, double shockCapturingCoefficient, xt::pyarray&lt; int &gt; &amp;h_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;b_dof, xt::pyarray&lt; double &gt; &amp;h_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;h_dof_sge, xt::pyarray&lt; double &gt; &amp;u_dof_sge, xt::pyarray&lt; double &gt; &amp;v_dof_sge, xt::pyarray&lt; double &gt; &amp;q_mass_acc, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc, xt::pyarray&lt; double &gt; &amp;q_mass_adv, xt::pyarray&lt; double &gt; &amp;q_mass_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_h, xt::pyarray&lt; double &gt; &amp;q_numDiff_u, xt::pyarray&lt; double &gt; &amp;q_numDiff_v, xt::pyarray&lt; double &gt; &amp;q_numDiff_h_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, int offset_h, int offset_u, int offset_v, int stride_h, int stride_u, int stride_v, xt::pyarray&lt; double &gt; &amp;globalResidual, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_h, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_h, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; double &gt; &amp;ebqe_bc_h_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; double &gt; &amp;q_velocity, xt::pyarray&lt; double &gt; &amp;ebqe_velocity, xt::pyarray&lt; double &gt; &amp;flux, xt::pyarray&lt; double &gt; &amp;elementResidual_h_save)</argsstring>
        <name>calculateResidual_supg</name>
        <reimplements refid="classproteus_1_1_s_w2_d__base_1a126c56dce6a6ec9437017ae0d59d096e">calculateResidual_supg</reimplements>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shockCapturingCoefficient</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>h_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>b_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_adv</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_h_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_h</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalResidual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_h_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_velocity</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementResidual_h_save</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="2095" column="10" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="2095" bodyend="2588"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1ad84d33d557981b81dc9f36d35f65d7b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateJacobian</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;h_trial_ref, xt::pyarray&lt; double &gt; &amp;h_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;h_test_ref, xt::pyarray&lt; double &gt; &amp;h_grad_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;h_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;h_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;h_test_trace_ref, xt::pyarray&lt; double &gt; &amp;h_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double nu, double g, xt::pyarray&lt; int &gt; &amp;h_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;b_dof, xt::pyarray&lt; double &gt; &amp;h_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;h_dof_sge, xt::pyarray&lt; double &gt; &amp;u_dof_sge, xt::pyarray&lt; double &gt; &amp;v_dof_sge, xt::pyarray&lt; double &gt; &amp;q_mass_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_h_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_h_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_h_h, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_h_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_h_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_h_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_h_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_h, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_h, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; double &gt; &amp;globalJacobian, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_h, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_h, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; double &gt; &amp;ebqe_bc_h_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_h_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_h_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_h_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_v)</argsstring>
        <name>calculateJacobian</name>
        <reimplements refid="classproteus_1_1_s_w2_d__base_1a6885007b0e7edfc5b18229857b5197a2">calculateJacobian</reimplements>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>h_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>b_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_h_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_h_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_h_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_h_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_h_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_h_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_h_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_h_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_h_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_h_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_h_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="2589" column="10" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="2589" bodyend="3704"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1_s_w2_d_1a98038c5236894d3e6ef74771cce0f180" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateJacobian_supg</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; double &gt; &amp;mesh_velocity_dof, double MOVING_DOMAIN, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;h_trial_ref, xt::pyarray&lt; double &gt; &amp;h_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;h_test_ref, xt::pyarray&lt; double &gt; &amp;h_grad_test_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;vel_test_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_ref, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;h_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;h_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;h_test_trace_ref, xt::pyarray&lt; double &gt; &amp;h_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_test_trace_ref, xt::pyarray&lt; double &gt; &amp;vel_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, int nElements_global, double useRBLES, double useMetrics, double alphaBDF, double nu, double g, xt::pyarray&lt; int &gt; &amp;h_l2g, xt::pyarray&lt; int &gt; &amp;vel_l2g, xt::pyarray&lt; double &gt; &amp;b_dof, xt::pyarray&lt; double &gt; &amp;h_dof, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; double &gt; &amp;v_dof, xt::pyarray&lt; double &gt; &amp;h_dof_sge, xt::pyarray&lt; double &gt; &amp;u_dof_sge, xt::pyarray&lt; double &gt; &amp;v_dof_sge, xt::pyarray&lt; double &gt; &amp;q_mass_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_u_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_mom_v_acc_beta_bdf, xt::pyarray&lt; double &gt; &amp;q_velocity_sge, xt::pyarray&lt; double &gt; &amp;q_cfl, xt::pyarray&lt; double &gt; &amp;q_numDiff_h_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;q_numDiff_v_last, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_u_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_u_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_v_colind, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_rowptr, xt::pyarray&lt; int &gt; &amp;sdInfo_v_u_colind, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_h_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_h_h, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_h_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_h_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_h_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_h_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_h, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_u_v, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_h, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_u, xt::pyarray&lt; int &gt; &amp;csrRowIndeces_v_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_v_v, xt::pyarray&lt; double &gt; &amp;globalJacobian, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_h, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_u, xt::pyarray&lt; int &gt; &amp;isDOFBoundary_v, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_h, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isAdvectiveFluxBoundary_v, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_u, xt::pyarray&lt; int &gt; &amp;isDiffusiveFluxBoundary_v, xt::pyarray&lt; double &gt; &amp;ebqe_bc_h_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mass_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_u_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_mom_v_adv_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_u_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_u_diff_ext, xt::pyarray&lt; double &gt; &amp;ebqe_penalty_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_v_ext, xt::pyarray&lt; double &gt; &amp;ebqe_bc_flux_v_diff_ext, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_h_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_h_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_h_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_u_v, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_h, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_u, xt::pyarray&lt; int &gt; &amp;csrColumnOffsets_eb_v_v)</argsstring>
        <name>calculateJacobian_supg</name>
        <reimplements refid="classproteus_1_1_s_w2_d__base_1a9f8d59c45f35830a906d3da75721b773">calculateJacobian_supg</reimplements>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_velocity_dof</declname>
        </param>
        <param>
          <type>double</type>
          <declname>MOVING_DOMAIN</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>vel_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useRBLES</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alphaBDF</declname>
        </param>
        <param>
          <type>double</type>
          <declname>nu</declname>
        </param>
        <param>
          <type>double</type>
          <declname>g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>h_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>vel_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>b_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>h_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>v_dof_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mass_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_u_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_mom_v_acc_beta_bdf</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_velocity_sge</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_cfl</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_h_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_v_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_u_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_v_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sdInfo_v_u_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_h_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_h_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_h_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_h_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_h_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_h_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrRowIndeces_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_v_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>globalJacobian</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDOFBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isAdvectiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>isDiffusiveFluxBoundary_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_h_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mass_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_u_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_mom_v_adv_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_u_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_u_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_penalty_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_v_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>ebqe_bc_flux_v_diff_ext</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_h_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_h_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_h_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_u_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_h</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>csrColumnOffsets_eb_v_v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="3705" column="10" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="3705" bodyend="4301"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>proteus::SW2D_base</label>
        <link refid="classproteus_1_1_s_w2_d__base"/>
      </node>
      <node id="1">
        <label>proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1_s_w2_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>proteus::SW2D_base</label>
        <link refid="classproteus_1_1_s_w2_d__base"/>
      </node>
      <node id="1">
        <label>proteus::SW2D&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1_s_w2_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/cekees/proteus/proteus/mprans/SW2D.h" line="461" column="3" bodyfile="/Users/cekees/proteus/proteus/mprans/SW2D.h" bodystart="462" bodyend="4444"/>
    <listofallmembers>
      <member refid="classproteus_1_1_s_w2_d_1ad84d33d557981b81dc9f36d35f65d7b6" prot="public" virt="virtual"><scope>proteus::SW2D</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1_s_w2_d_1a98038c5236894d3e6ef74771cce0f180" prot="public" virt="virtual"><scope>proteus::SW2D</scope><name>calculateJacobian_supg</name></member>
      <member refid="classproteus_1_1_s_w2_d_1a590c785573fb064360cb47a86435cc07" prot="public" virt="virtual"><scope>proteus::SW2D</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1_s_w2_d_1a027afa6b76683e72eaae44bad62165aa" prot="public" virt="virtual"><scope>proteus::SW2D</scope><name>calculateResidual_supg</name></member>
      <member refid="classproteus_1_1_s_w2_d_1abe30e480bf801e2514e18c0a4650905e" prot="public" virt="non-virtual"><scope>proteus::SW2D</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1_s_w2_d_1a4833c7bcf5d68c327f4eff218e855bf0" prot="public" virt="non-virtual"><scope>proteus::SW2D</scope><name>calculateSubgridError_tau_supg</name></member>
      <member refid="classproteus_1_1_s_w2_d_1a11528b4193ce34ad3f2493530fece980" prot="public" virt="non-virtual"><scope>proteus::SW2D</scope><name>ck</name></member>
      <member refid="classproteus_1_1_s_w2_d_1aefc51adcf3505de0a2b179f233fdf220" prot="public" virt="non-virtual"><scope>proteus::SW2D</scope><name>evaluateCoefficients</name></member>
      <member refid="classproteus_1_1_s_w2_d_1ab573b3bfeaa7694d3a2295b3985d9919" prot="public" virt="non-virtual"><scope>proteus::SW2D</scope><name>exteriorNumericalAdvectiveFlux</name></member>
      <member refid="classproteus_1_1_s_w2_d_1aebbc3545cf1686aac576cd60cee4436f" prot="public" virt="non-virtual"><scope>proteus::SW2D</scope><name>exteriorNumericalAdvectiveFluxDerivatives</name></member>
      <member refid="classproteus_1_1_s_w2_d_1aba57ffdd60ffd8abd9419e5d9866dbf3" prot="public" virt="non-virtual"><scope>proteus::SW2D</scope><name>nDOF_test_X_trial_element</name></member>
      <member refid="classproteus_1_1_s_w2_d_1a062d9159fc3b7d73b22d2dffe633d666" prot="public" virt="non-virtual"><scope>proteus::SW2D</scope><name>SW2D</name></member>
      <member refid="classproteus_1_1_s_w2_d__base_1ae7569962568575bab4b5e59fae7e098b" prot="public" virt="virtual"><scope>proteus::SW2D</scope><name>~SW2D_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
