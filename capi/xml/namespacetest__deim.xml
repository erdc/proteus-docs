<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacetest__deim" kind="namespace" language="Python">
    <compoundname>test_deim</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacetest__deim_1a1de8fb3c9659fb3d25f0a0076882e4e1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>test_deim.comm</definition>
        <argsstring></argsstring>
        <name>comm</name>
        <initializer>=  <ref refid="Subroutines_8cpp_1a02fd73d861ef2e4aabb38c0c9ff82947" kindref="member">Comm.init</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="232" column="1" bodyfile="tests/POD/test_deim.py" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacetest__deim_1a0735d05f6bbe1bc3eba76164f2898ea8" prot="public" static="no" mutable="no">
        <type></type>
        <definition>test_deim.defaultTest</definition>
        <argsstring></argsstring>
        <name>defaultTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="234" column="1" bodyfile="tests/POD/test_deim.py" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetest__deim_1a140a400cdfe021d9127f29d0ad6325f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.get_burgers_ns</definition>
        <argsstring>(name, T=0.1, nDTout=10, archive_pod_res=False)</argsstring>
        <name>get_burgers_ns</name>
        <param>
          <type>name</type>
          <defname>name</defname>
        </param>
        <param>
          <type><ref refid="Headers_8h_1a38fec5c94a02f67ba7bf45025dd3ac80" kindref="member">T</ref></type>
          <defname>T</defname>
          <defval>0.1</defval>
        </param>
        <param>
          <type>nDTout</type>
          <defname>nDTout</defname>
          <defval>10</defval>
        </param>
        <param>
          <type>archive_pod_res</type>
          <defname>archive_pod_res</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="16" column="1" bodyfile="tests/POD/test_deim.py" bodystart="16" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacetest__deim_1ad709f0352340d458f1c83f54776dc4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.test_burger_run</definition>
        <argsstring>()</argsstring>
        <name>test_burger_run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Aron&apos;s favority smoke test to see if burgers runs
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="33" column="1" bodyfile="tests/POD/test_deim.py" bodystart="33" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacetest__deim_1acd033495722ff302e1baade4fd945730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.test_residual_split</definition>
        <argsstring>()</argsstring>
        <name>test_residual_split</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>just tests that R=R_s+R_t for random dof vector in [0,1]

Here R_s and R_t are the spatial and mass residuals
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="41" column="1" bodyfile="tests/POD/test_deim.py" bodystart="41" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacetest__deim_1a77e512228e2a5b011a2b32a33650ec02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.test_res_archive</definition>
        <argsstring>()</argsstring>
        <name>test_res_archive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>smoke test if numerical solution can archive &apos;spatial residuals&apos; to xdmf  
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="62" column="1" bodyfile="tests/POD/test_deim.py" bodystart="62" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacetest__deim_1a1f9496091ec2fd3d222c27771f61ff20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.test_svd_space_res</definition>
        <argsstring>(file_prefix=&apos;F_s&apos;)</argsstring>
        <name>test_svd_space_res</name>
        <param>
          <type>file_prefix</type>
          <defname>file_prefix</defname>
          <defval>&apos;F_s&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>test SVD decomposition of spatial residuals by generating SVD, saving to file and reloading
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="71" column="1" bodyfile="tests/POD/test_deim.py" bodystart="71" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacetest__deim_1aab7329c7ad4638f45aa4a66bb792c02d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.test_svd_mass_res</definition>
        <argsstring>(file_prefix=&apos;F_m&apos;)</argsstring>
        <name>test_svd_mass_res</name>
        <param>
          <type>file_prefix</type>
          <defname>file_prefix</defname>
          <defval>&apos;F_m&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>test SVD decomposition of mass residuals by generating SVD, saving to file and reloading
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="92" column="1" bodyfile="tests/POD/test_deim.py" bodystart="92" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacetest__deim_1a3db2aa36dd9104394924c16b09a5cf05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.test_svd_soln</definition>
        <argsstring>()</argsstring>
        <name>test_svd_soln</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>test SVD decomposition of solution by generating SVD, saving to file and reloading
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="113" column="1" bodyfile="tests/POD/test_deim.py" bodystart="113" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacetest__deim_1a54a7d79643a2c21a40394ed1b021c9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.test_deim_indices</definition>
        <argsstring>()</argsstring>
        <name>test_deim_indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Taking a basis generated from snapshots
and tests that get the deim algorithm returns all of the indices 
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="134" column="1" bodyfile="tests/POD/test_deim.py" bodystart="134" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespacetest__deim_1a1d17c5edd0bf7bb0f2407b1f7912e434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.deim_approx</definition>
        <argsstring>(T=0.1, nDTout=10, m=5, m_mass=5)</argsstring>
        <name>deim_approx</name>
        <param>
          <type><ref refid="Headers_8h_1a38fec5c94a02f67ba7bf45025dd3ac80" kindref="member">T</ref></type>
          <defname>T</defname>
          <defval>0.1</defval>
        </param>
        <param>
          <type>nDTout</type>
          <defname>nDTout</defname>
          <defval>10</defval>
        </param>
        <param>
          <type>m</type>
          <defname>m</defname>
          <defval>5</defval>
        </param>
        <param>
          <type>m_mass</type>
          <defname>m_mass</defname>
          <defval>5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Follow basic setup for DEIM approximation
- generate a burgers solution, saving spatial and &apos;mass&apos; residuals
- generate SVDs for snapshots
- for both residuals F_s and F_m
  - pick $m$, dimension for snapshot reduced basis $\mathbf{U}_m$
  - call DEIM algorithm to determine $\vec \rho$ and compute projection matrix 
    $\mathbf{P}_F=\mathbf{U}_m(\mathbf{P}^T\mathbf{U}_m)^{-1}$

For selected timesteps
- extract fine grid solution from archive, $\vec y$
- for both residuals F=F_s and F_m
  - evaluate $\vec F(\vec y)$ at indices in $\vec \rho \rightarrow \vec c$
  - apply DEIM interpolant $\tilde{\vec F} = \mathbf{P}_F\vec c$
  - compute error $\|F-\tilde{\vec F}\|
- visualize
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="154" column="1" bodyfile="tests/POD/test_deim.py" bodystart="154" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespacetest__deim_1a227c02a58f68a58be90e088166ceb5b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test_deim.test_deim_approx_full</definition>
        <argsstring>(tol=1.0e-12)</argsstring>
        <name>test_deim_approx_full</name>
        <param>
          <type>tol</type>
          <defname>tol</defname>
          <defval>1.0e-12</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>check that get very small error if use full basis 
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/POD/test_deim.py" line="221" column="1" bodyfile="tests/POD/test_deim.py" bodystart="221" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>some tests for initial DEIM implementation in proteus
</verbatim> </para>
    </detaileddescription>
    <location file="tests/POD/test_deim.py" line="1" column="1"/>
  </compounddef>
</doxygen>
