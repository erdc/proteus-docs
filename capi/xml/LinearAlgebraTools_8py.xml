<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="LinearAlgebraTools_8py" kind="file" language="Python">
    <compoundname>LinearAlgebraTools.py</compoundname>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py" prot="public">proteus::LinearAlgebraTools::ParVec_petsc4py</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py" prot="public">proteus::LinearAlgebraTools::ParInfo_petsc4py</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py" prot="public">proteus::LinearAlgebraTools::ParMat_petsc4py</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell" prot="public">proteus::LinearAlgebraTools::SparseMatShell</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell" prot="public">proteus::LinearAlgebraTools::OperatorShell</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1ProductOperatorShell" prot="public">proteus::LinearAlgebraTools::ProductOperatorShell</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell" prot="public">proteus::LinearAlgebraTools::InvOperatorShell</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell" prot="public">proteus::LinearAlgebraTools::LSCInv_shell</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1MatrixShell" prot="public">proteus::LinearAlgebraTools::MatrixShell</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell" prot="public">proteus::LinearAlgebraTools::MatrixInvShell</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell" prot="public">proteus::LinearAlgebraTools::SpInv_shell</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell" prot="public">proteus::LinearAlgebraTools::TwoPhase_PCDInv_shell</innerclass>
    <innerclass refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm" prot="public">proteus::LinearAlgebraTools::WeightedNorm</innerclass>
    <innernamespace refid="namespaceproteus_1_1LinearAlgebraTools">proteus::LinearAlgebraTools</innernamespace>
    <innernamespace refid="namespacesuperluWrappers">superluWrappers</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceproteus_1_1LinearAlgebraTools" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Tools<sp/>for<sp/>n-dimensional<sp/>linear<sp/>algebra</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">Vectors<sp/>are<sp/>just<sp/>numpy<sp/>arrays,<sp/>as<sp/>are<sp/>dense<sp/>matrices.<sp/>Sparse<sp/>matrices</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">are<sp/>CSR<sp/>matrices.<sp/>Parallel<sp/>vector<sp/>and<sp/>matrix<sp/>are<sp/>built<sp/>on<sp/>top<sp/>of<sp/>those</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">representations<sp/>using<sp/>PETSc.</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">..<sp/>inheritance-diagram::<sp/>proteus.LinearAlgebraTools</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/>:parts:<sp/>1</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>absolute_import</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>division</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>zip</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>range</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>builtins<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>object</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>past.utils<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>old_div</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>math</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>superluWrappers</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Comm</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.Comm<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>globalSum,<sp/>globalMax</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.superluWrappers<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.Profiling<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logEvent</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>petsc4py<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>PETSc<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>p4pyPETSc</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#<sp/>PETSc<sp/>Matrix<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_petsc_view(obj,<sp/>filename):</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Saves<sp/>petsc<sp/>object<sp/>to<sp/>disk<sp/>using<sp/>a<sp/>PETSc<sp/>binary<sp/>viewer.</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>obj<sp/>:<sp/>PETSc<sp/>obj</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PETSc4py<sp/>object<sp/>to<sp/>be<sp/>saved<sp/>(e.g.<sp/>vector,<sp/>matrix,<sp/>etc)</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>with<sp/>PETSc<sp/>filename</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>viewer<sp/>=<sp/>p4pyPETSc.Viewer().createBinary(filename,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>viewer(obj)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>viewer2<sp/>=<sp/>p4pyPETSc.Viewer().createASCII(filename+</highlight><highlight class="stringliteral">&quot;.m&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>viewer2.pushFormat(1)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>viewer2(obj)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>viewer2.popFormat()</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1ab0db2665bffc8ecbb039e54e39fbef4f" kindref="member">petsc_load_matrix</ref>(filename):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>This<sp/>function<sp/>loads<sp/>a<sp/>PETSc<sp/>matrix<sp/>from<sp/>a<sp/>binary<sp/>format.</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(Eg.<sp/>what<sp/>is<sp/>saved<sp/>using<sp/>the<sp/>petsc_view<sp/>function).</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>binary<sp/>with<sp/>the<sp/>file<sp/>stored.</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matrix<sp/>:<sp/>petsc4py<sp/>matrix</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>matrix<sp/>that<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>binary<sp/>file.</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewer<sp/>=<sp/>p4pyPETSc.Viewer().createBinary(filename,</highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>p4pyPETSc.Mat().load(viewer)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Either<sp/>you&apos;ve<sp/>entered<sp/>an<sp/>invalid<sp/>file<sp/>name<sp/>or<sp/>your<sp/>object<sp/>is<sp/>not<sp/>a<sp/>matrix<sp/>(try<sp/>petsc_load_vector).&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a698c7c2453337a5bdbbaa87b6cbcdb45" kindref="member">petsc_load_vector</ref>(filename):</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>This<sp/>function<sp/>loads<sp/>a<sp/>PETSc<sp/>vector<sp/>from<sp/>a<sp/>binary<sp/>format.</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(Eg.<sp/>what<sp/>is<sp/>saved<sp/>using<sp/>the<sp/>petsc_view<sp/>function).</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>binary<sp/>with<sp/>the<sp/>file<sp/>stored.</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matrix<sp/>:<sp/>petsc4py<sp/>vector</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>matrix<sp/>that<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>binary<sp/>file.</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewer<sp/>=<sp/>p4pyPETSc.Viewer().createBinary(filename,</highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>p4pyPETSc.Vec().load(viewer)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Either<sp/>you&apos;ve<sp/>entered<sp/>an<sp/>invalid<sp/>file<sp/>name<sp/>or<sp/>your<sp/>object<sp/>is<sp/>not<sp/>a<sp/>vector<sp/>(try<sp/>petsc_load_matrix).&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a11f0760ef0395e6c182600357c73d2cb" kindref="member">petsc_load_IS</ref>(filename):</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>This<sp/>function<sp/>loads<sp/>a<sp/>PETSc<sp/>index-set<sp/>from<sp/>a<sp/>binary<sp/>format.</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(Eg.<sp/>what<sp/>is<sp/>saved<sp/>using<sp/>the<sp/>petsc_view<sp/>function).</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>filename<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>binary<sp/>with<sp/>the<sp/>file<sp/>stored.</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matrix<sp/>:<sp/>petsc4py<sp/>IS</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>index-set<sp/>that<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>binary<sp/>file.</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewer<sp/>=<sp/>p4pyPETSc.Viewer().createBinary(filename,</highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>p4pyPETSc.IS().load(viewer)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Either<sp/>you&apos;ve<sp/>entered<sp/>an<sp/>invalid<sp/>file<sp/>name<sp/>or<sp/>your<sp/>object<sp/>is<sp/>not<sp/>an<sp/>index<sp/>set.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a98f6c4afa6687e1f5f5cfccb3f41897a" kindref="member">csr_2_petsc</ref>(size,csr):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Create<sp/>an<sp/>petsc4py<sp/>matrix<sp/>from<sp/>size<sp/>and<sp/>CSR<sp/>information.</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters:</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>size<sp/>:<sp/>tuple</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>2-tuple<sp/>with<sp/>the<sp/>number<sp/>of<sp/>matrix<sp/>rows<sp/>and<sp/>columns.</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>csr<sp/>:<sp/>tuple</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>3-tuple<sp/>with<sp/>the<sp/>sparse<sp/>matrix<sp/>csr<sp/>information.</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matrix<sp/>:<sp/>PETSc4py<sp/>aij<sp/>matrix</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>mat<sp/>=<sp/>p4pyPETSc.Mat().create()</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.setSizes(size<sp/>=<sp/>size)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.setType(</highlight><highlight class="stringliteral">&apos;aij&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.setUp()</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.assemblyBegin()</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.setValuesCSR(csr[0],csr[1],csr[2])</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.assemblyEnd()</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_pythonCSR_2_dense(rowptr,colptr,data,nr,nc,output=False):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Takes<sp/>python<sp/>CSR<sp/>datatypes<sp/>and<sp/>makes<sp/>a<sp/>dense<sp/>matrix<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>dense_matrix<sp/>=<sp/>numpy.zeros(shape<sp/>=<sp/>(nr,nc),<sp/>dtype=</highlight><highlight class="stringliteral">&apos;float&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>idx<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(rowptr)-1):</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_vals<sp/>=<sp/>data[rowptr[idx]:rowptr[idx+1]]</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>val_idx,j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(colptr[rowptr[idx]:rowptr[idx+1]]):</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dense_matrix[idx][j]<sp/>=<sp/>row_vals[val_idx]</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>output<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numpy.save(output,dense_matrix)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dense_matrix</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1af6a624dad7be9a332b8134fe18836a8a" kindref="member">superlu_get_rank</ref>(sparse_matrix):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Returns<sp/>the<sp/>rank<sp/>of<sp/>a<sp/>superluWrapper<sp/>sparse<sp/>matrix.</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_matrix<sp/>:<sp/>:class:`proteus.superluWrappers.SparseMatrix`</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matrix_rank<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>rank<sp/>of<sp/>the<sp/>sparse_matrix</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>a<sp/>tool<sp/>for<sp/>debugging<sp/>and<sp/>should<sp/>only<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>small<sp/>matrices.</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/><ref refid="namespaceproteus_1_1LinearAlgebraTools_1ad66e6e5a0f5a3d45ab717a8ec5a79518" kindref="member">superlu_sparse_2_dense</ref>(sparse_matrix)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numpy.linalg.matrix_rank(A)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a441fdf75576593a17aef30ae52d1ad47" kindref="member">petsc4py_get_rank</ref>(sparse_matrix):</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Returns<sp/>the<sp/>rank<sp/>of<sp/>a<sp/>superluWrapper<sp/>sparse<sp/>matrix.</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_matrix<sp/>:<sp/>:class:`p4pyPETSc.Mat`</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matrix_rank<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>rank<sp/>of<sp/>the<sp/>sparse_matrix</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>a<sp/>debugging<sp/>tool<sp/>and<sp/>should<sp/>only<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>for<sp/>small<sp/>matrices.</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a79e7610ba6289e0108227196f121e69e" kindref="member">petsc4py_sparse_2_dense</ref>(sparse_matrix)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numpy.linalg.matrix_rank(A)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a4f8aeac73ef82f2903dcabeef658a1f8" kindref="member">superlu_has_pressure_null_space</ref>(sparse_matrix):</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Checks<sp/>whether<sp/>a<sp/>superluWrapper<sp/>sparse<sp/>matrix<sp/>has<sp/>a<sp/>constant</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pressure<sp/>null<sp/>space.</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_matrix<sp/>:<sp/>:class:`proteus.superluWrappers.SparseMatrix`</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>does<sp/>:<sp/>bool</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Boolean<sp/>variable<sp/>indicating<sp/>whether<sp/>the<sp/>pressure<sp/>term</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creates<sp/>a<sp/>null<sp/>space.</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Assumes<sp/>interwoven<sp/>dof.</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>was<sp/>written<sp/>mainly<sp/>for<sp/>debugging<sp/>purposes<sp/>and<sp/>may<sp/>be</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>slow<sp/>for<sp/>large<sp/>matrices.</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>A<sp/>=<sp/><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a2a15cab5f5e2d7f1ae0baf564b117828" kindref="member">superlu_2_petsc4py</ref>(sparse_matrix)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a1de37b41d7f5037b9e013a4069f50825" kindref="member">petsc4py_mat_has_pressure_null_space</ref>(A)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a1de37b41d7f5037b9e013a4069f50825" kindref="member">petsc4py_mat_has_pressure_null_space</ref>(A):</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Checks<sp/>whether<sp/>a<sp/>PETSc4Py<sp/>sparse<sp/>matrix<sp/>has<sp/>a<sp/>constant</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pressure<sp/>null<sp/>space.</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>:<sp/>:class:`p4pyPETSc.Mat`</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>does<sp/>:<sp/>bool</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Boolean<sp/>variable<sp/>indicating<sp/>whether<sp/>the<sp/>pressure<sp/>term</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creates<sp/>a<sp/>null<sp/>space.</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Assumes<sp/>interwoven<sp/>dof.</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>was<sp/>written<sp/>mainly<sp/>for<sp/>debugging<sp/>purposes<sp/>and<sp/>may<sp/>be</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>slow<sp/>for<sp/>large<sp/>matrices.</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>numpy.zeros(A.getSize()[1])</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>numpy.zeros(A.getSize()[1])</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>x[::3]<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>x_petsc<sp/>=<sp/>p4pyPETSc.Vec().createWithArray(x)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>y_petsc<sp/>=<sp/>p4pyPETSc.Vec().createWithArray(y)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>A.mult(x_petsc,y_petsc)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>y_petsc.norm()<sp/>&lt;<sp/>1e-15:</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1ad66e6e5a0f5a3d45ab717a8ec5a79518" kindref="member">superlu_sparse_2_dense</ref>(sparse_matrix,output=False):</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Converts<sp/>a<sp/>sparse<sp/>superluWrapper<sp/>into<sp/>a<sp/>dense<sp/>matrix.</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_matrix<sp/>:</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>output<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out<sp/>file<sp/>name<sp/>to<sp/>store<sp/>the<sp/>matrix.</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>dense_matrix<sp/>:<sp/>numpy<sp/>array</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>numpy<sp/>array<sp/>storing<sp/>the<sp/>dense<sp/>matrix.</highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>should<sp/>not<sp/>be<sp/>used<sp/>for<sp/>large<sp/>matrices.</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>rowptr<sp/>=<sp/>sparse_matrix.getCSRrepresentation()[0]</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>colptr<sp/>=<sp/>sparse_matrix.getCSRrepresentation()[1]</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/><sp/><sp/>=<sp/>sparse_matrix.getCSRrepresentation()[2]</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>nr<sp/><sp/><sp/><sp/><sp/>=<sp/>sparse_matrix.shape[0]</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>nc<sp/><sp/><sp/><sp/><sp/>=<sp/>sparse_matrix.shape[1]</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_pythonCSR_2_dense(rowptr,colptr,data,nr,nc,output)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a79e7610ba6289e0108227196f121e69e" kindref="member">petsc4py_sparse_2_dense</ref>(sparse_matrix,output=False):</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Converts<sp/>a<sp/>PETSc4Py<sp/>matrix<sp/>to<sp/>a<sp/>dense<sp/>numpyarray.</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_matrix<sp/>:<sp/>PETSc4py<sp/>matrix</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>output<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Output<sp/>file<sp/>name<sp/>to<sp/>store<sp/>the<sp/>matrix.</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>dense_matrix<sp/>:<sp/>numpy<sp/>array</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>numpy<sp/>array<sp/>with<sp/>the<sp/>dense<sp/>matrix.</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>very<sp/>inefficient<sp/>for<sp/>large<sp/>matrices.</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>rowptr<sp/>=<sp/>sparse_matrix.getValuesCSR()[0]</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>colptr<sp/>=<sp/>sparse_matrix.getValuesCSR()[1]</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/><sp/><sp/>=<sp/>sparse_matrix.getValuesCSR()[2]</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>nr<sp/><sp/><sp/><sp/><sp/>=<sp/>sparse_matrix.getSize()[0]</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>nc<sp/><sp/><sp/><sp/><sp/>=<sp/>sparse_matrix.getSize()[1]</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_pythonCSR_2_dense(rowptr,colptr,data,nr,nc,output)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a2a15cab5f5e2d7f1ae0baf564b117828" kindref="member">superlu_2_petsc4py</ref>(sparse_superlu):</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Copy<sp/>a<sp/>sparse<sp/>superlu<sp/>matrix<sp/>to<sp/>a<sp/>sparse<sp/>petsc4py<sp/>matrix</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_superlu<sp/>:<sp/>:class:`proteus.superluWrappers.SparseMatrix`</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_matrix<sp/>:<sp/>:class:<sp/>`p4pyPETSc.Mat`</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>comm<sp/>=<sp/>Comm.get()</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>comm.size()<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr,colind,nzval<sp/>=<sp/>sparse_superlu.getCSRrepresentation()</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_petsc4py<sp/>=<sp/>ParMat_petsc4py.create_ParMat_from_OperatorConstructor(sparse_superlu)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr,<sp/>colind,<sp/>nzval<sp/>=<sp/>sparse_superlu.getCSRrepresentation()</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_rowptr<sp/>=<sp/>rowptr.copy()</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_colind<sp/>=<sp/>colind.copy()</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_nzval<sp/><sp/>=<sp/>nzval.copy()</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nr<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sparse_superlu.shape[0]</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nc<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sparse_superlu.shape[1]</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_petsc4py<sp/>=<sp/>p4pyPETSc.Mat().createAIJWithArrays((nr,nc),</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(A_rowptr,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_colind,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A_nzval))</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A_petsc4py</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1aa343117c9ace03b092e8c15908133352" kindref="member">petsc_create_diagonal_inv_matrix</ref>(sparse_petsc):</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Create<sp/>an<sp/>inverse<sp/>diagonal<sp/>petsc4py<sp/>matrix<sp/>from<sp/>input<sp/>matrix.</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_petsc<sp/>:<sp/>:class:`p4pyPETSc.Mat`</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_matrix<sp/>:<sp/>:class:`p4pyPETSc.Mat`</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>diag_inv<sp/>=<sp/>p4pyPETSc.Mat().create()</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>diag_inv.setSizes(sparse_petsc.getSizes())</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>diag_inv.setType(</highlight><highlight class="stringliteral">&apos;aij&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>diag_inv.setUp()</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>diag_inv.setDiagonal(old_div(1.,sparse_petsc.getDiagonal()))</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diag_inv</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1aea30dc0c5971d720741a6098b4dfc03e" kindref="member">dense_numpy_2_petsc4py</ref>(dense_numpy,<sp/>eps<sp/>=<sp/>1.e-12):</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Create<sp/>a<sp/>sparse<sp/>petsc4py<sp/>matrix<sp/>from<sp/>a<sp/>dense<sp/>numpy<sp/>matrix.</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Note<sp/>-<sp/>This<sp/>routine<sp/>has<sp/>been<sp/>built<sp/>mainly<sp/>to<sp/>support<sp/>testing.</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>It<sp/>would<sp/>be<sp/>rare<sp/>for<sp/>this<sp/>routine<sp/>to<sp/>be<sp/>useful<sp/>for<sp/>most<sp/>applications.</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>dense_numpy<sp/>:</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>eps<sp/>:<sp/>float</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tolerance<sp/>for<sp/>non-zero<sp/>values.</highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_matrix<sp/>:<sp/>PETSc4py<sp/>matrix</highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>vals<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>colptr<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>rowptr<sp/>=<sp/>[0]</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>rowptr_track<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,row<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(dense_numpy):</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j,val<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(row):</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>abs(val)<sp/>&gt;<sp/>eps:</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vals.append(val)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colptr.append(j)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr_track<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr.append(rowptr_track)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p4pyPETSc.Mat().createAIJ(size=dense_numpy.shape,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csr<sp/>=<sp/>(rowptr,<sp/>colptr,<sp/>vals))</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1ab17f6ef84fcb5d3594a0027b44317623" kindref="member">csr_2_petsc_mpiaij</ref>(size,csr):</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Create<sp/>an<sp/>MPIaij<sp/>petsc4py<sp/>matrix<sp/>from<sp/>size<sp/>and<sp/>CSR<sp/>information.</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters:</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>size<sp/>:<sp/>tuple</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Two<sp/>entires:<sp/>(num_rows,<sp/>num_cols)</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>csr<sp/>:<sp/>tuple</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(row_idx,<sp/>col_idx,<sp/>vals)</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matrix<sp/>:<sp/>PETSc4py<sp/>MPIaij<sp/>matrix</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>mat<sp/>=<sp/>p4pyPETSc.Mat().create()</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.setSizes(size<sp/>=<sp/>size)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.setType(</highlight><highlight class="stringliteral">&apos;mpiaij&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.setUp()</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.assemblyBegin()</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.setValuesCSR(csr[0],csr[1],csr[2])</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.assemblyEnd()</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1aceef8b3e087552921aa8af5bc192ae25" kindref="member">split_PETSc_Mat</ref>(mat):</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Decompose<sp/>a<sp/>PETSc<sp/>matrix<sp/>into<sp/>a<sp/>symmetric<sp/>and<sp/>skew-symmetric</highlight></codeline>
<codeline lineno="395"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix</highlight></codeline>
<codeline lineno="396"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="397"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters:</highlight></codeline>
<codeline lineno="398"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="399"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>mat<sp/>:<sp/>:class:<sp/>`PETSc4py<sp/>Matrix`</highlight></codeline>
<codeline lineno="400"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns:</highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>H<sp/>:<sp/>:class:<sp/>`PETSc4py<sp/>Matrix`</highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symmetric<sp/>(or<sp/>Hermitian)<sp/>component<sp/>of<sp/>mat</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>S<sp/>:<sp/>:class:<sp/>`PETSc4py<sp/>Matrix`</highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Skew-Symmetric<sp/>(or<sp/>skew-Hermitian)<sp/>component<sp/>of<sp/>mat</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>H<sp/>=<sp/>mat.copy()</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>H.zeroEntries()</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>H.axpy(1.0,mat)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>H.axpy(1.0,mat.transpose())</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>H.scale(0.5)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>=<sp/>mat.copy()</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>S.zeroEntries()</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>S.axpy(1.0,mat)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>S.aypx(-1.0,mat.transpose())</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>S.scale(0.5)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H,<sp/>S</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py" kindref="compound">ParVec_petsc4py</ref>(p4pyPETSc.Vec):</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="422"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parallel<sp/>vector<sp/>using<sp/>petsc4py&apos;s<sp/>wrappers<sp/>for<sp/>PETSc</highlight></codeline>
<codeline lineno="423"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="424"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="425"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="426"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>array<sp/>:<sp/>numpy_array</highlight></codeline>
<codeline lineno="427"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>numpy<sp/>array<sp/>with<sp/>size<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>locally</highlight></codeline>
<codeline lineno="428"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>owned<sp/>unknowns<sp/>plus<sp/>the<sp/>number<sp/>of<sp/>local<sp/>ghost<sp/>cells.</highlight></codeline>
<codeline lineno="429"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>bs<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="430"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Block<sp/>size.</highlight></codeline>
<codeline lineno="431"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>n<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>locally<sp/>owned<sp/>unknowns</highlight></codeline>
<codeline lineno="433"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>N<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>unknowns<sp/>in<sp/>the<sp/>global<sp/>system</highlight></codeline>
<codeline lineno="435"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>nghosts<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="436"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>ghost<sp/>nodes<sp/>for<sp/>the<sp/>process.</highlight></codeline>
<codeline lineno="437"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>subdomain2global<sp/>:<sp/>numpy<sp/>array</highlight></codeline>
<codeline lineno="438"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Map<sp/>from<sp/>the<sp/>process<sp/>unknowns<sp/>to<sp/>the<sp/>global</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uknowns.</highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>blockVecType<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ghosts<sp/>:<sp/>numpy<sp/>array</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>numpy<sp/>array<sp/>with<sp/>the<sp/>local<sp/>process<sp/>uknowns<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghost<sp/>nodes.</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>proteus2petsc_subdomain<sp/>:<sp/>numpy<sp/>array</highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>numpy<sp/>array<sp/>that<sp/>serves<sp/>as<sp/>a<sp/>map<sp/>from<sp/>the<sp/>proteus</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uknown<sp/>ordering<sp/>to<sp/>the<sp/>petsc<sp/>uknown<sp/>ordering</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>petsc2proteus_subdomain<sp/>:<sp/>numpy<sp/>array</highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>numpy<sp/>array<sp/>that<sp/>serves<sp/>as<sp/>a<sp/>map<sp/>from<sp/>the<sp/>petsc<sp/>uknown</highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordering<sp/>to<sp/>the<sp/>proteus<sp/>unknown<sp/>ordering</highlight></codeline>
<codeline lineno="450"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1aa91ff8e612cd72adc4d66de1d94c6cc7" kindref="member">__init__</ref>(self,array=None,bs=None,n=None,N=None,nghosts=None,subdomain2global=None,blockVecType=&quot;simple&quot;,ghosts=None,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proteus2petsc_subdomain=None,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc2proteus_subdomain=None):</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p4pyPETSc.Vec.__init__(self)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>array<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="comment">#when<sp/>duplicating<sp/>for<sp/>petsc<sp/>usage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a841427a06cc8bb7e2c74610afe87c544" kindref="member">proteus2petsc_subdomain</ref>=proteus2petsc_subdomain</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a02007ad41ebc17f61dbcf5ec1f52c366" kindref="member">petsc2proteus_subdomain</ref>=petsc2proteus_subdomain</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockSize<sp/>=<sp/><ref refid="group__analyticalSolutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>(1,bs)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a590bb1b059885b18edb90ab24051b184" kindref="member">dim_proc</ref><sp/>=<sp/>n*blockSize</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1af26f49e79a265eab9a7095cb50c25dc8" kindref="member">nghosts</ref><sp/>=<sp/>nghosts</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1adb0e1e352724694f91ef3590050c8a3c" kindref="member">blockVecType</ref><sp/>=<sp/>blockVecType</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1adb0e1e352724694f91ef3590050c8a3c" kindref="member">blockVecType</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;simple&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;petsc4py<sp/>wrappers<sp/>require<sp/>self.blockVecType=simple&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a634b11b7bf5cc251573726cfdeb55a41" kindref="member">proteus_array</ref><sp/>=<sp/>array</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nghosts<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>blockVecType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;simple&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.createWithArray(array,size=(blockSize*n,blockSize*N),bsize=1)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.createWithArray(array,size=(blockSize*n,blockSize*N),bsize=blockSize)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a9dd93364265c5da51e3dc5cfab27a699" kindref="member">subdomain2global</ref>=subdomain2global</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a57863ece8f0ab9cc4bc8852dc8f68152" kindref="member">petsc_l2g</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setUp()</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>nghosts<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>number<sp/>of<sp/>ghostnodes<sp/>must<sp/>be<sp/>non-negative&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>subdomain2global.shape[0]<sp/>==<sp/>(n+nghosts),<sp/>(</highlight><highlight class="stringliteral">&quot;The<sp/>subdomain2global<sp/>map<sp/>is<sp/>the<sp/>wrong<sp/>length<sp/>n=%i,nghosts=%i,shape=%i<sp/>\n&quot;</highlight><highlight class="normal"><sp/>%<sp/>(n,n+nghosts,subdomain2global.shape[0]))</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>len(array.flat)<sp/>==<sp/>(n+nghosts)*blockSize,<sp/></highlight><highlight class="stringliteral">&quot;%i<sp/><sp/>!=<sp/>(%i+%i)*%i<sp/>\n&quot;</highlight><highlight class="normal"><sp/>%<sp/>(len(array.flat),<sp/><sp/>n,nghosts,blockSize)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>blockVecType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;simple&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ghosts<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghosts<sp/>=<sp/>numpy.zeros((blockSize*nghosts),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(blockSize):</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghosts[j::blockSize]=subdomain2global[n:]*blockSize+j</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.createGhostWithArray(ghosts,array,size=(blockSize*n,blockSize*N),bsize=1)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>blockSize<sp/>&gt;<sp/>1:<sp/></highlight><highlight class="comment">#have<sp/>to<sp/>build<sp/>in<sp/>block<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2globalTotal<sp/>=<sp/>numpy.zeros((blockSize*subdomain2global.shape[0],),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(blockSize):</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2globalTotal[j::blockSize]=subdomain2global*blockSize+j</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a9dd93364265c5da51e3dc5cfab27a699" kindref="member">subdomain2global</ref>=subdomain2globalTotal</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a9dd93364265c5da51e3dc5cfab27a699" kindref="member">subdomain2global</ref>=subdomain2global</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#TODO<sp/>need<sp/>to<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghosts<sp/>=<sp/>subdomain2global[n:]</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.createGhostWithArray(ghosts,array,size=(blockSize*n,blockSize*N),bsize=blockSize)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a9dd93364265c5da51e3dc5cfab27a699" kindref="member">subdomain2global</ref><sp/>=<sp/>subdomain2global</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setUp()</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.petsc_l2g<sp/>=<sp/>p4pyPETSc.LGMap()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.petsc_l2g.create(self.subdomain2global)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.setLGMap(self.petsc_l2g)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setFromOptions()</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1aa878cbafa8a80194ca8267049a341e24" kindref="member">scatter_forward_insert</ref>(self):</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a841427a06cc8bb7e2c74610afe87c544" kindref="member">proteus2petsc_subdomain</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a634b11b7bf5cc251573726cfdeb55a41" kindref="member">proteus_array</ref>[:]<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a634b11b7bf5cc251573726cfdeb55a41" kindref="member">proteus_array</ref>[self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a02007ad41ebc17f61dbcf5ec1f52c366" kindref="member">petsc2proteus_subdomain</ref>]</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ghostUpdateBegin(p4pyPETSc.InsertMode.INSERT,p4pyPETSc.ScatterMode.FORWARD)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ghostUpdateEnd(p4pyPETSc.InsertMode.INSERT,p4pyPETSc.ScatterMode.FORWARD)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a841427a06cc8bb7e2c74610afe87c544" kindref="member">proteus2petsc_subdomain</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a634b11b7bf5cc251573726cfdeb55a41" kindref="member">proteus_array</ref>[:]<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a634b11b7bf5cc251573726cfdeb55a41" kindref="member">proteus_array</ref>[self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a841427a06cc8bb7e2c74610afe87c544" kindref="member">proteus2petsc_subdomain</ref>]</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a5edb2fb558b6b343b4cd96e9b21d4a6a" kindref="member">scatter_reverse_add</ref>(self):</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a841427a06cc8bb7e2c74610afe87c544" kindref="member">proteus2petsc_subdomain</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a634b11b7bf5cc251573726cfdeb55a41" kindref="member">proteus_array</ref>[:]<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a634b11b7bf5cc251573726cfdeb55a41" kindref="member">proteus_array</ref>[self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a02007ad41ebc17f61dbcf5ec1f52c366" kindref="member">petsc2proteus_subdomain</ref>]</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ghostUpdateBegin(p4pyPETSc.InsertMode.ADD_VALUES,p4pyPETSc.ScatterMode.REVERSE)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ghostUpdateEnd(p4pyPETSc.InsertMode.ADD_VALUES,p4pyPETSc.ScatterMode.REVERSE)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a841427a06cc8bb7e2c74610afe87c544" kindref="member">proteus2petsc_subdomain</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a634b11b7bf5cc251573726cfdeb55a41" kindref="member">proteus_array</ref>[:]<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a634b11b7bf5cc251573726cfdeb55a41" kindref="member">proteus_array</ref>[self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a841427a06cc8bb7e2c74610afe87c544" kindref="member">proteus2petsc_subdomain</ref>]</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParVec__petsc4py_1a3cfdb1da6b607917808dcd6d4548bcfb" kindref="member">save</ref>(self,<sp/>filename):</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Saves<sp/>to<sp/>disk<sp/>using<sp/>a<sp/>PETSc<sp/>binary<sp/>viewer.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_petsc_view(self,<sp/>filename)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py" kindref="compound">ParInfo_petsc4py</ref>(object):</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="521"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ARB<sp/>-<sp/>this<sp/>class<sp/>is<sp/>experimental.<sp/><sp/>My<sp/>idea<sp/>is<sp/>to<sp/>store<sp/>the</highlight></codeline>
<codeline lineno="522"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>information<sp/>need<sp/>to<sp/>constructor<sp/>parallel<sp/>vectors<sp/>and<sp/>matrices</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>here<sp/>as<sp/>static<sp/>class<sp/>values.<sp/><sp/>Then<sp/>ParVec<sp/>and<sp/>ParMat<sp/>can</highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>use<sp/>these<sp/>values<sp/>to<sp/>create<sp/>parallel<sp/>objects<sp/>later.</highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1aaab5c2580024bdf39dca0f3ca0b1574e" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1ae827260c1b2a3c757139f4447942a437" kindref="member">par_bs</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1af6ccd8ec14472309ff6cd534177a972f" kindref="member">par_n</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a345d1426fa5bb4be2f838b9cba9ee462" kindref="member">par_n_lst</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a424bfdce357eee0e3ee8b62f028b1a15" kindref="member">par_N</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a927d1d1c1e27b40417ccbafea61ca565" kindref="member">par_nghost</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1ad5dc2c1478aff2675566327d987d74be" kindref="member">par_nghost_lst</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1abf48d900e9b3f8b05c4523196360b713" kindref="member">petsc_subdomain2global_petsc</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a4c04f619de9dd74cc48e63e5bf132c6f" kindref="member">subdomain2global</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a12cdea1aaa7999dc3731b6b213a9e4dd" kindref="member">proteus2petsc_subdomain</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a056b780d9e53df829a189c36e77b04f9" kindref="member">petsc2proteus_subdomain</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1abee0c6a97b29a723574333eb563fc1d0" kindref="member">nzval_proteus2petsc</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a94e2ee9d28979921bc37ba60aa020fd2" kindref="member">dim</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a1522bb12466095abe34f737aac386653" kindref="member">mixed</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a8ef337e44ab8078edb831e7a5243a7e1" kindref="member">print_info</ref>(cls):</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Comm</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>=<sp/>Comm.get()</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>par_bs<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1ae827260c1b2a3c757139f4447942a437" kindref="member">par_bs</ref>))</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>par_n<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1af6ccd8ec14472309ff6cd534177a972f" kindref="member">par_n</ref>))</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>par_n_lst<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a345d1426fa5bb4be2f838b9cba9ee462" kindref="member">par_n_lst</ref>))</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>par_N<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a424bfdce357eee0e3ee8b62f028b1a15" kindref="member">par_N</ref>))</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>par_nghost<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a927d1d1c1e27b40417ccbafea61ca565" kindref="member">par_nghost</ref>))</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>par_nghost_lst<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1ad5dc2c1478aff2675566327d987d74be" kindref="member">par_nghost_lst</ref>))</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>petsc_subdomain2global_petsc<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1abf48d900e9b3f8b05c4523196360b713" kindref="member">petsc_subdomain2global_petsc</ref>))</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>subdomain2global<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a4c04f619de9dd74cc48e63e5bf132c6f" kindref="member">subdomain2global</ref>))</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>proteus2petsc_subdomain<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a12cdea1aaa7999dc3731b6b213a9e4dd" kindref="member">proteus2petsc_subdomain</ref>))</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>petsc2proteus_subomdain<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a056b780d9e53df829a189c36e77b04f9" kindref="member">petsc2proteus_subdomain</ref>))</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>dim<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1a94e2ee9d28979921bc37ba60aa020fd2" kindref="member">dim</ref>))</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&apos;comm.rank()<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(comm.rank())<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>nzval_proteus2petsc<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>repr(cls.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParInfo__petsc4py_1abee0c6a97b29a723574333eb563fc1d0" kindref="member">nzval_proteus2petsc</ref>))</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py" kindref="compound">ParMat_petsc4py</ref>(p4pyPETSc.Mat):</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/><sp/>Parallel<sp/>matrix<sp/>based<sp/>on<sp/>petsc4py&apos;s<sp/>wrappers<sp/>for<sp/>PETSc.</highlight></codeline>
<codeline lineno="560"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ghosted_csr_mat<sp/>:<sp/>:class:`proteus.superluWrappers.SparseMatrix`</highlight></codeline>
<codeline lineno="561"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Primary<sp/>CSR<sp/>information<sp/>for<sp/>the<sp/>ParMat.</highlight></codeline>
<codeline lineno="562"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>par_bs<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="563"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>block<sp/>size.</highlight></codeline>
<codeline lineno="564"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>par_n<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="565"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>locally<sp/>owned<sp/>unknowns.</highlight></codeline>
<codeline lineno="566"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>par_N<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="567"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>global<sp/>unknowns.</highlight></codeline>
<codeline lineno="568"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>par_nghost<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="569"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>locally<sp/>owned<sp/>ghost<sp/>unknowns.</highlight></codeline>
<codeline lineno="570"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>subdomain2global<sp/>:<sp/>:class:`numpy.ndarray`</highlight></codeline>
<codeline lineno="571"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>map<sp/>from<sp/>the<sp/>local<sp/>unknown<sp/>to<sp/>the<sp/>global<sp/>unknown.</highlight></codeline>
<codeline lineno="572"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>blockVecType<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="573"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>pde<sp/>:<sp/>:class:`proteus.Transport.OneLevelTransport`</highlight></codeline>
<codeline lineno="574"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>Transport<sp/>class<sp/>defining<sp/>the<sp/>problem.</highlight></codeline>
<codeline lineno="575"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>par_nc<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="576"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>par_Nc<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>proteus_jacobian<sp/>:<sp/>:class:`proteus.superluWrappers.SparseMatrix`</highlight></codeline>
<codeline lineno="578"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian<sp/>generated<sp/>by<sp/>Transport<sp/>class&apos;s<sp/>initializeJacobian.</highlight></codeline>
<codeline lineno="579"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>nzval_proteus2petsc<sp/>:<sp/>:class:`numpy.ndarray`</highlight></codeline>
<codeline lineno="580"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>with<sp/>index<sp/>permutations<sp/>for<sp/>mapping<sp/>between</highlight></codeline>
<codeline lineno="581"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proteus<sp/>and<sp/>petsc<sp/>degrees<sp/>of<sp/>freedom.</highlight></codeline>
<codeline lineno="582"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a5233f4f004ac621c73b1b272736b1835" kindref="member">__init__</ref>(self,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ghosted_csr_mat=None,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_bs=None,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_n=None,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_N=None,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_nghost=None,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global=None,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockVecType=&quot;simple&quot;,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pde=None,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_nc=None,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_Nc=None,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proteus_jacobian=None,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval_proteus2petsc=None):</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p4pyPETSc.Mat.__init__(self)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ghosted_csr_mat<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="comment">#when<sp/>duplicating<sp/>for<sp/>petsc<sp/>usage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a4db4c002bb1ff0689b037e39a5bd12cc" kindref="member">pde</ref><sp/>=<sp/>pde</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>par_nc<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_nc<sp/>=<sp/>par_n</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>par_Nc<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_Nc<sp/>=<sp/>par_N</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a4bdda17413bca3c22e908cd312e07b28" kindref="member">proteus_jacobian</ref>=proteus_jacobian</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1afb526740608db00b29b2034fe9bc9ec7" kindref="member">nzval_proteus2petsc</ref><sp/>=<sp/>nzval_proteus2petsc</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1ae560ed340accc0e42fea51cd073b3c84" kindref="member">ghosted_csr_mat</ref>=ghosted_csr_mat</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1ae464b384b531deba58047f0b5c49d6c7" kindref="member">blockVecType</ref><sp/>=<sp/>blockVecType</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1ae464b384b531deba58047f0b5c49d6c7" kindref="member">blockVecType</ref><sp/>==<sp/></highlight><highlight class="stringliteral">&quot;simple&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;petsc4py<sp/>wrappers<sp/>require<sp/>self.blockVecType=simple&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.create(p4pyPETSc.COMM_WORLD)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref><sp/>=<sp/><ref refid="group__analyticalSolutions_1gaffe776513b24d84b39af8ab0930fef7f" kindref="member">max</ref>(1,par_bs)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref><sp/>&gt;<sp/>1<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>blockVecType<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;simple&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setType(</highlight><highlight class="stringliteral">&apos;mpibaij&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setSizes([[self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>*par_n,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>*par_N],[self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>*par_nc,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>*par_Nc]],bsize=self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setBlockSize(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a44f81edad415ddb441b4bd92d4859dae" kindref="member">subdomain2global</ref><sp/>=<sp/>subdomain2global<sp/></highlight><highlight class="comment">#no<sp/>need<sp/>to<sp/>include<sp/>extra<sp/>block<sp/>dofs?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setType(</highlight><highlight class="stringliteral">&apos;aij&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setSizes([[par_n*self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>,par_N*self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>],[par_nc*self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>,par_Nc*self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>]],bsize=1)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref><sp/>&gt;<sp/>1:<sp/></highlight><highlight class="comment">#have<sp/>to<sp/>build<sp/>in<sp/>block<sp/>dofs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2globalTotal<sp/>=<sp/>numpy.zeros((self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>*subdomain2global.shape[0],),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>):</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2globalTotal[j::self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>]=subdomain2global*self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>+j</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a44f81edad415ddb441b4bd92d4859dae" kindref="member">subdomain2global</ref>=subdomain2globalTotal</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a44f81edad415ddb441b4bd92d4859dae" kindref="member">subdomain2global</ref>=subdomain2global</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>proteus<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Comm</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>=<sp/>Comm.get()</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;ParMat_petsc4py<sp/>comm.rank=<sp/>%s<sp/>blockSize<sp/>=<sp/>%s<sp/>par_n=<sp/>%s<sp/>par_N=%s<sp/>par_nghost=%s<sp/>par_jacobian.getSizes()=<sp/>%s<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>(comm.rank(),self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>,par_n,par_N,par_nghost,self.getSizes()))</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1afda90f2b1b4662a65e4b1ddb23e979cf" kindref="member">csr_rep</ref><sp/>=<sp/>ghosted_csr_mat.getCSRrepresentation()</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a4bdda17413bca3c22e908cd312e07b28" kindref="member">proteus_jacobian</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1aee44d7d227338d5fa4ee9e65a33698a7" kindref="member">proteus_csr_rep</ref><sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a4bdda17413bca3c22e908cd312e07b28" kindref="member">proteus_jacobian</ref>.getCSRrepresentation()</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref><sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockOwned<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1784082f7f5d9982d72f51f8d9c808b8" kindref="member">blockSize</ref>*par_n</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1ac3bc732e72398d8730be3708e3b8602f" kindref="member">csr_rep_local</ref><sp/>=<sp/>ghosted_csr_mat.getSubMatCSRrepresentation(0,blockOwned)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1ac3bc732e72398d8730be3708e3b8602f" kindref="member">csr_rep_local</ref><sp/>=<sp/>ghosted_csr_mat.getSubMatCSRrepresentation(0,par_n)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a332fe5ffd592db0e07fb79132443ec13" kindref="member">petsc_l2g</ref><sp/>=<sp/>p4pyPETSc.LGMap()</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a332fe5ffd592db0e07fb79132443ec13" kindref="member">petsc_l2g</ref>.create(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a44f81edad415ddb441b4bd92d4859dae" kindref="member">subdomain2global</ref>)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setUp()</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setLGMap(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a332fe5ffd592db0e07fb79132443ec13" kindref="member">petsc_l2g</ref>)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1abefa30d9777c5834eb77c4161c1d7773" kindref="member">colind_global</ref><sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a332fe5ffd592db0e07fb79132443ec13" kindref="member">petsc_l2g</ref>.apply(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1ac3bc732e72398d8730be3708e3b8602f" kindref="member">csr_rep_local</ref>[1])<sp/></highlight><highlight class="comment">#prealloc<sp/>needs<sp/>global<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setPreallocationCSR([self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1ac3bc732e72398d8730be3708e3b8602f" kindref="member">csr_rep_local</ref>[0],self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1abefa30d9777c5834eb77c4161c1d7773" kindref="member">colind_global</ref>,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1ac3bc732e72398d8730be3708e3b8602f" kindref="member">csr_rep_local</ref>[2]])</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setFromOptions()</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>@classmethod</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1ab5d56f9ae71b13c9b6ba9e086d44e813" kindref="member">create_ParMat_from_OperatorConstructor</ref>(cls,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator):</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Build<sp/>a<sp/>ParMat<sp/>consistent<sp/>with<sp/>the<sp/>problem<sp/>from<sp/>an<sp/>Operator</highlight></codeline>
<codeline lineno="653"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructor<sp/>matrix.</highlight></codeline>
<codeline lineno="654"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="655"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arguments</highlight></codeline>
<codeline lineno="656"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---------</highlight></codeline>
<codeline lineno="657"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>:<sp/>:class:`proteus.superluWrappers.SparseMatrix`</highlight></codeline>
<codeline lineno="658"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix<sp/>to<sp/>be<sp/>turned<sp/>into<sp/>a<sp/>parallel<sp/>petsc<sp/>matrix.</highlight></codeline>
<codeline lineno="659"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_bs<sp/>=<sp/>ParInfo_petsc4py.par_bs</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_n<sp/>=<sp/>ParInfo_petsc4py.par_n</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_N<sp/>=<sp/>ParInfo_petsc4py.par_N</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_nghost<sp/>=<sp/>ParInfo_petsc4py.par_nghost</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_subdomain2global_petsc<sp/>=<sp/>ParInfo_petsc4py.petsc_subdomain2global_petsc</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subdomain2global<sp/>=<sp/>ParInfo_petsc4py.subdomain2global</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc2proteus_subdomain<sp/>=<sp/>ParInfo_petsc4py.petsc2proteus_subdomain</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proteus2petsc_subdomain<sp/>=<sp/>ParInfo_petsc4py.proteus2petsc_subdomain</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>=<sp/>ParInfo_petsc4py.dim</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ARB<sp/>-<sp/>this<sp/>is<sp/>largely<sp/>copied<sp/>from<sp/>Transport.py,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>a<sp/>refactor<sp/>should<sp/>be<sp/>done<sp/>to<sp/>elimate<sp/>this<sp/>duplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr,<sp/>colind,<sp/>nzval<sp/>=<sp/>operator.getCSRrepresentation()</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr_petsc<sp/>=<sp/>rowptr.copy()</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colind_petsc<sp/>=<sp/>colind.copy()</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval_petsc<sp/>=<sp/>nzval.copy()</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval_proteus2petsc<sp/>=<sp/>colind.copy()</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval_petsc2proteus<sp/>=<sp/>colind.copy()</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr_petsc[0]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(par_n+par_nghost):</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_proteus<sp/>=<sp/>rowptr[petsc2proteus_subdomain[i]]</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_proteus<sp/>=<sp/>rowptr[petsc2proteus_subdomain[i]+1]</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzrow<sp/>=<sp/>end_proteus<sp/>-<sp/>start_proteus</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr_petsc[i+1]<sp/>=<sp/>rowptr_petsc[i]<sp/>+<sp/>nzrow</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_petsc<sp/>=<sp/>rowptr_petsc[i]</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_petsc<sp/>=<sp/>rowptr_petsc[i+1]</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_cols_i<sp/>=<sp/>proteus2petsc_subdomain[colind[start_proteus:end_proteus]]</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j_sorted<sp/>=<sp/>petsc_cols_i.argsort()</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colind_petsc[start_petsc:end_petsc]<sp/>=<sp/>petsc_cols_i[j_sorted]</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval_petsc[start_petsc:end_petsc]<sp/>=<sp/>nzval[start_proteus:end_proteus][j_sorted]</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j_petsc,<sp/>j_proteus<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(numpy.arange(start_petsc,end_petsc),</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numpy.arange(start_proteus,end_proteus)[j_sorted]):</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval_petsc2proteus[j_petsc]<sp/>=<sp/>j_proteus</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval_proteus2petsc[j_proteus]<sp/>=<sp/>j_petsc</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proteus_a<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_a<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(dim):</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j,k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(colind[rowptr[i]:rowptr[i+1]],list(range(rowptr[i],rowptr[i+1]))):</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proteus_a[i,j]<sp/>=<sp/>nzval[k]</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_a[proteus2petsc_subdomain[i],proteus2petsc_subdomain[j]]<sp/>=<sp/>nzval[k]</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(dim):</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j,k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(colind_petsc[rowptr_petsc[i]:rowptr_petsc[i+1]],list(range(rowptr_petsc[i],rowptr_petsc[i+1]))):</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval_petsc[k]<sp/>=<sp/>petsc_a[i,j]</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#additional<sp/>stuff<sp/>needed<sp/>for<sp/>petsc<sp/>par<sp/>mat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_jacobian<sp/>=<sp/><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a42ae20ab68e5e9fc1025868daed76eea" kindref="member">SparseMat</ref>(dim,dim,nzval_petsc.shape[0],<sp/>nzval_petsc,<sp/>colind_petsc,<sp/>rowptr_petsc)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cls(petsc_jacobian,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_bs,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_n,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_N,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_nghost,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_subdomain2global_petsc,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proteus_jacobian<sp/>=<sp/>operator,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval_proteus2petsc=nzval_proteus2petsc)</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ParMat__petsc4py_1a1a2eaadc25f5afb040528c651aaf8125" kindref="member">save</ref>(self,<sp/>filename):</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Saves<sp/>to<sp/>disk<sp/>using<sp/>a<sp/>PETSc<sp/>binary<sp/>viewer.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_petsc_view(self,<sp/>filename)</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a9d435081f13773ea83cc7a810ee1aff1" kindref="member">Vec</ref>(n):</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="725"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Build<sp/>a<sp/>vector<sp/>of<sp/>length<sp/>n<sp/>(using<sp/>numpy)</highlight></codeline>
<codeline lineno="726"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="727"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>For<sp/>example::</highlight></codeline>
<codeline lineno="728"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="729"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>Vec(3)</highlight></codeline>
<codeline lineno="730"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>array([<sp/>0.,<sp/><sp/>0.,<sp/><sp/>0.])</highlight></codeline>
<codeline lineno="731"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="732"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numpy.zeros((n,),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a5d6af2f602552724ddbcea24b486ba59" kindref="member">Mat</ref>(m,n):</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="738"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Build<sp/>an<sp/>m<sp/>x<sp/>n<sp/>matrix<sp/>(using<sp/>numpy)</highlight></codeline>
<codeline lineno="739"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="740"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>For<sp/>example::</highlight></codeline>
<codeline lineno="741"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="742"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>Mat(2,3)</highlight></codeline>
<codeline lineno="743"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>array([[<sp/>0.,<sp/><sp/>0.,<sp/><sp/>0.],</highlight></codeline>
<codeline lineno="744"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>0.,<sp/><sp/>0.,<sp/><sp/>0.]])</highlight></codeline>
<codeline lineno="745"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="746"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numpy.zeros((m,n),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a83d4380d20b040f6fddde5d173bae547" kindref="member">SparseMatFromDict</ref>(nr,nc,aDict):</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="752"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Build<sp/>a<sp/>nr<sp/>x<sp/>nc<sp/>sparse<sp/>matrix<sp/>from<sp/>a<sp/>dictionary<sp/>representation</highlight></codeline>
<codeline lineno="753"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>superluWrappers</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>indeces<sp/>=<sp/>list(aDict.keys())</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>indeces.sort()</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>nnz<sp/><sp/><sp/><sp/><sp/>=<sp/>len(indeces)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>nzval<sp/><sp/><sp/>=<sp/>numpy.zeros((nnz,),</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>rowptr<sp/><sp/>=<sp/>numpy.zeros((nr+1,),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>colind<sp/><sp/>=<sp/>numpy.zeros((nnz,),</highlight><highlight class="stringliteral">&apos;i&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>i=0</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>k=0</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>rowptr[i]=0</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>ij<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>indeces:</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nzval[k]<sp/>=<sp/>aDict[ij]</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colind[k]<sp/>=<sp/>ij[1]</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ij[0]<sp/>&gt;<sp/>i:</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowptr[i]=k</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k+=1</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>rowptr[i+1]<sp/>=<sp/>k</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespaceproteus_1_1LinearAlgebraTools_1a42ae20ab68e5e9fc1025868daed76eea" kindref="member">SparseMat</ref>(nr,nc,nnz,nzval,colind,rowptr),nzval)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a42ae20ab68e5e9fc1025868daed76eea" kindref="member">SparseMat</ref>(nr,nc,nnz,nzval,colind,rowptr):</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Build<sp/>a<sp/>nr<sp/>x<sp/>nc<sp/>sparse<sp/>matrix<sp/>from<sp/>the<sp/>CSR<sp/>data<sp/>structures</highlight></codeline>
<codeline lineno="777"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="778"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="779"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="780"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>nr<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="781"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>rows.</highlight></codeline>
<codeline lineno="782"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>nc<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="783"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>columns.</highlight></codeline>
<codeline lineno="784"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>nnz<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="785"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>non-zero<sp/>matrix<sp/>entries.</highlight></codeline>
<codeline lineno="786"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>nzval<sp/>:<sp/>numpy<sp/>array</highlight></codeline>
<codeline lineno="787"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>with<sp/>non-zero<sp/>matrix<sp/>entries.</highlight></codeline>
<codeline lineno="788"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>colind<sp/>:<sp/>numpy<sp/>array<sp/>of<sp/>32bit<sp/>integers</highlight></codeline>
<codeline lineno="789"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSR<sp/>column<sp/>array.</highlight></codeline>
<codeline lineno="790"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>rowptr<sp/>:<sp/>numpy<sp/>array<sp/>of<sp/>32bit<sp/>integers</highlight></codeline>
<codeline lineno="791"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CSR<sp/>row<sp/>pointer.</highlight></codeline>
<codeline lineno="792"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="793"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="794"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="795"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sparse_matrix<sp/>:<sp/>:class:`proteus.superluWrappers.SparseMatrix`</highlight></codeline>
<codeline lineno="796"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>superlu<sp/>sparse<sp/>matrix<sp/>in<sp/>CSR<sp/>format.</highlight></codeline>
<codeline lineno="797"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="798"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Note</highlight></codeline>
<codeline lineno="799"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----</highlight></codeline>
<codeline lineno="800"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>For<sp/>the<sp/>superluWrapper,<sp/>both<sp/>the<sp/>colind<sp/>and<sp/>rowptr<sp/>should<sp/>use</highlight></codeline>
<codeline lineno="801"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>32-bit<sp/>integer<sp/>data<sp/>types.</highlight></codeline>
<codeline lineno="802"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colind.dtype<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;int32&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>rowptr.dtype<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;int32&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jf_8h_1a665602667543592b4547008b72a9631b" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&apos;ERROR<sp/>-<sp/>colind<sp/>and<sp/>rowptr<sp/>must<sp/>be<sp/>&quot;int32&quot;<sp/>numpy<sp/>arrays<sp/>for<sp/>&apos;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;superluWrappers&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>superluWrappers.SparseMatrix(nr,nc,nnz,nzval,colind,rowptr)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809" refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell" kindref="compound">SparseMatShell</ref>(object):</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Build<sp/>a<sp/>parallel<sp/>matrix<sp/>shell<sp/>from<sp/>CSR<sp/>data<sp/>structures.</highlight></codeline>
<codeline lineno="811"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="812"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="813"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="814"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ghosted_csr_mat:<sp/>:class:<sp/>`proteus.superluWrappers.SparseMatrix`</highlight></codeline>
<codeline lineno="815"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell_1a11f4304813e01b355407382ff4679cc8" kindref="member">__init__</ref>(self,ghosted_csr_mat):</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell_1a6b7961d7b98e6c5995a895d3961a9b6a" kindref="member">ghosted_csr_mat</ref>=ghosted_csr_mat</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell_1a246a12ca329916f552551dad78cd0375" kindref="member">par_b</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell_1a8891ac1ebfde0cf303ae73a45fb41924" kindref="member">xGhosted</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell_1ae463788c80b8c4ef8cb652818761fe64" kindref="member">yGhosted</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell_1a509b2011eb51b11ec7956d5e2748c986" kindref="member">create</ref>(self,<sp/>A):</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1SparseMatShell_1ac4a4743d8323dd45ff8794e0b783b84a" kindref="member">mult</ref>(self,<sp/>A,<sp/>x,<sp/>y):</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>self.par_b<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>parallel<sp/>RHS<sp/>vector<sp/>par_b<sp/>must<sp/>be<sp/>&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;initialized<sp/>before<sp/>using<sp/>the<sp/>mult<sp/>function&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceproteus_1_1tests_1_1CLSVOF_1_1disc__ICs_1_1clsvof__p_1acb916366ed50abb893e36903fd6359e4" kindref="member">logEvent</ref>(</highlight><highlight class="stringliteral">&quot;Using<sp/>SparseMatShell<sp/>in<sp/>LinearSolver<sp/>matrix<sp/>multiply&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.xGhosted<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xGhosted<sp/>=<sp/>self.par_b.duplicate()</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.yGhosted<sp/>=<sp/>self.par_b.duplicate()</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xGhosted.setArray(x.getArray())</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xGhosted.ghostUpdateBegin(p4pyPETSc.InsertMode.INSERT,p4pyPETSc.ScatterMode.FORWARD)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xGhosted.ghostUpdateEnd(p4pyPETSc.InsertMode.INSERT,p4pyPETSc.ScatterMode.FORWARD)</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.yGhosted.zeroEntries()</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.xGhosted.localForm()<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>xlf,<sp/>self.yGhosted.localForm()<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>ylf:</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ghosted_csr_mat.matvec(xlf.getArray(),ylf.getArray())</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y.setArray(self.yGhosted.getArray())</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838" refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell" kindref="compound">OperatorShell</ref>(object):</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>A<sp/>base<sp/>class<sp/>for<sp/>operator<sp/>shells<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a93d6a84089b94f318cff7c34741bba6b" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>(self,A):</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a3d33de33c34ad73c22b2d6276bed2242" kindref="member">getSize</ref>(self):</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="846"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return<sp/>the<sp/>number<sp/>of<sp/>degrees<sp/>of<sp/>freedom<sp/>for<sp/>the<sp/>operator.</highlight></codeline>
<codeline lineno="847"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>NotImplementedError(</highlight><highlight class="stringliteral">&apos;You<sp/>need<sp/>to<sp/>define<sp/>a<sp/>getSize<sp/>&apos;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;method<sp/>for<sp/>your<sp/>shell&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851" refid="classproteus_1_1LinearAlgebraTools_1_1ProductOperatorShell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ProductOperatorShell" kindref="compound">ProductOperatorShell</ref>(<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell" kindref="compound">OperatorShell</ref>):</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>A<sp/>base<sp/>class<sp/>for<sp/>shell<sp/>operators<sp/>that<sp/>apply<sp/>multiplcation.</highlight></codeline>
<codeline lineno="853"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="854"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Operators<sp/>derived<sp/>from<sp/>this<sp/>class<sp/>should<sp/>have<sp/>working<sp/>multiplication</highlight></codeline>
<codeline lineno="855"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>functions.</highlight></codeline>
<codeline lineno="856"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ProductOperatorShell_1ac79de613bf9a393c0f7066661348f6c7" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1ProductOperatorShell_1a1d1d062bfcda677539664acab9beb528" kindref="member">mult</ref>(self,<sp/>A,<sp/>x,<sp/>y):</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>NotImplementedError(</highlight><highlight class="stringliteral">&apos;You<sp/>need<sp/>to<sp/>define<sp/>a<sp/>multiply&apos;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;function<sp/>for<sp/>your<sp/>shell&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863" refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell" kindref="compound">InvOperatorShell</ref>(<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell" kindref="compound">OperatorShell</ref>):</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>A<sp/>base<sp/>class<sp/>for<sp/>inverse<sp/>operator<sp/>shells</highlight></codeline>
<codeline lineno="865"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="866"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Operators<sp/>derived<sp/>from<sp/>this<sp/>class<sp/>should<sp/>have<sp/>working<sp/>apply</highlight></codeline>
<codeline lineno="867"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>functions.</highlight></codeline>
<codeline lineno="868"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aed70a091d8124289705ec6c82c900431" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>@staticmethod</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_create_tmp_vec(size):</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Creates<sp/>an<sp/>empty<sp/>vector<sp/>of<sp/>given<sp/>size.</highlight></codeline>
<codeline lineno="875"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="876"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arguments</highlight></codeline>
<codeline lineno="877"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---------</highlight></codeline>
<codeline lineno="878"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="879"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>the<sp/>temporary<sp/>vector.</highlight></codeline>
<codeline lineno="880"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="881"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="882"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="883"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec<sp/>:<sp/>PETSc<sp/>vector</highlight></codeline>
<codeline lineno="884"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>p4pyPETSc.Vec().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.setType(</highlight><highlight class="stringliteral">&apos;mpi&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.setSizes(size)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>@staticmethod</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_create_copy_vec(vec):</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Creates<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>petsc4py<sp/>vector.</highlight></codeline>
<codeline lineno="893"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="894"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="895"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="896"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vec<sp/>:<sp/>:class:`petsc4py.Vec`</highlight></codeline>
<codeline lineno="897"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="898"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="899"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="900"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>:<sp/>:class:`petsc4py.Vec`</highlight></codeline>
<codeline lineno="901"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>p4pyPETSc.Vec().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.setType(</highlight><highlight class="stringliteral">&apos;mpi&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>vec.copy()</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ad442294be082ef71b674d7be98e3a8ec" kindref="member">apply</ref>(self,<sp/>A,<sp/>x,<sp/>y):</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>NotImplementedError(</highlight><highlight class="stringliteral">&apos;You<sp/>need<sp/>to<sp/>define<sp/>an<sp/>apply&apos;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;method<sp/>for<sp/>your<sp/>shell&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aaddd791dfc3978090f24ad1fc8c0bea0" kindref="member">getSize</ref>(self):</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Returns<sp/>the<sp/>size<sp/>of<sp/>InvOperatorShell.</highlight></codeline>
<codeline lineno="913"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="914"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="915"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="916"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>acts<sp/>a<sp/>virtual<sp/>method<sp/>and<sp/>must<sp/>be<sp/>implemented<sp/>for<sp/></highlight></codeline>
<codeline lineno="917"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>inherited<sp/>classes.</highlight></codeline>
<codeline lineno="918"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>NotImplementedError()</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1abb1afc5243b85ca1430a06de4f2c7ebf" kindref="member">create_petsc_ksp_obj</ref>(self,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_option_prefix,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix_operator,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant_null_space<sp/>=<sp/>False):</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Create<sp/>a<sp/>PETSc4py<sp/>KSP<sp/>object.</highlight></codeline>
<codeline lineno="926"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="927"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arguments</highlight></codeline>
<codeline lineno="928"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---------</highlight></codeline>
<codeline lineno="929"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>petsc_option_prefix<sp/>:<sp/>str</highlight></codeline>
<codeline lineno="930"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PETSc<sp/>commandline<sp/>option<sp/>prefix.</highlight></codeline>
<codeline lineno="931"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix_operator<sp/>:<sp/>mat</highlight></codeline>
<codeline lineno="932"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PETSc<sp/>matrix<sp/>object<sp/>for<sp/>the<sp/>ksp<sp/>class.</highlight></codeline>
<codeline lineno="933"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null_space<sp/>:<sp/>bool</highlight></codeline>
<codeline lineno="934"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>True<sp/>if<sp/>the<sp/>KSP<sp/>object<sp/>has<sp/>a<sp/>constant<sp/>null<sp/>space.</highlight></codeline>
<codeline lineno="935"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="936"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="937"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="938"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp_obj<sp/>:<sp/>PETSc<sp/>ksp</highlight></codeline>
<codeline lineno="939"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp_obj<sp/>=<sp/>p4pyPETSc.KSP().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp_obj.setOperators(matrix_operator,</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix_operator)</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp_obj.setOptionsPrefix(petsc_option_prefix)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constant_null_space:</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_nullspace_str<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join([petsc_option_prefix,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ksp_constant_null_space&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.options.setValue(const_nullspace_str,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix_operator.setNullSpace(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aeab0296c8530fe8b58e72d040888f3a3" kindref="member">const_null_space</ref>)</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp_obj.setFromOptions()</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp_obj.setUp()</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ksp_obj</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_create_constant_nullspace(self):</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Initialize<sp/>a<sp/>constant<sp/>null<sp/>space.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aeab0296c8530fe8b58e72d040888f3a3" kindref="member">const_null_space</ref><sp/>=<sp/>p4pyPETSc.NullSpace().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>(comm=p4pyPETSc.COMM_WORLD,</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectors<sp/>=<sp/>(),</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_set_dirichlet_idx_set(self):</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="963"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialize<sp/>an<sp/>index<sp/>set<sp/>of<sp/>non-Dirichlet<sp/>degrees<sp/>of<sp/>freedom.</highlight></codeline>
<codeline lineno="964"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="965"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>the<sp/>value<sp/>of<sp/>some<sp/>degrees<sp/>of<sp/>freedom<sp/>are<sp/>known<sp/>in</highlight></codeline>
<codeline lineno="966"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advance<sp/>it<sp/>can<sp/>be<sp/>helfpul<sp/>to<sp/>remove<sp/>these<sp/>degrees<sp/>of</highlight></codeline>
<codeline lineno="967"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freedom<sp/>from<sp/>the<sp/>inverse<sp/>operator.<sp/><sp/>This<sp/>function</highlight></codeline>
<codeline lineno="968"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creates<sp/>a<sp/>PETSc4py<sp/>index<sp/>set<sp/>of<sp/>unknown<sp/>degrees<sp/>of<sp/>freedom.</highlight></codeline>
<codeline lineno="969"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>=<sp/>Comm.get()</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Assign<sp/>number<sp/>of<sp/>unknowns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dof<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a3d33de33c34ad73c22b2d6276bed2242" kindref="member">getSize</ref>()</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ad5ae441c6c3f313f93e3e6b686f1713b" kindref="member">strong_dirichlet_DOF</ref><sp/>=<sp/>[i<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ad5ae441c6c3f313f93e3e6b686f1713b" kindref="member">strong_dirichlet_DOF</ref><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>i&lt;<sp/>num_dof]</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_known_dof<sp/>=<sp/>len(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ad5ae441c6c3f313f93e3e6b686f1713b" kindref="member">strong_dirichlet_DOF</ref>)</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>AttributeError:</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="jf_8h_1a665602667543592b4547008b72a9631b" kindref="member">print</ref>(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>-<sp/>strong_dirichlet_DOF<sp/>have<sp/>not<sp/>been<sp/>&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>assigned<sp/>for<sp/>this<sp/>inverse<sp/>operator<sp/>object.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit()</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_unknown_dof<sp/>=<sp/>num_dof<sp/>-<sp/>num_known_dof</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>boolean<sp/>mask<sp/>to<sp/>collect<sp/>unknown<sp/>DOF<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a980b2f751cf9af1926a220198430a918" kindref="member">dof_indices</ref><sp/>=<sp/>numpy.arange(num_dof,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dtype<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;int32&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>known_dof_mask<sp/>=<sp/>numpy.ones(num_dof,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dtype<sp/>=<sp/>bool)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>known_dof_mask[self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ad5ae441c6c3f313f93e3e6b686f1713b" kindref="member">strong_dirichlet_DOF</ref>]<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ad21c8c05483c4c92b24a10a1d62d7c4d" kindref="member">unknown_dof_indices</ref><sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a980b2f751cf9af1926a220198430a918" kindref="member">dof_indices</ref>[known_dof_mask]</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aef731323fd96d9fbc4d3bb012c6a3117" kindref="member">known_dof_indices</ref><sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a980b2f751cf9af1926a220198430a918" kindref="member">dof_indices</ref>[~known_dof_mask]</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>comm.size()<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>PETSc4py<sp/>index<sp/>set<sp/>of<sp/>unknown<sp/>DOF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aa43875d02ca6dcf62d8fd4b6c8b04cb2" kindref="member">known_dof_is</ref><sp/>=<sp/>p4pyPETSc.IS()</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aa43875d02ca6dcf62d8fd4b6c8b04cb2" kindref="member">known_dof_is</ref>.createGeneral(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aef731323fd96d9fbc4d3bb012c6a3117" kindref="member">known_dof_indices</ref>,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm=p4pyPETSc.COMM_WORLD)</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a8d45501e5967d8b72cafbaf299d85492" kindref="member">unknown_dof_is</ref><sp/>=<sp/>p4pyPETSc.IS()</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a8d45501e5967d8b72cafbaf299d85492" kindref="member">unknown_dof_is</ref>.createGeneral(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ad21c8c05483c4c92b24a10a1d62d7c4d" kindref="member">unknown_dof_indices</ref>,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm=p4pyPETSc.COMM_WORLD)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>comm.size()<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a6fcd238adc516145cce0bc283c3a2fbf" kindref="member">global_known_dof_indices</ref><sp/>=<sp/>[self.par_info.subdomain2global[i]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aef731323fd96d9fbc4d3bb012c6a3117" kindref="member">known_dof_indices</ref>]</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a3f9ad1ce7e83a77c29a035298545dfc4" kindref="member">global_unknown_dof_indices</ref><sp/>=<sp/>[self.par_info.subdomain2global[i]<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ad21c8c05483c4c92b24a10a1d62d7c4d" kindref="member">unknown_dof_indices</ref>]</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aa43875d02ca6dcf62d8fd4b6c8b04cb2" kindref="member">known_dof_is</ref><sp/>=<sp/>p4pyPETSc.IS()</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aa43875d02ca6dcf62d8fd4b6c8b04cb2" kindref="member">known_dof_is</ref>.createGeneral(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a6fcd238adc516145cce0bc283c3a2fbf" kindref="member">global_known_dof_indices</ref>,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm=p4pyPETSc.COMM_WORLD)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a8d45501e5967d8b72cafbaf299d85492" kindref="member">unknown_dof_is</ref><sp/>=<sp/>p4pyPETSc.IS()</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a8d45501e5967d8b72cafbaf299d85492" kindref="member">unknown_dof_is</ref>.createGeneral(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a3f9ad1ce7e83a77c29a035298545dfc4" kindref="member">global_unknown_dof_indices</ref>,</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm=p4pyPETSc.COMM_WORLD)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_converged_trueRes(self,ksp,its,rnorm):</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Function<sp/>handle<sp/>to<sp/>feed<sp/>to<sp/>ksp&apos;s<sp/>setConvergenceTest<sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp.buildResidual(self.r_work)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>truenorm<sp/>=<sp/>self.r_work.<ref refid="namespaceproteus_1_1EGeometry_1a344fe259680891d4a7b7e5ba89ed10e4" kindref="member">norm</ref>()</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>its<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a1e46fc20c96880f361149a02cd43a212" kindref="member">rnorm0</ref><sp/>=<sp/>truenorm</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ARB<sp/>-<sp/>Leaving<sp/>these<sp/>log<sp/>events<sp/>in<sp/>for<sp/>future<sp/>debugging<sp/>purposes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logEvent(&quot;NumericalAnalytics<sp/>KSP_LSC_LaplaceResidual:<sp/>%12.5e&quot;<sp/>%(truenorm)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logEvent(&quot;NumericalAnalytics<sp/>KSP_LSC_LaplaceResidual(relative):<sp/>%12.5e&quot;<sp/>%(truenorm<sp/>/<sp/>self.rnorm0)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logEvent(&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KSP<sp/>it<sp/>%i<sp/>norm(r)<sp/>=<sp/>%e<sp/><sp/>norm(r)/|b|<sp/>=<sp/>%e<sp/>;<sp/>atol=%e<sp/>rtol=%e<sp/>&quot;<sp/>%<sp/>(its,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>truenorm,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(truenorm/<sp/>self.rnorm0),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp.atol,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp.rtol))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ARB<sp/>-<sp/>Leaving<sp/>these<sp/>log<sp/>events<sp/>in<sp/>for<sp/>future<sp/>debugging<sp/>purposes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logEvent(&quot;NumericalAnalytics<sp/>KSP_LSC_LaplaceResidual:<sp/>%12.5e&quot;<sp/>%(truenorm)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logEvent(&quot;NumericalAnalytics<sp/>KSP_LSC_LaplaceResidual(relative):<sp/>%12.5e&quot;<sp/>%(truenorm<sp/>/<sp/>self.rnorm0)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>logEvent(&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KSP<sp/>it<sp/>%i<sp/>norm(r)<sp/>=<sp/>%e<sp/><sp/>norm(r)/|b|<sp/>=<sp/>%e<sp/>;<sp/>atol=%e<sp/>rtol=%e<sp/>&quot;<sp/>%<sp/>(its,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>truenorm,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(truenorm/<sp/>self.rnorm0),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp.atol,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ksp.rtol))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>truenorm<sp/>&lt;<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a1e46fc20c96880f361149a02cd43a212" kindref="member">rnorm0</ref>*ksp.rtol:</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p4pyPETSc.KSP.ConvergedReason.CONVERGED_RTOL</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>truenorm<sp/>&lt;<sp/>ksp.atol:</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p4pyPETSc.KSP.ConvergedReason.CONVERGED_ATOL</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041" refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell" kindref="compound">LSCInv_shell</ref>(<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell" kindref="compound">InvOperatorShell</ref>):</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Shell<sp/>class<sp/>for<sp/>the<sp/>LSC<sp/>Inverse<sp/>Preconditioner</highlight></codeline>
<codeline lineno="1043"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1044"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>creates<sp/>a<sp/>shell<sp/>for<sp/>the<sp/>least-squares<sp/>commutator<sp/>(LSC)</highlight></codeline>
<codeline lineno="1045"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>preconditioner,<sp/>where</highlight></codeline>
<codeline lineno="1046"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`M_{s}=<sp/>(B<sp/>\hat{Q^{-1}_{v}}<sp/>B^{&apos;})<sp/>(B<sp/>\hat{Q^{-1}_{v}}<sp/>F</highlight></codeline>
<codeline lineno="1047"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>\hat{Q^{-1}_{v}}<sp/>B^{&apos;})^{-1}<sp/>(B<sp/>\hat{Q^{-1}_{v}}<sp/>B^{&apos;})`</highlight></codeline>
<codeline lineno="1048"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>is<sp/>used<sp/>to<sp/>approximate<sp/>the<sp/>Schur<sp/>complement.</highlight></codeline>
<codeline lineno="1049"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1ac4a917547342b27cfe9e856ce73dd38d" kindref="member">__init__</ref>(self,<sp/>Qv,<sp/>B,<sp/>Bt,<sp/>F):</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Initializes<sp/>the<sp/>LSC<sp/>inverse<sp/>operator.</highlight></codeline>
<codeline lineno="1052"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1053"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1054"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1055"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qv<sp/>:<sp/>petsc4py<sp/>matrix<sp/>object</highlight></codeline>
<codeline lineno="1056"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>diagonal<sp/>elements<sp/>of<sp/>the<sp/>velocity<sp/>mass<sp/>matrix.</highlight></codeline>
<codeline lineno="1057"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>:<sp/>petsc4py<sp/>matrix<sp/>object</highlight></codeline>
<codeline lineno="1058"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>discrete<sp/>divergence<sp/>operator.</highlight></codeline>
<codeline lineno="1059"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bt<sp/>:<sp/>petsc4py<sp/>matrix<sp/>object</highlight></codeline>
<codeline lineno="1060"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>discrete<sp/>gradient<sp/>operator.</highlight></codeline>
<codeline lineno="1061"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>:<sp/>petsc4py<sp/>matrix<sp/>object</highlight></codeline>
<codeline lineno="1062"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>A-block<sp/>of<sp/>the<sp/>linear<sp/>system.</highlight></codeline>
<codeline lineno="1063"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO<sp/>-<sp/>Find<sp/>a<sp/>good<sp/>way<sp/>to<sp/>assert<sp/>that<sp/>Qv<sp/>is<sp/>diagonal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a956f7ac7c1c43093b09e9c6dca199fc0" kindref="member">Qv</ref><sp/>=<sp/>Qv</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a8564e243fd88f9655aa7b93189800619" kindref="member">B</ref><sp/>=<sp/>B</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a408576e6b39d9cc18ad1e9507e8c8fd1" kindref="member">Bt</ref><sp/>=<sp/>Bt</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1ad2bfe14cc386d6d6f1ffda5715a02945" kindref="member">F</ref><sp/>=<sp/>F</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1afd1afdf755a37a48eda979e36ff74af5" kindref="member">_constructBQinvBt</ref>()</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1afaefa449bbd64992de83f20d21a8a13a" kindref="member">_options</ref><sp/>=<sp/>p4pyPETSc.Options()</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1afaefa449bbd64992de83f20d21a8a13a" kindref="member">_options</ref>.hasName(</highlight><highlight class="stringliteral">&apos;innerLSCsolver_BTinvBt_ksp_constant_null_space&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1af8b034e8e812eca9813a5f774b9819f6" kindref="member">_create_constant_nullspace</ref>()</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a45dad3f18b7063fff822f757a2df5b56" kindref="member">BQinvBt</ref>.setNullSpace(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aeab0296c8530fe8b58e72d040888f3a3" kindref="member">const_null_space</ref>)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref><sp/>=<sp/>p4pyPETSc.KSP().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref>.setOperators(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a45dad3f18b7063fff822f757a2df5b56" kindref="member">BQinvBt</ref>,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a45dad3f18b7063fff822f757a2df5b56" kindref="member">BQinvBt</ref>)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref>.setOptionsPrefix(</highlight><highlight class="stringliteral">&apos;innerLSCsolver_BTinvBt_&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref>.pc.setUp()</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref>.setFromOptions()</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref>.setUp()</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initialize<sp/>solver<sp/>for<sp/>Qv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a4d353744464590d69f548d9f2ad5e84a" kindref="member">kspQv</ref><sp/>=<sp/>p4pyPETSc.KSP().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a4d353744464590d69f548d9f2ad5e84a" kindref="member">kspQv</ref>.setOperators(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a956f7ac7c1c43093b09e9c6dca199fc0" kindref="member">Qv</ref>,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a956f7ac7c1c43093b09e9c6dca199fc0" kindref="member">Qv</ref>)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a4d353744464590d69f548d9f2ad5e84a" kindref="member">kspQv</ref>.setOptionsPrefix(</highlight><highlight class="stringliteral">&apos;innerLSCsolver_T_&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a4d353744464590d69f548d9f2ad5e84a" kindref="member">kspQv</ref>.setFromOptions()</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convergenceTest<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;r-true&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>convergenceTest<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;r-true&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1aa6b2ce4828f766fd100117b62995b75f" kindref="member">r_work</ref><sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a45dad3f18b7063fff822f757a2df5b56" kindref="member">BQinvBt</ref>.getVecLeft()</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a1e46fc20c96880f361149a02cd43a212" kindref="member">rnorm0</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref>.setConvergenceTest(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a8f369f6ca5b87140378c06b053e13f4c" kindref="member">_converged_trueRes</ref>)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1aa6b2ce4828f766fd100117b62995b75f" kindref="member">r_work</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref>.setUp()</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a1f009d3eca4d81006c628736118563c9" kindref="member">apply</ref>(self,A,x,y):</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Apply<sp/>the<sp/>LSC<sp/>inverse<sp/>operator</highlight></codeline>
<codeline lineno="1102"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>:<sp/>NULL</highlight></codeline>
<codeline lineno="1106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>placeholder<sp/>for<sp/>internal<sp/>function<sp/>PETSc<sp/>functions.</highlight></codeline>
<codeline lineno="1107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>:<sp/>:class:`p4pyPETSc.Vec`</highlight></codeline>
<codeline lineno="1108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector<sp/>which<sp/>LSC<sp/>operator<sp/>is<sp/>being<sp/>applied<sp/>to.</highlight></codeline>
<codeline lineno="1109"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline lineno="1112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>:<sp/>:class:`p4pyPETSc.Vec`</highlight></codeline>
<codeline lineno="1113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>of<sp/>LSC<sp/>acting<sp/>on<sp/>x.</highlight></codeline>
<codeline lineno="1114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>create<sp/>temporary<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B_sizes<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a8564e243fd88f9655aa7b93189800619" kindref="member">B</ref>.getSizes()</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_tmp<sp/>=<sp/>p4pyPETSc.Vec().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_tmp<sp/>=<sp/>x.copy()</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1af252a29dc76adf1d25614da3ff4eba24" kindref="member">_create_tmp_vec</ref>(B_sizes[0])</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1af252a29dc76adf1d25614da3ff4eba24" kindref="member">_create_tmp_vec</ref>(B_sizes[1])</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp3<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1af252a29dc76adf1d25614da3ff4eba24" kindref="member">_create_tmp_vec</ref>(B_sizes[1])</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1afaefa449bbd64992de83f20d21a8a13a" kindref="member">_options</ref>.hasName(</highlight><highlight class="stringliteral">&apos;innerLSCsolver_BTinvBt_ksp_constant_null_space&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aeab0296c8530fe8b58e72d040888f3a3" kindref="member">const_null_space</ref>.remove(x_tmp)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref>.solve(x_tmp,tmp1)</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a8564e243fd88f9655aa7b93189800619" kindref="member">B</ref>.multTranspose(tmp1,tmp2)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a4d353744464590d69f548d9f2ad5e84a" kindref="member">kspQv</ref>.solve(tmp2,tmp3)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1ad2bfe14cc386d6d6f1ffda5715a02945" kindref="member">F</ref>.mult(tmp3,tmp2)</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a4d353744464590d69f548d9f2ad5e84a" kindref="member">kspQv</ref>.solve(tmp2,tmp3)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a8564e243fd88f9655aa7b93189800619" kindref="member">B</ref>.mult(tmp3,tmp1)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1afaefa449bbd64992de83f20d21a8a13a" kindref="member">_options</ref>.hasName(</highlight><highlight class="stringliteral">&apos;innerLSCsolver_BTinvBt_ksp_constant_null_space&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aeab0296c8530fe8b58e72d040888f3a3" kindref="member">const_null_space</ref>.remove(x_tmp)</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a12afa8542404a2e100cc0d01adc2a356" kindref="member">kspBQinvBt</ref>.solve(tmp1,y)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>numpy.isnan(y.norm())==</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Applying<sp/>the<sp/>schur<sp/>complement<sp/>\</highlight></codeline>
<codeline lineno="1135"><highlight class="stringliteral">resulted<sp/>in<sp/>not-a-number.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_constructBQinvBt(self):</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Private<sp/>method<sp/>repsonsible<sp/>for<sp/>building<sp/>BQinvBt<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a8fcb39300ad74bc8a6e5f8e94c40fc59" kindref="member">Qv_inv</ref><sp/>=<sp/><ref refid="namespaceproteus_1_1LinearAlgebraTools_1aa343117c9ace03b092e8c15908133352" kindref="member">petsc_create_diagonal_inv_matrix</ref>(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a956f7ac7c1c43093b09e9c6dca199fc0" kindref="member">Qv</ref>)</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QinvBt<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a8fcb39300ad74bc8a6e5f8e94c40fc59" kindref="member">Qv_inv</ref>.matMult(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a408576e6b39d9cc18ad1e9507e8c8fd1" kindref="member">Bt</ref>)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a45dad3f18b7063fff822f757a2df5b56" kindref="member">BQinvBt</ref><sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1LSCInv__shell_1a8564e243fd88f9655aa7b93189800619" kindref="member">B</ref>.matMult(QinvBt)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143" refid="classproteus_1_1LinearAlgebraTools_1_1MatrixShell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixShell" kindref="compound">MatrixShell</ref>(<ref refid="classproteus_1_1LinearAlgebraTools_1_1ProductOperatorShell" kindref="compound">ProductOperatorShell</ref>):</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>A<sp/>shell<sp/>class<sp/>for<sp/>a<sp/>matrix.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixShell_1a82113f6a2e3c1542a96130f9b550aaad" kindref="member">__init__</ref>(self,A):</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Specifies<sp/>a<sp/>basic<sp/>matrix<sp/>shell.</highlight></codeline>
<codeline lineno="1148"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>:<sp/>matrix</highlight></codeline>
<codeline lineno="1152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>petsc4py<sp/>matrix<sp/>object</highlight></codeline>
<codeline lineno="1153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixShell_1a789e6d04a6efd803179594841cb360c0" kindref="member">A</ref><sp/>=<sp/>A</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixShell_1ad5fc9d556e3f8ea402e879f7ebd52fcb" kindref="member">mult</ref>(self,A,x,y):</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Multiply<sp/>the<sp/>matrix<sp/>and<sp/>x.</highlight></codeline>
<codeline lineno="1158"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>:<sp/>matrix</highlight></codeline>
<codeline lineno="1162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dummy<sp/>place<sp/>holder<sp/>for<sp/>PETSc<sp/>compatibility</highlight></codeline>
<codeline lineno="1163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>:<sp/>vector</highlight></codeline>
<codeline lineno="1164"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="1167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>:<sp/>vector</highlight></codeline>
<codeline lineno="1168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixShell_1a789e6d04a6efd803179594841cb360c0" kindref="member">A</ref>.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixShell_1ad5fc9d556e3f8ea402e879f7ebd52fcb" kindref="member">mult</ref>(x,y)</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171" refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell" kindref="compound">MatrixInvShell</ref>(<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell" kindref="compound">InvOperatorShell</ref>):</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>A<sp/>PETSc<sp/>shell<sp/>class<sp/>for<sp/>a<sp/>inverse<sp/>operator.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1ad2b11e92c7ee354ff345ae91888e570d" kindref="member">__init__</ref>(self,<sp/>A):</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Initializes<sp/>operators<sp/>and<sp/>solvers<sp/>for<sp/>inverse<sp/>operator.</highlight></codeline>
<codeline lineno="1175"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>:<sp/>PETSc<sp/>matrix</highlight></codeline>
<codeline lineno="1179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>matrix<sp/>object<sp/>used<sp/>to<sp/>construct<sp/>the<sp/>inverse.</highlight></codeline>
<codeline lineno="1180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1a62ffe357953d2fb051b0f8180f5327e2" kindref="member">A</ref><sp/>=<sp/>A</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1ac25c4d49765f364b333b246f5d7161ce" kindref="member">ksp</ref><sp/>=<sp/>p4pyPETSc.KSP().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1ac25c4d49765f364b333b246f5d7161ce" kindref="member">ksp</ref>.setOperators(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1a62ffe357953d2fb051b0f8180f5327e2" kindref="member">A</ref>,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1a62ffe357953d2fb051b0f8180f5327e2" kindref="member">A</ref>)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1ac25c4d49765f364b333b246f5d7161ce" kindref="member">ksp</ref>.setType(</highlight><highlight class="stringliteral">&apos;preonly&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1ac25c4d49765f364b333b246f5d7161ce" kindref="member">ksp</ref>.pc.setType(</highlight><highlight class="stringliteral">&apos;lu&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1ac25c4d49765f364b333b246f5d7161ce" kindref="member">ksp</ref>.pc.setFactorSolverType(</highlight><highlight class="stringliteral">&apos;superlu_dist&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1ac25c4d49765f364b333b246f5d7161ce" kindref="member">ksp</ref>.setUp()</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1abb0164360c3f2c53971f5a6d02852813" kindref="member">apply</ref>(self,A,x,y):</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Apply<sp/>the<sp/>inverse<sp/>pressure<sp/>mass<sp/>matrix.</highlight></codeline>
<codeline lineno="1191"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>:<sp/>matrix</highlight></codeline>
<codeline lineno="1195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dummy<sp/>place<sp/>holder<sp/>for<sp/>PETSc<sp/>compatibility</highlight></codeline>
<codeline lineno="1196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>:<sp/>vector</highlight></codeline>
<codeline lineno="1197"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="1200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>:<sp/>vector</highlight></codeline>
<codeline lineno="1201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1MatrixInvShell_1ac25c4d49765f364b333b246f5d7161ce" kindref="member">ksp</ref>.solve(x,y)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204" refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell" kindref="compound">SpInv_shell</ref>(<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell" kindref="compound">InvOperatorShell</ref>):</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Shell<sp/>class<sp/>for<sp/>the<sp/>SIMPLE<sp/>preconditioner<sp/>which<sp/>applies<sp/>the</highlight></codeline>
<codeline lineno="1206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>following<sp/>action:</highlight></codeline>
<codeline lineno="1207"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="1209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\hat{S}^{-1}<sp/>=<sp/>(A_{11}<sp/>-<sp/>A_{01}<sp/>\text{diag}(A_{00})<sp/>A_{10})^{-1}</highlight></codeline>
<codeline lineno="1210"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>where<sp/>:math:`A_{ij}`<sp/>are<sp/>sub-blocks<sp/>of<sp/>the<sp/>global<sp/>saddle<sp/>point<sp/>system.</highlight></codeline>
<codeline lineno="1212"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A00:<sp/>:class:`p4pyPETSc.Mat`</highlight></codeline>
<codeline lineno="1216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>A00<sp/>block<sp/>of<sp/>the<sp/>global<sp/>saddle<sp/>point<sp/>system.</highlight></codeline>
<codeline lineno="1217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A01:<sp/>:class:`p4pyPETSc.Mat`</highlight></codeline>
<codeline lineno="1218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>A01<sp/>block<sp/>of<sp/>the<sp/>global<sp/>saddle<sp/>point<sp/>system.</highlight></codeline>
<codeline lineno="1219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A10:<sp/>:class:`p4pyPETSc.Mat`</highlight></codeline>
<codeline lineno="1220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>A10<sp/>block<sp/>of<sp/>the<sp/>global<sp/>saddle<sp/>point<sp/>system.</highlight></codeline>
<codeline lineno="1221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A11:<sp/>:class:`p4pyPETSc.Mat`</highlight></codeline>
<codeline lineno="1222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>A11<sp/>block<sp/>of<sp/>the<sp/>global<sp/>saddle<sp/>point<sp/>system.</highlight></codeline>
<codeline lineno="1223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>use_constant_null_space:<sp/>bool</highlight></codeline>
<codeline lineno="1224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indicates<sp/>whether<sp/>a<sp/>constant<sp/>null<sp/>space<sp/>should<sp/>be<sp/>used.<sp/><sp/>See</highlight></codeline>
<codeline lineno="1225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>note<sp/>below.</highlight></codeline>
<codeline lineno="1226"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="1228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="1229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>For<sp/>Stokes<sp/>or<sp/>Navier-Stokes<sp/>systems,<sp/>the<sp/>:math:`S`<sp/>operator</highlight></codeline>
<codeline lineno="1230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>resembles<sp/>a<sp/>Laplcian<sp/>matrix<sp/>on<sp/>the<sp/>pressure.<sp/><sp/>In<sp/>cases<sp/>where<sp/>the</highlight></codeline>
<codeline lineno="1231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>global<sp/>saddle<sp/>point<sp/>system<sp/>uses<sp/>pure<sp/>Dirichlet<sp/>boundary</highlight></codeline>
<codeline lineno="1232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>conditions,<sp/>the<sp/>:math:`S^{-1}`<sp/>operator<sp/>has<sp/>a<sp/>constant<sp/>null</highlight></codeline>
<codeline lineno="1233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>space.<sp/><sp/>Since<sp/>most<sp/>saddle-point<sp/>simulations<sp/>of<sp/>interest<sp/>do<sp/>not</highlight></codeline>
<codeline lineno="1234"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>have<sp/>pure<sp/>Dirichlet<sp/>conditions,<sp/>the<sp/>`constNullSpace`<sp/>flag<sp/>defaults</highlight></codeline>
<codeline lineno="1235"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>to<sp/>false.<sp/><sp/>Having<sp/>the<sp/>null<sp/>space<sp/>set<sp/>to<sp/>false<sp/>when<sp/>the<sp/>global</highlight></codeline>
<codeline lineno="1236"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>problem<sp/>uses<sp/>pure<sp/>Dirichlet<sp/>boundary<sp/>conditions<sp/>will<sp/>likely<sp/>result</highlight></codeline>
<codeline lineno="1237"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>in<sp/>poor<sp/>solver<sp/>performance<sp/>or<sp/>failure.</highlight></codeline>
<codeline lineno="1238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1a7c284d03708027267fc3e1afc334f53c" kindref="member">__init__</ref>(self,<sp/>A00,<sp/>A11,<sp/>A01,<sp/>A10,<sp/>constNullSpace):</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1a8a08caba2fb1b6040a2d48fa5ed4332f" kindref="member">A00</ref><sp/>=<sp/>A00</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1ab9649275bd7237471381c0ff8460bd77" kindref="member">A11</ref><sp/>=<sp/>A11</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1aa4ed363b550314397ed8f05099b8609a" kindref="member">A01</ref><sp/>=<sp/>A01</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1af91bc4acecd73b0a38c30b3eb35e661b" kindref="member">A10</ref><sp/>=<sp/>A10</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1addf4b74614891461bb953d832e313676" kindref="member">constNullSpace</ref><sp/>=<sp/>constNullSpace</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1ab983f6e6673ed00ddcba68ada57b4e68" kindref="member">_create_Sp</ref>()</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1ab003ada8db7e2e27ee52f415c6ba6c90" kindref="member">_options</ref><sp/>=<sp/>p4pyPETSc.Options()</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1aa6975dd2c0997998ed917226162eb881" kindref="member">kspSp</ref><sp/>=<sp/>p4pyPETSc.KSP().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1aa6975dd2c0997998ed917226162eb881" kindref="member">kspSp</ref>.setOperators(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1ad4a63b59dd77c80fa899c8ff1f5a135c" kindref="member">Sp</ref>,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1ad4a63b59dd77c80fa899c8ff1f5a135c" kindref="member">Sp</ref>)</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1aa6975dd2c0997998ed917226162eb881" kindref="member">kspSp</ref>.setOptionsPrefix(</highlight><highlight class="stringliteral">&apos;innerSpsolver_&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1aa6975dd2c0997998ed917226162eb881" kindref="member">kspSp</ref>.setFromOptions()</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1addf4b74614891461bb953d832e313676" kindref="member">constNullSpace</ref>:</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1af8b034e8e812eca9813a5f774b9819f6" kindref="member">_create_constant_nullspace</ref>()</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1ad4a63b59dd77c80fa899c8ff1f5a135c" kindref="member">Sp</ref>.setNullSpace(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aeab0296c8530fe8b58e72d040888f3a3" kindref="member">const_null_space</ref>)</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1aa6975dd2c0997998ed917226162eb881" kindref="member">kspSp</ref>.setUp()</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1add54245469eab1b63a2eb3ff95443e72" kindref="member">apply</ref>(self,A,x,y):</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Applies<sp/>the<sp/>:math:`S_{p}`<sp/>operator</highlight></codeline>
<codeline lineno="1259"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1261"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1262"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>:<sp/>None</highlight></codeline>
<codeline lineno="1263"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dummy<sp/>argument<sp/>for<sp/>PETSc<sp/>interface</highlight></codeline>
<codeline lineno="1264"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>:<sp/>:class:`p4pyPETSc.Vec`</highlight></codeline>
<codeline lineno="1265"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector<sp/>to<sp/>which<sp/>:math:`S`<sp/>is<sp/>applied</highlight></codeline>
<codeline lineno="1266"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1267"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1268"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="1269"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>:<sp/>:class:`p4pyPETSc.Vec`</highlight></codeline>
<codeline lineno="1270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>of<sp/>:math:`S^{-1}x`</highlight></codeline>
<codeline lineno="1271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>p4pyPETSc.Vec().<ref refid="classproteus_1_1LinearAlgebraTools_1_1OperatorShell_1a7cf83fae21237e8ed721599ff1531489" kindref="member">create</ref>()</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>x.copy()</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1addf4b74614891461bb953d832e313676" kindref="member">constNullSpace</ref>:</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aeab0296c8530fe8b58e72d040888f3a3" kindref="member">const_null_space</ref>.remove(tmp1)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1aa6975dd2c0997998ed917226162eb881" kindref="member">kspSp</ref>.solve(tmp1,y)</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>numpy.isnan(y.norm())==</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Applying<sp/>the<sp/>schur<sp/>complement<sp/>\</highlight></codeline>
<codeline lineno="1278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resulted<sp/>in<sp/>not-a-number.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_create_Sp(self):</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1a27626d50ef515bf52e43af7952d84868" kindref="member">A00_inv</ref><sp/>=<sp/><ref refid="namespaceproteus_1_1LinearAlgebraTools_1aa343117c9ace03b092e8c15908133352" kindref="member">petsc_create_diagonal_inv_matrix</ref>(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1a8a08caba2fb1b6040a2d48fa5ed4332f" kindref="member">A00</ref>)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A00_invBt<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1a27626d50ef515bf52e43af7952d84868" kindref="member">A00_inv</ref>.matMult(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1aa4ed363b550314397ed8f05099b8609a" kindref="member">A01</ref>)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1ad4a63b59dd77c80fa899c8ff1f5a135c" kindref="member">Sp</ref><sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1af91bc4acecd73b0a38c30b3eb35e661b" kindref="member">A10</ref>.matMult(A00_invBt)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1ad4a63b59dd77c80fa899c8ff1f5a135c" kindref="member">Sp</ref>.aypx(-1.,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1SpInv__shell_1ab9649275bd7237471381c0ff8460bd77" kindref="member">A11</ref>)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286" refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell" kindref="compound">TwoPhase_PCDInv_shell</ref>(<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell" kindref="compound">InvOperatorShell</ref>):</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;<sp/>Shell<sp/>class<sp/>for<sp/>the<sp/>two-phase<sp/>PCD<sp/>preconditioner.<sp/><sp/>The</highlight></codeline>
<codeline lineno="1288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>two-phase<sp/>PCD_inverse<sp/>shell<sp/>applies<sp/>the<sp/>following<sp/>operator.</highlight></codeline>
<codeline lineno="1289"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1290"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="1291"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1292"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\hat{S}^{-1}<sp/>=<sp/>(Q^{(1<sp/>/<sp/>\mu)})^{-1}<sp/>+<sp/>(A_{p}^{(1<sp/>/<sp/>\rho)})^{-1}</highlight></codeline>
<codeline lineno="1293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(N_{p}^{(\rho)}<sp/>+<sp/>\dfrac{\alpha}{\Delta<sp/>t}<sp/>Q^{(\rho)}<sp/>)</highlight></codeline>
<codeline lineno="1294"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Q^{(\rho)})^{-1}</highlight></codeline>
<codeline lineno="1295"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>where<sp/>:math:`Q^{(1<sp/>/<sp/>\mu)}`<sp/>and<sp/>:math:`Q^{(\rho)}`<sp/>denote<sp/>the<sp/>pressure</highlight></codeline>
<codeline lineno="1297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>mass<sp/>matrix<sp/>scaled<sp/>by<sp/>the<sp/>inverse<sp/>dynamic<sp/>viscosity<sp/>and<sp/>density</highlight></codeline>
<codeline lineno="1298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>respectively,<sp/>:math:`(A_{p}^{(1<sp/>/<sp/>\rho)})^{-1}`</highlight></codeline>
<codeline lineno="1299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>denotes<sp/>the<sp/>pressure<sp/>Laplacian<sp/>scaled<sp/>by<sp/>inverse<sp/>density,<sp/>and</highlight></codeline>
<codeline lineno="1300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`N_{p}^{(\rho)}`<sp/>denotes<sp/>the<sp/>pressure<sp/>advection<sp/>operator<sp/>scaled<sp/>by</highlight></codeline>
<codeline lineno="1301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>density,<sp/>and<sp/>:math:`\alpha`<sp/>is<sp/>a<sp/>binary<sp/>operator<sp/>indicating</highlight></codeline>
<codeline lineno="1302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>whether<sp/>the<sp/>problem<sp/>is<sp/>temporal<sp/>or<sp/>steady<sp/>state.</highlight></codeline>
<codeline lineno="1303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a4f020b7785bb8aacc45d6d7cc9ad2650" kindref="member">__init__</ref>(self,</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qp_visc,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qp_dens,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ap_rho,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Np_rho,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>False,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta_t<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_chebyshev_its<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strong_dirichlet_DOF<sp/>=<sp/>[],</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>laplace_null_space<sp/>=<sp/>False,</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_info=None):</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Initialize<sp/>the<sp/>two-phase<sp/>PCD<sp/>inverse<sp/>operator.</highlight></codeline>
<codeline lineno="1316"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qp_visc<sp/>:<sp/>petsc4py<sp/>matrix</highlight></codeline>
<codeline lineno="1320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>pressure<sp/>mass<sp/>matrix<sp/>with<sp/>dynamic<sp/>viscocity</highlight></codeline>
<codeline lineno="1321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling.</highlight></codeline>
<codeline lineno="1322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Qp_dens<sp/>:<sp/>petsc4py<sp/>matrix</highlight></codeline>
<codeline lineno="1323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>pressure<sp/>mass<sp/>matrix<sp/>with<sp/>density<sp/>scaling.</highlight></codeline>
<codeline lineno="1324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ap_rho<sp/>:<sp/>petsc4py<sp/>matrix</highlight></codeline>
<codeline lineno="1325"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>pressure<sp/>Laplacian<sp/>scaled<sp/>with<sp/>density<sp/>scaling.</highlight></codeline>
<codeline lineno="1326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Np_rho<sp/>:<sp/>petsc4py<sp/>matrix</highlight></codeline>
<codeline lineno="1327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>pressure<sp/>advection<sp/>operator<sp/>with<sp/>inverse<sp/>density</highlight></codeline>
<codeline lineno="1328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scaling.</highlight></codeline>
<codeline lineno="1329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>:<sp/>binary</highlight></codeline>
<codeline lineno="1330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>True<sp/>if<sp/>problem<sp/>is<sp/>temporal,<sp/>False<sp/>if<sp/>problem<sp/>is<sp/>steady</highlight></codeline>
<codeline lineno="1331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.</highlight></codeline>
<codeline lineno="1332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta_t<sp/>:<sp/>float</highlight></codeline>
<codeline lineno="1333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Time<sp/>step<sp/>parameter.</highlight></codeline>
<codeline lineno="1334"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_chebyshev_its<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="1335"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>chebyshev<sp/>iteration<sp/>steps<sp/>to<sp/>take.<sp/>(0<sp/>indicates</highlight></codeline>
<codeline lineno="1336"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>chebyshev<sp/>semi<sp/>iteration<sp/>is<sp/>not<sp/>used)</highlight></codeline>
<codeline lineno="1337"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strong_dirichlet_DOF<sp/>:<sp/>lst</highlight></codeline>
<codeline lineno="1338"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List<sp/>of<sp/>DOF<sp/>with<sp/>known,<sp/>strongly<sp/>enforced<sp/>values.</highlight></codeline>
<codeline lineno="1339"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>laplace_null_space<sp/>:<sp/>binary</highlight></codeline>
<codeline lineno="1340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indicates<sp/>whether<sp/>the<sp/>pressure<sp/>Laplace<sp/>matrix<sp/>has<sp/>a</highlight></codeline>
<codeline lineno="1341"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null<sp/>space<sp/>or<sp/>not.</highlight></codeline>
<codeline lineno="1342"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>par_info<sp/>:<sp/>ParInfoClass</highlight></codeline>
<codeline lineno="1343"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Provides<sp/>parallel<sp/>info.</highlight></codeline>
<codeline lineno="1344"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>LinearSolvers<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>LS</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a9b352e83fbd9ac4f05ff94c5b917f15b" kindref="member">Qp_visc</ref><sp/>=<sp/>Qp_visc</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a7ee63a96821ccd5d0a5ab16529de2093" kindref="member">Qp_dens</ref><sp/>=<sp/>Qp_dens</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a93ff4a662abdbf5c9dfcaabad1c1a865" kindref="member">Ap_rho</ref><sp/>=<sp/>Ap_rho</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1aab86135c764eedf520f12922a9c9c5f9" kindref="member">Np_rho</ref><sp/>=<sp/>Np_rho</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1ab332aef6ef0737febae2d6284bf9a827" kindref="member">alpha</ref><sp/>=<sp/>alpha</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1ae9f3b6cdb55ee67ecff67b16ee51e64f" kindref="member">delta_t</ref><sp/>=<sp/>delta_t</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1adf548f42b7c1560ddcf1b6d0554f5023" kindref="member">num_chebyshev_its</ref><sp/>=<sp/>num_chebyshev_its</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ad5ae441c6c3f313f93e3e6b686f1713b" kindref="member">strong_dirichlet_DOF</ref><sp/>=<sp/>strong_dirichlet_DOF</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a67fef484577f123322479460ac71bd36" kindref="member">laplace_null_space</ref><sp/>=<sp/>laplace_null_space</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a6b754f026f6994431fa0e804d348abf1" kindref="member">par_info</ref><sp/>=<sp/>par_info</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1afc9eb90dc4ef1ddc5758078ddcf8c87a" kindref="member">options</ref><sp/>=<sp/>p4pyPETSc.Options()</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1af8b034e8e812eca9813a5f774b9819f6" kindref="member">_create_constant_nullspace</ref>()</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1ae48a0ff3551bb5ba1453c06b4a0c6a4a" kindref="member">_set_dirichlet_idx_set</ref>()</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1aa2d4e4f51aa0377a8b1221f4c6bf05c4" kindref="member">kspAp_rho</ref><sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1abb1afc5243b85ca1430a06de4f2c7ebf" kindref="member">create_petsc_ksp_obj</ref>(</highlight><highlight class="stringliteral">&apos;innerTPPCDsolver_Ap_rho_&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a93ff4a662abdbf5c9dfcaabad1c1a865" kindref="member">Ap_rho</ref>,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a67fef484577f123322479460ac71bd36" kindref="member">laplace_null_space</ref>)</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1aa2d4e4f51aa0377a8b1221f4c6bf05c4" kindref="member">kspAp_rho</ref>.getOperators()[0].zeroRows(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aa43875d02ca6dcf62d8fd4b6c8b04cb2" kindref="member">known_dof_is</ref>)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1adf548f42b7c1560ddcf1b6d0554f5023" kindref="member">num_chebyshev_its</ref>:</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a9b352e83fbd9ac4f05ff94c5b917f15b" kindref="member">Qp_visc</ref><sp/>=<sp/>LS.ChebyshevSemiIteration(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a9b352e83fbd9ac4f05ff94c5b917f15b" kindref="member">Qp_visc</ref>,</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5,</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a7ee63a96821ccd5d0a5ab16529de2093" kindref="member">Qp_dens</ref><sp/>=<sp/>LS.ChebyshevSemiIteration(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a7ee63a96821ccd5d0a5ab16529de2093" kindref="member">Qp_dens</ref>,</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5,</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Using<sp/>ksp<sp/>objects<sp/>for<sp/>the<sp/>lumped<sp/>mass<sp/>matrices<sp/>is<sp/>much</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>slower<sp/>than<sp/>pointwise<sp/>division.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.kspQp_visc<sp/>=<sp/>self.create_petsc_ksp_obj(&apos;innerTPPCDsolver_Qp_visc_&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Qp_visc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.kspQp_dens<sp/>=<sp/>self.create_petsc_ksp_obj(&apos;innerTPPCDsolver_Qp_dens_&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Qp_dens)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a8c75c836bfd4b8ea3ddea8480614824c" kindref="member">getSize</ref>(self):</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Return<sp/>the<sp/>total<sp/>number<sp/>of<sp/>DOF<sp/>for<sp/>the<sp/>shell<sp/>problem.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a93ff4a662abdbf5c9dfcaabad1c1a865" kindref="member">Ap_rho</ref>.getSizes()[0][0]</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1ae7b15e430c2e94c1181ad11b420338a2" kindref="member">apply</ref>(self,A,x,y):</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1391"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Applies<sp/>the<sp/>two-phase<sp/>pressure-convection-diffusion</highlight></codeline>
<codeline lineno="1392"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Schur<sp/>complement<sp/>approximation.</highlight></codeline>
<codeline lineno="1393"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1394"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="1395"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="1396"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>:<sp/>None</highlight></codeline>
<codeline lineno="1397"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dummy<sp/>variabled<sp/>needed<sp/>to<sp/>interface<sp/>with<sp/>PETSc</highlight></codeline>
<codeline lineno="1398"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>:<sp/>petsc4py<sp/>vector</highlight></codeline>
<codeline lineno="1399"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector<sp/>to<sp/>which<sp/>operator<sp/>is<sp/>applied</highlight></codeline>
<codeline lineno="1400"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1401"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="1402"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="1403"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>:<sp/>petsc4py<sp/>vector</highlight></codeline>
<codeline lineno="1404"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>of<sp/>operator<sp/>acting<sp/>on<sp/>x.</highlight></codeline>
<codeline lineno="1405"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1406"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="1407"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="1408"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>strong<sp/>Dirichlet<sp/>conditions<sp/>are<sp/>enforced<sp/>on<sp/>the<sp/>pressure,</highlight></codeline>
<codeline lineno="1409"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>PCD<sp/>operator<sp/>is<sp/>applied<sp/>to<sp/>the<sp/>set<sp/>of<sp/>unknowns<sp/>that<sp/>do<sp/>not</highlight></codeline>
<codeline lineno="1410"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>Dirichlet<sp/>boundary<sp/>conditions.<sp/><sp/>At<sp/>the<sp/>end,<sp/>the<sp/>solution</highlight></codeline>
<codeline lineno="1411"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>then<sp/>loaded<sp/>into<sp/>the<sp/>original<sp/>y-vector.</highlight></codeline>
<codeline lineno="1412"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm<sp/>=<sp/>Comm.get()</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_tmp<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a0091ddabd5767c930b4ed201f7dc7e73" kindref="member">_create_copy_vec</ref>(x)</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a0091ddabd5767c930b4ed201f7dc7e73" kindref="member">_create_copy_vec</ref>(x_tmp)</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp2<sp/>=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1a0091ddabd5767c930b4ed201f7dc7e73" kindref="member">_create_copy_vec</ref>(x_tmp)</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1adf548f42b7c1560ddcf1b6d0554f5023" kindref="member">num_chebyshev_its</ref>:</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a9b352e83fbd9ac4f05ff94c5b917f15b" kindref="member">Qp_visc</ref>.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1ae7b15e430c2e94c1181ad11b420338a2" kindref="member">apply</ref>(x_tmp,</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y,</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1adf548f42b7c1560ddcf1b6d0554f5023" kindref="member">num_chebyshev_its</ref>)</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a7ee63a96821ccd5d0a5ab16529de2093" kindref="member">Qp_dens</ref>.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1ae7b15e430c2e94c1181ad11b420338a2" kindref="member">apply</ref>(x_tmp,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1,</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1adf548f42b7c1560ddcf1b6d0554f5023" kindref="member">num_chebyshev_its</ref>)</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y.pointwiseDivide(x_tmp,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a9b352e83fbd9ac4f05ff94c5b917f15b" kindref="member">Qp_visc</ref>.getDiagonal())</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp1.pointwiseDivide(x_tmp,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1a7ee63a96821ccd5d0a5ab16529de2093" kindref="member">Qp_dens</ref>.getDiagonal())</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Pointwise<sp/>divide<sp/>appears<sp/>to<sp/>be<sp/>much<sp/>faster<sp/>than<sp/>ksp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.kspQp_visc.solve(x_tmp,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.kspQp_dens.solve(x_tmp,tmp1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1aab86135c764eedf520f12922a9c9c5f9" kindref="member">Np_rho</ref>.mult(tmp1,tmp2)</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1ab332aef6ef0737febae2d6284bf9a827" kindref="member">alpha</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp2.axpy(old_div(1.,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1ae9f3b6cdb55ee67ecff67b16ee51e64f" kindref="member">delta_t</ref>),x_tmp)</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1afc9eb90dc4ef1ddc5758078ddcf8c87a" kindref="member">options</ref>.hasName(</highlight><highlight class="stringliteral">&apos;innerTPPCDsolver_Ap_rho_ksp_constant_null_space&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aeab0296c8530fe8b58e72d040888f3a3" kindref="member">const_null_space</ref>.remove(tmp2)</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_array<sp/>=<sp/>numpy.zeros(len(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aa43875d02ca6dcf62d8fd4b6c8b04cb2" kindref="member">known_dof_is</ref>.getIndices()))</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp2.setValues(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aa43875d02ca6dcf62d8fd4b6c8b04cb2" kindref="member">known_dof_is</ref>.getIndices(),zero_array)</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp2.assemblyBegin()</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp2.assemblyEnd()</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1TwoPhase__PCDInv__shell_1aa2d4e4f51aa0377a8b1221f4c6bf05c4" kindref="member">kspAp_rho</ref>.solve(tmp2,<sp/>tmp1)</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y.axpy(1.,tmp1)</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y.setValues(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1InvOperatorShell_1aa43875d02ca6dcf62d8fd4b6c8b04cb2" kindref="member">known_dof_is</ref>.getIndices(),zero_array)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y.assemblyBegin()</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y.assemblyEnd()</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>numpy.isnan(y.norm())==</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Applying<sp/>the<sp/>schur<sp/>complement<sp/>\</highlight></codeline>
<codeline lineno="1453"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resulted<sp/>in<sp/>not-a-number.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1ac1afb0b55fcfab08335b538376626391" kindref="member">l2Norm</ref>(x):</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>parallel<sp/>:math:`l_2`<sp/>norm</highlight></codeline>
<codeline lineno="1458"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math.sqrt(<ref refid="namespaceproteus_1_1Comm_1a1b3562c9458366ecefbdd721e49b8b34" kindref="member">globalSum</ref>(numpy.dot(x,x)))</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a96bc58a191481da8a367c7944d200d24" kindref="member">l1Norm</ref>(x):</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1464"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>parallel<sp/>:math:`l_1`<sp/>norm</highlight></codeline>
<codeline lineno="1465"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1466"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>:math:`l_1`<sp/>norm<sp/>of<sp/>a<sp/>vector<sp/>:math:`\mathbf{x}<sp/>\in</highlight></codeline>
<codeline lineno="1467"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>\mathbb{R}^n`<sp/>is</highlight></codeline>
<codeline lineno="1468"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="1470"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1471"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\|<sp/>\mathbf{x}<sp/>\|_{1}<sp/>=<sp/>\sum_{i=0}<sp/>|x_i|</highlight></codeline>
<codeline lineno="1472"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1473"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>If<sp/>Python<sp/>is<sp/>running<sp/>in<sp/>parallel,<sp/>then<sp/>the<sp/>sum<sp/>is<sp/>over<sp/>all</highlight></codeline>
<codeline lineno="1474"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>dimensions<sp/>on<sp/>all<sp/>processors<sp/>so<sp/>that<sp/>the<sp/>input<sp/>must<sp/>not<sp/>contain</highlight></codeline>
<codeline lineno="1475"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;ghost&quot;<sp/>entries.</highlight></codeline>
<codeline lineno="1476"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1477"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>implemtation<sp/>works<sp/>for<sp/>a<sp/>distributed<sp/>array<sp/>with<sp/>no<sp/>ghost</highlight></codeline>
<codeline lineno="1478"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>components<sp/>(each<sp/>component<sp/>must<sp/>be<sp/>on<sp/>a<sp/>single<sp/>processor).</highlight></codeline>
<codeline lineno="1479"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1480"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>x:<sp/>numpy<sp/>array<sp/>of<sp/>length<sp/>n</highlight></codeline>
<codeline lineno="1481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>float</highlight></codeline>
<codeline lineno="1482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1_1Comm_1a1b3562c9458366ecefbdd721e49b8b34" kindref="member">globalSum</ref>(numpy.sum(numpy.abs(x)))</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a60cbaecf28d19ca6133658f8cddded78" kindref="member">lInfNorm</ref>(x):</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1488"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>parallel<sp/>:math:`l_{\infty}`<sp/>norm</highlight></codeline>
<codeline lineno="1489"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1490"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>:math:`l_{\infty}`<sp/>norm<sp/>of<sp/>a<sp/>vector<sp/>:math:`\mathbf{x}<sp/>\in</highlight></codeline>
<codeline lineno="1491"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>\mathbb{R}^n`<sp/>is</highlight></codeline>
<codeline lineno="1492"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1493"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="1494"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1495"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\|x\|_{\infty}<sp/>=<sp/>\max_i<sp/>|x_i|</highlight></codeline>
<codeline lineno="1496"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1497"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>implemtation<sp/>works<sp/>for<sp/>a<sp/>distributed<sp/>array<sp/>with<sp/>no<sp/>ghost</highlight></codeline>
<codeline lineno="1498"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>components<sp/>(each<sp/>component<sp/>must<sp/>be<sp/>on<sp/>a<sp/>single<sp/>processor).</highlight></codeline>
<codeline lineno="1499"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1500"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>x:<sp/>numpy<sp/>array<sp/>of<sp/>length<sp/>n</highlight></codeline>
<codeline lineno="1501"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>float</highlight></codeline>
<codeline lineno="1502"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1_1Comm_1a23c807099621eedf0347f6dc84dfaa70" kindref="member">globalMax</ref>(numpy.linalg.norm(x,numpy.inf))</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a6d68bb6ef5f31dabc4781f3a332df8c7" kindref="member">wDot</ref>(x,y,h):</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1508"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>parallel<sp/>weighted<sp/>dot<sp/>product<sp/>of<sp/>vectors<sp/>x<sp/>and<sp/>y<sp/>using</highlight></codeline>
<codeline lineno="1509"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>weight<sp/>vector<sp/>h.</highlight></codeline>
<codeline lineno="1510"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1511"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>weighted<sp/>dot<sp/>product<sp/>is<sp/>defined<sp/>for<sp/>a<sp/>weight<sp/>vector</highlight></codeline>
<codeline lineno="1512"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`\mathbf{h}`<sp/>as</highlight></codeline>
<codeline lineno="1513"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1514"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="1515"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1516"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(\mathbf{x},\mathbf{y})_h<sp/>=<sp/>\sum_{i}<sp/>h_{i}<sp/>x_{i}<sp/>y_{i}</highlight></codeline>
<codeline lineno="1517"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1518"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>All<sp/>weight<sp/>vector<sp/>components<sp/>should<sp/>be<sp/>positive.</highlight></codeline>
<codeline lineno="1519"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1520"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>x,y,h:<sp/>numpy<sp/>arrays<sp/>for<sp/>vectors<sp/>and<sp/>weight</highlight></codeline>
<codeline lineno="1521"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>the<sp/>weighted<sp/>dot<sp/>product</highlight></codeline>
<codeline lineno="1522"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1_1Comm_1a1b3562c9458366ecefbdd721e49b8b34" kindref="member">globalSum</ref>(numpy.sum(x*y*h))</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a87214731c08e9b1f941ebfac4003bb6c" kindref="member">wl2Norm</ref>(x,h):</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1527"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>parallel<sp/>weighted<sp/>l_2<sp/>norm<sp/>with<sp/>weight<sp/>h</highlight></codeline>
<codeline lineno="1528"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math.sqrt(<ref refid="namespaceproteus_1_1Comm_1a1b3562c9458366ecefbdd721e49b8b34" kindref="member">globalSum</ref>(<ref refid="namespaceproteus_1_1LinearAlgebraTools_1a6d68bb6ef5f31dabc4781f3a332df8c7" kindref="member">wDot</ref>(x,x,h)))</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1abc937b1988f49d8e6443c797bae19838" kindref="member">wl1Norm</ref>(x,h):</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1534"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>parallel<sp/>weighted<sp/>l_1<sp/>norm<sp/>with<sp/>weight<sp/>h</highlight></codeline>
<codeline lineno="1535"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1_1Comm_1a1b3562c9458366ecefbdd721e49b8b34" kindref="member">globalSum</ref>(numpy.sum(numpy.abs(h*x)))</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1ab5235d2c1d01491bb7c70bfb952a7719" kindref="member">wlInfNorm</ref>(x,h):</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1541"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>parallel<sp/>weighted<sp/>l_{\infty}<sp/>norm<sp/>with<sp/>weight<sp/>h</highlight></codeline>
<codeline lineno="1542"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceproteus_1_1Comm_1a23c807099621eedf0347f6dc84dfaa70" kindref="member">globalMax</ref>(numpy.linalg.norm(h*x,numpy.inf))</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a5c20f6af1ce63ca3d417beadef8faa6e" kindref="member">energyDot</ref>(x,y,A):</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1547"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>&quot;energy&quot;<sp/>dot<sp/>product<sp/>x^t<sp/>A<sp/>y<sp/>(not<sp/>parallel)</highlight></codeline>
<codeline lineno="1548"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numpy.dot(numpy.dot(x,A),y)</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1adc061564e5b77c6de06499aeac0cd9e5" kindref="member">energyNorm</ref>(x,A):</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1553"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>&quot;energy&quot;<sp/>norm<sp/>x^t<sp/>A<sp/>x<sp/>(not<sp/>parallel)</highlight></codeline>
<codeline lineno="1554"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math.sqrt(<ref refid="namespaceproteus_1_1LinearAlgebraTools_1a5c20f6af1ce63ca3d417beadef8faa6e" kindref="member">energyDot</ref>(x,x,A))</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1abeb062edcd56482e3d2d9a9e25d08579" kindref="member">l2NormAvg</ref>(x):</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1559"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>arithmetic<sp/>averaged<sp/>l_2<sp/>norm<sp/>(root<sp/>mean<sp/>squared<sp/>norm)</highlight></codeline>
<codeline lineno="1560"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>old_div(1.0,<ref refid="namespaceproteus_1_1Comm_1a1b3562c9458366ecefbdd721e49b8b34" kindref="member">globalSum</ref>(len(x.flat)))</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math.sqrt(scale*<ref refid="namespaceproteus_1_1Comm_1a1b3562c9458366ecefbdd721e49b8b34" kindref="member">globalSum</ref>(numpy.dot(x,x)))</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal">rmsNorm<sp/>=<sp/>l2NormAvg</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceproteus_1_1LinearAlgebraTools_1a0606e6dd4b455a5589949b915873e31f" kindref="member">l2Norm_local</ref>(x):</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1570"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>l_2<sp/>norm<sp/>for<sp/>just<sp/>local<sp/>(processor)<sp/>system<sp/><sp/>(not<sp/>parallel)</highlight></codeline>
<codeline lineno="1571"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math.sqrt(numpy.dot(x,x))</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575" refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm" kindref="compound">WeightedNorm</ref>(object):</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>weighted<sp/>norm<sp/>for<sp/>time<sp/>step<sp/>control<sp/>(not<sp/>currently<sp/>parallel)</highlight></codeline>
<codeline lineno="1578"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1a6cd00b18e3bfa7145a04bd09497f7ac9" kindref="member">__init__</ref>(self,shape,atol,rtol):</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1a75168094921a5d2a2e48ad9e51bcffb7" kindref="member">shape</ref><sp/>=<sp/>shape</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1a8192fa1972095e5d7361ad0ca5e8619d" kindref="member">dim</ref><sp/>=<sp/><ref refid="Headers_8h_1a4236a05d5d04839f0af91439cb8820b8" kindref="member">sum</ref>(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1a75168094921a5d2a2e48ad9e51bcffb7" kindref="member">shape</ref>)</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1abdaf2b3d04faac0191c1c21220eac89c" kindref="member">atol</ref>=<sp/>atol</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1abecf65e130c44f85fb4404f608a2df0b" kindref="member">rtol</ref>=<sp/>rtol</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1abb03bf79b05a2a8c1af763b6514ae7c4" kindref="member">weight</ref><sp/>=<sp/>numpy.ones(shape,</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1aa3faf553b8da937c76afebf618163772" kindref="member">tmp</ref><sp/><sp/><sp/><sp/>=<sp/>numpy.ones(shape,</highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1af211d128b21d0d8c1c2b9d504fabdd99" kindref="member">setWeight</ref>(self,y):</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1abb03bf79b05a2a8c1af763b6514ae7c4" kindref="member">weight</ref>[:]<sp/>=<sp/>numpy.absolute(y)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1abb03bf79b05a2a8c1af763b6514ae7c4" kindref="member">weight</ref><sp/><sp/><sp/>*=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1abecf65e130c44f85fb4404f608a2df0b" kindref="member">rtol</ref></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1abb03bf79b05a2a8c1af763b6514ae7c4" kindref="member">weight</ref><sp/><sp/><sp/>+=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1abdaf2b3d04faac0191c1c21220eac89c" kindref="member">atol</ref></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1ae66812bd970c9658d8bf23fecc58cb7c" kindref="member">norm</ref>(self,y,type):</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1aa3faf553b8da937c76afebf618163772" kindref="member">tmp</ref>[:]<sp/>=<sp/>y</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1aa3faf553b8da937c76afebf618163772" kindref="member">tmp</ref><sp/>/=<sp/>self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1abb03bf79b05a2a8c1af763b6514ae7c4" kindref="member">weight</ref></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>numpy.linalg.norm(self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1aa3faf553b8da937c76afebf618163772" kindref="member">tmp</ref>.flat,type)</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>old_div(value,self.<ref refid="classproteus_1_1LinearAlgebraTools_1_1WeightedNorm_1a8192fa1972095e5d7361ad0ca5e8619d" kindref="member">dim</ref>)</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>doctest</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>doctest.testmod()</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="comment">#<sp/>def<sp/>test_MGV():</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>n=2**8<sp/>+<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>h<sp/>=1.0/(n-1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>freq=10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>u<sp/>=<sp/>numpy.random.uniform(0,1,(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>u[0]=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>u[n-1]=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>numpy.arange(0,1.0+h,h)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>AList=[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>N=n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>pList=[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>rList=[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>resList=[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>while<sp/>N<sp/>&gt;=<sp/>3:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resList.append(Vec(N-2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>dict()#SparseMat(N-2,N-2,3*(N-2),sym=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H<sp/>=<sp/>1.0/(N-1.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#beginAssembly(A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(N-2):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[(i,i)]<sp/>=<sp/>2.0/H**2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>i<sp/>&gt;<sp/>0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[(i,i-1)]<sp/>=<sp/>-1.0/H**2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>i<sp/>&lt;<sp/>N-3:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[(i,i+1)]<sp/>=<sp/>-1.0/H**2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endAssembly(A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AList.append(SparseMatFromDict(N-2,N-2,A)[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cN<sp/>=<sp/>(N<sp/>-<sp/>1)/2<sp/>+<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>dict()#SparseMat(cN-2,N-2,3*(N-2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>dict()#SparseMat(N-2,cN-2,3*(N-2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(cN-2):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[(i,2*i)]<sp/><sp/><sp/>=<sp/>1.0/4.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[(i,2*i+1)]<sp/>=<sp/>2.0/4.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[(i,2*i+2)]<sp/>=<sp/>1.0/4.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[(2*i,i)]<sp/>=<sp/>1.0/2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[(2*i+1,i)]=<sp/>2.0/2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[(2*i+2,i)]=<sp/>1.0/2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#r.to_csr()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print<sp/>cN-2,N-2,r.keys()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>cN-2<sp/>&gt;<sp/>0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rList.append(SparseMatFromDict(cN-2,N-2,r)[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rList.append(None)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#p.to_csr()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pList.append(SparseMatFromDict(N-2,cN-2,p)[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>=<sp/>cN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>class<sp/>Jacobi:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>__init__(self,A):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.A=A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.n=A.shape[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.M=Vec(self.n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(self.n):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.M[i]=1.0/A[i,i]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.res=Vec(self.n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dx=Vec(self.n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>apply(self,w,jits,b,x):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.A.matvec(x,self.res)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.res-=b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>it<sp/>in<sp/>range(jits):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dx[:]<sp/>=<sp/>self.M*self.res</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dx*=w</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>self.dx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.A.matvec(x,self.res)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.res<sp/>-=<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>jacobiList=[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>for<sp/>A<sp/>in<sp/>AList:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobiList.append(Jacobi(A))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>jits<sp/>=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>2.0/3.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>class<sp/>MGV:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>__init__(self,smootherList,AList,pList,rList,resList):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.AList<sp/>=<sp/>AList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.pList<sp/>=<sp/>pList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.rList<sp/>=<sp/>rList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.resList<sp/>=<sp/>resList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xList=[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.vList=[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bList=[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.gpList=[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>res<sp/>in<sp/>resList:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xList.append(Vec(len(res)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.vList.append(Vec(len(res)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.bList.append(Vec(len(res)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.smootherList<sp/>=<sp/>smootherList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def<sp/>apply(self,w,nsPre,nsPost,level,b,x):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logEvent(&quot;Level<sp/>=<sp/>&quot;+`level`)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>level<sp/>==<sp/>len(self.AList)-1:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.smootherList[level].apply(1.0,1,b,x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#smooth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.smootherList[level].apply(w,nsPre,b,x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#restrict<sp/>the<sp/>defect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.rList[level].matvec(self.smootherList[level].res,self.bList[level+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#V-cycle<sp/>on<sp/>the<sp/>error<sp/>equation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xList[level+1][:]=0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.apply(w,nsPre,nsPost,level+1,self.bList[level+1],self.xList[level+1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#prolong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.pList[level].matvec(self.xList[level+1],self.vList[level])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-=self.vList[level]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#smooth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.smootherList[level].apply(w,nsPost,b,x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.resList[level][:]=self.smootherList[level].res</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>mgv<sp/>=<sp/>MGV(jacobiList,AList,pList,rList,resList)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>rnorm=1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>mgits<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>while<sp/>rnorm<sp/>&gt;<sp/>1.0e-10<sp/>and<sp/>mgits<sp/>&lt;<sp/>20:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mgits<sp/>+=1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mgv.apply(w,jits,jits,0,f[1:n-1],u[1:n-1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rnorm<sp/>=<sp/>l2Norm(resList[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="LinearAlgebraTools.py"/>
  </compounddef>
</doxygen>
