<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classproteus_1_1c_a_d_r" kind="class" language="C++" prot="public">
    <compoundname>proteus::cADR</compoundname>
    <basecompoundref refid="classproteus_1_1c_a_d_r__base" prot="public" virt="non-virtual">proteus::cADR_base</basecompoundref>
    <includes refid="_a_d_r_8h" local="no">/home/cekees/proteus/proteus/ADR.h</includes>
    <templateparamlist>
      <param>
        <type>class CompKernelType</type>
      </param>
      <param>
        <type>int</type>
        <declname>nSpace</declname>
        <defname>nSpace</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_element</declname>
        <defname>nQuadraturePoints_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_mesh_trial_element</declname>
        <defname>nDOF_mesh_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_trial_element</declname>
        <defname>nDOF_trial_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nDOF_test_element</declname>
        <defname>nDOF_test_element</defname>
      </param>
      <param>
        <type>int</type>
        <declname>nQuadraturePoints_elementBoundary</declname>
        <defname>nQuadraturePoints_elementBoundary</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classproteus_1_1c_a_d_r_1a2f5e5191ca7e18f9d3a4f0eba61cbc27" prot="public" static="no" mutable="no">
        <type>std::set&lt; int &gt;</type>
        <definition>std::set&lt;int&gt; proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ifem_boundaries</definition>
        <argsstring></argsstring>
        <name>ifem_boundaries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="40" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1c_a_d_r_1a503f547baa5728ef59a4709306cade67" prot="public" static="no" mutable="no">
        <type>std::set&lt; int &gt;</type>
        <definition>std::set&lt;int&gt; proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ifem_boundary_elements</definition>
        <argsstring></argsstring>
        <name>ifem_boundary_elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="40" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1c_a_d_r_1ac410bbc601ff706a5179d67414bf8330" prot="public" static="no" mutable="no">
        <type>std::set&lt; int &gt;</type>
        <definition>std::set&lt;int&gt; proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::cutfem_boundaries</definition>
        <argsstring></argsstring>
        <name>cutfem_boundaries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="41" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1c_a_d_r_1a7012807628c4aa581d03cf9b6e0ac2ec" prot="public" static="no" mutable="no">
        <type>std::set&lt; int &gt;</type>
        <definition>std::set&lt;int&gt; proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::cutfem_boundary_elements</definition>
        <argsstring></argsstring>
        <name>cutfem_boundary_elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="41" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1c_a_d_r_1a7b2567bf1b9137fe6651cf4409f5b75f" prot="public" static="no" mutable="no">
        <type>std::valarray&lt; bool &gt;</type>
        <definition>std::valarray&lt;bool&gt; proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::elementIsActive</definition>
        <argsstring></argsstring>
        <name>elementIsActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="42" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1c_a_d_r_1a44ccd30cb4b8f19c2cfece20663f9c5c" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::nDOF_test_X_trial_element</definition>
        <argsstring></argsstring>
        <name>nDOF_test_X_trial_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="43" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1c_a_d_r_1a3bb76a168b4d52bec8572d0dc741dd1a" prot="public" static="no" mutable="no">
        <type>CompKernelType</type>
        <definition>CompKernelType proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ck</definition>
        <argsstring></argsstring>
        <name>ck</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="44" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1c_a_d_r_1a5563bd9219415c1cd04277d5c5c7d421" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1ac61dbf98c43ac13d15c02ba156dc2ef3" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 3, nQuadraturePoints_element, nQuadraturePoints_elementBoundary &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,3,nQuadraturePoints_element,nQuadraturePoints_elementBoundary&gt; proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::gf</definition>
        <argsstring></argsstring>
        <name>gf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="45" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classproteus_1_1c_a_d_r_1ad0547ed4043b189fb8eeab07594e8035" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceproteus_1ac61dbf98c43ac13d15c02ba156dc2ef3" kindref="member">GeneralizedFunctions</ref>&lt; nSpace, 3, nQuadraturePoints_element, nQuadraturePoints_elementBoundary &gt;</type>
        <definition>GeneralizedFunctions&lt;nSpace,3,nQuadraturePoints_element,nQuadraturePoints_elementBoundary&gt; proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::gf_s</definition>
        <argsstring></argsstring>
        <name>gf_s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="46" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1a93b20e529d57aa2cc0252135bdeb5b68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::cADR</definition>
        <argsstring>()</argsstring>
        <name>cADR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="47" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="47" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1a07956ab045055611f75a8ca2c28c8fc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalDiffusiveFlux</definition>
        <argsstring>(int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isDiffusiveFluxBoundary, const double n[nSpace], double *bc_a, const double &amp;bc_u, const double &amp;bc_flux, double *a, const double grad_potential[nSpace], const double &amp;u, const double &amp;penalty, double &amp;flux)</argsstring>
        <name>exteriorNumericalDiffusiveFlux</name>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDiffusiveFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>bc_a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_potential</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="56" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="56" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1ac97a4d95e35a67302104ab2d1af9b42d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::ExteriorNumericalDiffusiveFluxJacobian</definition>
        <argsstring>(int *rowptr, int *colind, const int &amp;isDOFBoundary, const int &amp;isDiffusiveFluxBoundary, const double n[nSpace], double *a, const double &amp;v, const double grad_v[nSpace], const double &amp;penalty)</argsstring>
        <name>ExteriorNumericalDiffusiveFluxJacobian</name>
        <param>
          <type>int *</type>
          <declname>rowptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>colind</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isDiffusiveFluxBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_v</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>penalty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="102" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="102" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1a3d413e329d09cab00bff74bc866b38ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;elementDiameter, const double &amp;dmt, const double dH[nSpace], double &amp;cfl, double &amp;tau)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dmt</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dH</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="133" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="133" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1a0c1949faef4fe729b64051b5f4f04639" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateSubgridError_tau</definition>
        <argsstring>(const double &amp;Ct_sge, const double G[nSpace *nSpace], const double &amp;A0, const double Ai[nSpace], double &amp;tau_v, double &amp;cfl)</argsstring>
        <name>calculateSubgridError_tau</name>
        <param>
          <type>const double &amp;</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>G</declname>
          <array>[nSpace *nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>A0</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>Ai</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>tau_v</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>cfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="153" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="153" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1abb65cd4246f79a2003d2b72a4b952a98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateNumericalDiffusion</definition>
        <argsstring>(const double &amp;shockCapturingDiffusion, const double &amp;elementDiameter, const double &amp;strong_residual, const double grad_u[nSpace], double &amp;numDiff)</argsstring>
        <name>calculateNumericalDiffusion</name>
        <param>
          <type>const double &amp;</type>
          <declname>shockCapturingDiffusion</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>strong_residual</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>numDiff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="168" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="168" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1afbd6855b5dfe06a79e9c99f140140d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFlux</definition>
        <argsstring>(const int &amp;isDOFBoundary_u, const int &amp;isFluxBoundary_u, const double n[nSpace], const double &amp;bc_u, const double &amp;bc_flux_u, const double &amp;u, const double velocity[nSpace], double &amp;flux)</argsstring>
        <name>exteriorNumericalAdvectiveFlux</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>bc_flux_u</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>velocity</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>flux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="188" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="188" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1a6aa48efde7035bd33e9d76ac4e5b72bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::exteriorNumericalAdvectiveFluxDerivative</definition>
        <argsstring>(const int &amp;isDOFBoundary_u, const int &amp;isFluxBoundary_u, const double n[nSpace], const double velocity[nSpace], double &amp;dflux)</argsstring>
        <name>exteriorNumericalAdvectiveFluxDerivative</name>
        <param>
          <type>const int &amp;</type>
          <declname>isDOFBoundary_u</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>isFluxBoundary_u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>n</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>velocity</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dflux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="234" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="234" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1a3830b0617ed4e9f831f269f549f8361c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::updateEmbeddedBoundaryTerms</definition>
        <argsstring>(const double embeddedBoundary_penalty, const double dV, double *embeddedBoundary_normal, const double u_s, const double u, const double grad_u[nSpace], const double a, double &amp;r, double &amp;dr, double &amp;ham, double *dham, double *f, double *df)</argsstring>
        <name>updateEmbeddedBoundaryTerms</name>
        <param>
          <type>const double</type>
          <declname>embeddedBoundary_penalty</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>dV</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>embeddedBoundary_normal</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u_s</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>grad_u</declname>
          <array>[nSpace]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>ham</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dham</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>df</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="271" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="271" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1aaac74774a85b7b679b34fa15aa7945da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateElementResidual</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;x_ref, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;u_trial_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;u_test_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;elementBoundaryDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, xt::pyarray&lt; double &gt; &amp;cfl, double Ct_sge, double sc_uref, double sc_alpha, double useMetrics, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;u_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_test_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, int nElements_global, int nElementBoundaries_owned, xt::pyarray&lt; int &gt; &amp;u_l2g, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; int &gt; &amp;sd_rowptr, xt::pyarray&lt; int &gt; &amp;sd_colind, xt::pyarray&lt; double &gt; &amp;q_a, xt::pyarray&lt; double &gt; &amp;q_v, xt::pyarray&lt; double &gt; &amp;q_r, int lag_shockCapturingDiffusion, double shockCapturingDiffusion, xt::pyarray&lt; double &gt; &amp;q_numDiff_u, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, int offset_u, int stride_u, xt::pyarray&lt; double &gt; &amp;elementResidual_u, int nExteriorElementBoundaries_global, xt::pyarray&lt; int &gt; &amp;exteriorElementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundariesArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryElementsArray, xt::pyarray&lt; int &gt; &amp;elementBoundaryLocalElementBoundariesArray, xt::pyarray&lt; double &gt; &amp;element_u, int eN, const bool embeddedBoundary, const double embeddedBoundary_penalty, xt::pyarray&lt; double &gt; &amp;embeddedBoundary_normal_q, xt::pyarray&lt; double &gt; &amp;embeddedBoundary_u_q, bool &amp;element_active, std::valarray&lt; bool &gt; &amp;elementIsActive)</argsstring>
        <name>calculateElementResidual</name>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementBoundaryDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>cfl</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sc_uref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sc_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>u_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sd_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sd_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_a</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lag_shockCapturingDiffusion</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shockCapturingDiffusion</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementResidual_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nExteriorElementBoundaries_global</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>exteriorElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryElementsArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>elementBoundaryLocalElementBoundariesArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>element_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eN</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>embeddedBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>embeddedBoundary_penalty</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>embeddedBoundary_normal_q</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>embeddedBoundary_u_q</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>element_active</declname>
        </param>
        <param>
          <type>std::valarray&lt; bool &gt; &amp;</type>
          <declname>elementIsActive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="307" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="307" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1ae7de58f6447443d50265f27d43c426a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateResidual</definition>
        <argsstring>(arguments_dict &amp;args)</argsstring>
        <name>calculateResidual</name>
        <reimplements refid="classproteus_1_1c_a_d_r__base_1a2ade9d7bdca597fd49c83011b6f2c64c">calculateResidual</reimplements>
        <param>
          <type><ref refid="structproteus_1_1arguments__dict" kindref="compound">arguments_dict</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="579" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="579" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1a1b64a693d02a71f5b11e2bd6f0ee5b98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateElementJacobian</definition>
        <argsstring>(xt::pyarray&lt; double &gt; &amp;mesh_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;mesh_dof, xt::pyarray&lt; int &gt; &amp;mesh_l2g, xt::pyarray&lt; double &gt; &amp;x_ref, xt::pyarray&lt; double &gt; &amp;dV_ref, xt::pyarray&lt; double &gt; &amp;u_trial_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_ref, xt::pyarray&lt; double &gt; &amp;u_test_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_ref, xt::pyarray&lt; double &gt; &amp;elementDiameter, xt::pyarray&lt; double &gt; &amp;elementBoundaryDiameter, xt::pyarray&lt; double &gt; &amp;nodeDiametersArray, xt::pyarray&lt; double &gt; &amp;cfl, double Ct_sge, double sc_uref, double sc_alpha, double useMetrics, xt::pyarray&lt; double &gt; &amp;mesh_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;mesh_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;dS_ref, xt::pyarray&lt; double &gt; &amp;u_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_trial_trace_ref, xt::pyarray&lt; double &gt; &amp;u_test_trace_ref, xt::pyarray&lt; double &gt; &amp;u_grad_test_trace_ref, xt::pyarray&lt; double &gt; &amp;normal_ref, xt::pyarray&lt; double &gt; &amp;boundaryJac_ref, int nElements_global, int nElementBoundaries_owned, xt::pyarray&lt; int &gt; &amp;u_l2g, xt::pyarray&lt; double &gt; &amp;u_dof, xt::pyarray&lt; int &gt; &amp;sd_rowptr, xt::pyarray&lt; int &gt; &amp;sd_colind, xt::pyarray&lt; double &gt; &amp;q_a, xt::pyarray&lt; double &gt; &amp;q_v, xt::pyarray&lt; double &gt; &amp;q_r, int lag_shockCapturing, double shockCapturingDiffusion, xt::pyarray&lt; double &gt; &amp;q_numDiff_u, xt::pyarray&lt; double &gt; &amp;q_numDiff_u_last, xt::pyarray&lt; double &gt; &amp;elementJacobian_u_u, xt::pyarray&lt; double &gt; &amp;element_u, int eN, const bool embeddedBoundary, const double embeddedBoundary_penalty, xt::pyarray&lt; double &gt; &amp;embeddedBoundary_normal_q, xt::pyarray&lt; double &gt; &amp;embeddedBoundary_u_q)</argsstring>
        <name>calculateElementJacobian</name>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>mesh_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>x_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dV_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementBoundaryDiameter</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>nodeDiametersArray</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>cfl</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Ct_sge</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sc_uref</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sc_alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>useMetrics</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>mesh_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>dS_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_trial_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_grad_test_trace_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>normal_ref</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>boundaryJac_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElements_global</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nElementBoundaries_owned</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>u_l2g</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>u_dof</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sd_rowptr</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; int &gt; &amp;</type>
          <declname>sd_colind</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_a</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_v</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lag_shockCapturing</declname>
        </param>
        <param>
          <type>double</type>
          <declname>shockCapturingDiffusion</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>q_numDiff_u_last</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>elementJacobian_u_u</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>element_u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eN</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>embeddedBoundary</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>embeddedBoundary_penalty</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>embeddedBoundary_normal_q</declname>
        </param>
        <param>
          <type>xt::pyarray&lt; double &gt; &amp;</type>
          <declname>embeddedBoundary_u_q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="1078" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="1078" bodyend="1301"/>
      </memberdef>
      <memberdef kind="function" id="classproteus_1_1c_a_d_r_1afb8d9a155070ef2cae11087d3a6a0d95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;::calculateJacobian</definition>
        <argsstring>(arguments_dict &amp;args)</argsstring>
        <name>calculateJacobian</name>
        <reimplements refid="classproteus_1_1c_a_d_r__base_1abc11fbf30b49406dd27dd1a096c17a79">calculateJacobian</reimplements>
        <param>
          <type><ref refid="structproteus_1_1arguments__dict" kindref="compound">arguments_dict</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cekees/proteus/proteus/ADR.h" line="1303" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="1303" bodyend="1712"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="31">
        <label>proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1c_a_d_r"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>proteus::cADR_base</label>
        <link refid="classproteus_1_1c_a_d_r__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="36">
        <label>std::set&lt; int &gt;</label>
      </node>
      <node id="37">
        <label>std::valarray&lt; bool &gt;</label>
      </node>
      <node id="33">
        <label>proteus::cADR&lt; CompKernelType, nSpace, nQuadraturePoints_element, nDOF_mesh_trial_element, nDOF_trial_element, nDOF_test_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classproteus_1_1c_a_d_r"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>gf_s</edgelabel>
          <edgelabel>gf</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>ifem_boundary_elements</edgelabel>
          <edgelabel>cutfem_boundary_elements</edgelabel>
          <edgelabel>cutfem_boundaries</edgelabel>
          <edgelabel>ifem_boundaries</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>elementIsActive</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>proteus::cADR_base</label>
        <link refid="classproteus_1_1c_a_d_r__base"/>
      </node>
      <node id="35">
        <label>equivalent_polynomials::GeneralizedFunctions_mix&lt; nSpace, 3, nQuadraturePoints_element, nQuadraturePoints_elementBoundary &gt;</label>
        <link refid="classequivalent__polynomials_1_1_generalized_functions__mix"/>
      </node>
    </collaborationgraph>
    <location file="/home/cekees/proteus/proteus/ADR.h" line="38" column="1" bodyfile="/home/cekees/proteus/proteus/ADR.h" bodystart="37" bodyend="1713"/>
    <listofallmembers>
      <member refid="classproteus_1_1c_a_d_r_1a93b20e529d57aa2cc0252135bdeb5b68" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>cADR</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a1b64a693d02a71f5b11e2bd6f0ee5b98" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>calculateElementJacobian</name></member>
      <member refid="classproteus_1_1c_a_d_r_1aaac74774a85b7b679b34fa15aa7945da" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>calculateElementResidual</name></member>
      <member refid="classproteus_1_1c_a_d_r_1afb8d9a155070ef2cae11087d3a6a0d95" prot="public" virt="virtual"><scope>proteus::cADR</scope><name>calculateJacobian</name></member>
      <member refid="classproteus_1_1c_a_d_r_1abb65cd4246f79a2003d2b72a4b952a98" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>calculateNumericalDiffusion</name></member>
      <member refid="classproteus_1_1c_a_d_r_1ae7de58f6447443d50265f27d43c426a9" prot="public" virt="virtual"><scope>proteus::cADR</scope><name>calculateResidual</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a3d413e329d09cab00bff74bc866b38ab" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a0c1949faef4fe729b64051b5f4f04639" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>calculateSubgridError_tau</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a3bb76a168b4d52bec8572d0dc741dd1a" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>ck</name></member>
      <member refid="classproteus_1_1c_a_d_r_1ac410bbc601ff706a5179d67414bf8330" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>cutfem_boundaries</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a7012807628c4aa581d03cf9b6e0ac2ec" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>cutfem_boundary_elements</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a7b2567bf1b9137fe6651cf4409f5b75f" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>elementIsActive</name></member>
      <member refid="classproteus_1_1c_a_d_r_1afbd6855b5dfe06a79e9c99f140140d8e" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>exteriorNumericalAdvectiveFlux</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a6aa48efde7035bd33e9d76ac4e5b72bd" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>exteriorNumericalAdvectiveFluxDerivative</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a07956ab045055611f75a8ca2c28c8fc5" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>exteriorNumericalDiffusiveFlux</name></member>
      <member refid="classproteus_1_1c_a_d_r_1ac97a4d95e35a67302104ab2d1af9b42d" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>ExteriorNumericalDiffusiveFluxJacobian</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a5563bd9219415c1cd04277d5c5c7d421" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>gf</name></member>
      <member refid="classproteus_1_1c_a_d_r_1ad0547ed4043b189fb8eeab07594e8035" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>gf_s</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a2f5e5191ca7e18f9d3a4f0eba61cbc27" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>ifem_boundaries</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a503f547baa5728ef59a4709306cade67" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>ifem_boundary_elements</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a44ccd30cb4b8f19c2cfece20663f9c5c" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>nDOF_test_X_trial_element</name></member>
      <member refid="classproteus_1_1c_a_d_r_1a3830b0617ed4e9f831f269f549f8361c" prot="public" virt="non-virtual"><scope>proteus::cADR</scope><name>updateEmbeddedBoundaryTerms</name></member>
      <member refid="classproteus_1_1c_a_d_r__base_1af28aa3d167e8e7f915a79b970450a5cf" prot="public" virt="virtual"><scope>proteus::cADR</scope><name>~cADR_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
